{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<ul> <li> <p> What's New?</p> <p>Find out what's new in the latest HCL Leap.</p> <p> Go to What's New</p> </li> <li> <p> Introducing Leap</p> <p>HCL Leap builds dynamic forms and applications with a web-based interface. From a single interface, you can design a form, define access privileges, create workflow stages, deploy the application, and review submitted results.    </p> <p> Learn about Leap</p> </li> <li> <p> Deploying Leap</p> <p>Learn how to deploy Leap.</p> <p> Deploying Leap</p> </li> <li> <p> System Requirements</p> <p>Know the minimum system requirements for HCL Leap version 9.3.7 and later.</p> <p> Go to System Requirements</p> </li> <li> <p> Tutorials</p> <p>The Leap Help Center contains a section for tutorials to help you use Leap.</p> <p> Go to How To</p> </li> <li> <p> HCLSoftware U</p> <p>Explore self-paced learning courses for using HCL Leap.</p> <p> Visit HCL Software U</p> </li> <li> <p> HCL Support</p> <p>Discover HCL support bulletins and access your support cases.</p> <p> Access Support</p> </li> <li> <p> Community Forums</p> <p>Join Leap community forums to connect with other Leap users, ask questions, and share insights.</p> <p> Go to Community Forums</p> </li> <li> <p> Leap Ideas Portal</p> <p>Join the Leap Ideas Portal to submit ideas for HCL Leap.</p> <p> Join Leap Ideas Portal</p> </li> <li> <p> Leap 9.3.4 and earlier Help Center</p> <p>This Help Center contains documentation for earlier HCL Leap verions.</p> <p> Go to Leap 9.3.4 and earlier Help Center</p> </li> </ul>"},{"location":"ac_accessibility_features_for_designers.html","title":"Accessibility features for application designers","text":"<p>HCL Leap contains accessibility features so users with disabilities can create forms and applications.</p> <p>To make designing forms and applications easier for users with disabilities, Leap has the following keyboard shortcuts:</p>"},{"location":"ac_accessibility_features_for_designers.html#adding-items-to-your-form","title":"Adding items to your form","text":"<p>To add items to your form from the Palette, set focus on the form item with the Tab key and press Enter. The item appears on the form where indicated by a blue line.</p>"},{"location":"ac_accessibility_features_for_designers.html#focus-indicator","title":"Focus indicator","text":"<p>When a form item has focus the background changes color, and the area that is occupied by the form item is defined by a colored line.</p>"},{"location":"ac_accessibility_features_for_designers.html#item-triggers","title":"Item triggers","text":"<p>When an item has focus, you can trigger it by pressing the Enter key or space bar. The browser that you use determines whether you must press the Enter key or space bar.</p>"},{"location":"ac_accessibility_features_for_designers.html#tab-key","title":"Tab key","text":"<p>You can navigate to any visible form item, link, or menu by pressing the Tab key.</p>"},{"location":"ac_accessibility_features_for_designers.html#tab-navigation","title":"Tab navigation","text":"<p>The Properties side panel contains multiple tabs. To navigate between tabs, use the arrow keys.</p>"},{"location":"ac_accessibility_features_for_designers.html#tab-order-of-form-items","title":"Tab order of form items","text":"<p>When you place items on a form, the tab order is set based on item placement. If you insert a form item before existing items, the tab order is automatically reset. You do not have to manually configure tab order when you insert additional items into a form.</p>"},{"location":"ac_accessibility_features_for_designers.html#navigating-between-palettes","title":"Navigating between Palettes","text":"<p>You can navigate between the Common, and Specialized palettes. When the focus is on one Palette use any arrow key to collapse the open Palette and expand another one. If you want to switch palettes while focus is on a form item, you must use the Tab key to move to the palette name, then navigate with the arrow keys. You cannot navigate between palettes when a form item has focus.</p>"},{"location":"ac_accessibility_features_for_designers.html#keyboard-commands-for-common-items","title":"Keyboard commands for common items","text":"<p>Leap has three menu items: Save, Preview, and Cancel. The following keyboard commands are available so you do not have to navigate away from your form.</p> <ul> <li>Save: Ctrl+s</li> <li>Preview: Ctrl+e</li> <li>Cancel: Ctrl+q</li> </ul> <p>When designing forms the Properties side panel contains a box titled \u201cAccessibility - Alternative text ID\u201d. Use this box to provide a text description that is used by accessibility tools to describe the item.</p> <p>The following WAI ARIA attributes are automatically added to form items when you design forms:</p> <ul> <li>aria-labelledby and Aria-label are added to fields to associate the correct label with each field.</li> <li>aria-describedby are added to fields where more description is needed to describe the function of a field.</li> <li>aria-required is added to inform a user that the field is mandatory.</li> <li>aria-invalid is added to fields when the value is not valid.</li> <li>aria-alert is used with Aria-invalid in error messages. Screen readers read the Aria-alert text to the user.</li> <li>aria-valuemin and aria-valuemax are used to denote if the file has an acceptable value range. If the value is outside the range, the aria-invalid attribute is set.</li> </ul> <p>Parent topic: Accessibility overview</p>"},{"location":"ac_accessibility_features_for_users.html","title":"Accessibility features for application users","text":"<p>When given the link to an HCL Leap application, a user is provided with many built in accessibility features.</p> <p>To make using forms and applications easier for users with disabilities, Leap has the following accessibility features and keyboard shortcuts:</p> <p>Screen reader compatibility :   Leap is compatible with screen readers that comply with WCAG 2.0 and WAI-ARIA. Some screen readers perform a read through of web pages from start to finish as the default.</p> <p>Tab key :   You can navigate to any visible form item, link, or menu by pressing the Tab key.</p> <p>Note:To move focus out of the Sample request or response body input area in a service description form, press Esc&gt;Tab.</p> <p>Parent topic: Accessibility overview</p>"},{"location":"ac_creating_accessible_application.html","title":"Creating an accessible application","text":"<p>When you create a form or application, the following information helps you design an accessible form for users with disabilities.</p> <p>HCL Leap is designed to make building accessible forms easy. For example, the tab order of form items is set to start at the first item on the page, and work through consecutive items. You do not have to reset the tab order if you must add items to the beginning of a form. There are several things that you can do to make your forms more accessible to users with disabilities:</p> <ul> <li>During the creation of your application, accessibility standards, such as WCAG 2.0, should be considered with regards to layout and content. Leap does not prevent authors from creating non-accessible forms.</li> <li>When you add items to your form, give each form item a clear description or name. Screen readers read the name that is associated with a form item. You can also use a Text item as a data label instead of the field provided. For more information, see Using a Text item as a label.</li> <li>Add hints to each form item by modifying the Add hint field. The Hint provides more information when read to the user. For example, if your form has a Name field, the hint tells the user your preference for how to enter their given and surnames.</li> <li>Text blocks are not automatically part of the tab order. Screen readers do not put focus on text blocks, and your users might miss vital information. To ensure that text information is not omitted, select the text item, in the properties side panel, select the check box for Add to tab order. The text is added to the tab order, and is read by screen readers.</li> <li>If you add images or media items to your forms, open the Properties side panel and add descriptive text to the Alternative text property. A screen reader uses the alternative text to describe the image or media item to the user.</li> <li>You can add text items to your form and have them associate with other form items. You can use this technique to create formatted titles for your form items. However, you must link the text item and the form item together. For example, you have a Select One item on your form. You want its title to be rich text so it can have a color, background, and format different from the default title. You add the title with the Text form item, which gives the formatting you want. However, the text item is not read by the screen reader, and the user might not know what the choice list represents. To ensure that the Text field is read by a screen reader, go to the choice list Properties side panel. Insert the name of the Text field into the Accessibility \u2013 Alternative label ID field. A screen reader reads the appropriate text for the choice list.</li> <li>When using the new dynamic layout, it might be necessary to group items into Sections to convey the proper meaning to users. For example, when creating a custom label via the alternative text ID option.</li> <li> <p>When using Sections, if a label exists, it provides a navigation landmark using WAI-ARIA that is available to assistive technologies. For more information, WAI_ARIA roles.</p> </li> <li> <p>Using a Text item as a label For accessibility ease of use, users might prefer to see the title of an entry field to the side of the field, rather than above the field.</p> </li> </ul> <p>Parent topic: Using the editor</p>"},{"location":"ac_experience_builder_accessibility.html","title":"Accessibility overview","text":"<p>HCL Leap contains a number of built-in accessibility features to make applications easy to create and use by people with disabilities.</p> <p>Leap provides the best accessibility experience when used with the newest release of the browser and the newest release of the screen reader. For more information, see the following URLs:</p> <ul> <li>Accessible Rich Internet Applications (WAI-ARIA) 1.0</li> <li> <p>Web Content Accessibility Guidelines (WCAG) 2.0</p> </li> <li> <p>Accessibility features for application designers HCL Leap contains accessibility features so users with disabilities can create forms and applications.</p> </li> <li>Accessibility features for application users When given the link to an HCL Leap application, a user is provided with many built in accessibility features.</li> </ul>"},{"location":"ac_using_text_item_as_label.html","title":"Using a Text item as a label","text":"<p>For accessibility ease of use, users might prefer to see the title of an entry field to the side of the field, rather than above the field.</p> <p>The following instructions describe how to set a text item as the title of a field. For this example, the title is displayed to the left of the field where the user will type information. You can also use these instructions inside a Section, which allows you to format the spacing between the Text item and the Entry Field without affecting the spacing of the rest of your form.</p> <ol> <li> <p>Add a Text item to the left column of the grid.</p> <p>The Edit Text Properties side panel opens.</p> </li> <li> <p>Type the title you want to display to users on the form.</p> </li> <li> <p>Copy the information displayed in the ID field.</p> <p>On a new form, where the text item is the first item on the form, the default name is F_Text1. You can change this ID to be any name you want, however each form item must have a unique ID.</p> </li> <li> <p>Add a Single Line Entry, or Multi-Line Entry to the right of the Text item.</p> </li> <li> <p>In the properties side panel, delete the text from the Title field.</p> </li> <li> <p>Go to Data Label and paste the unique ID you copied from the Text field.</p> </li> </ol> <p>When you save and preview the form, the text item appears as the label for the entry field.</p> <p>Parent topic: Creating an accessible application</p>"},{"location":"ad_managing_db2_database.html","title":"Backing up and restoring the DB2 database","text":"<p>Data for HCL Leap applications is stored within a database. Ensure that you have a backup and restore strategy in place to protect your data.</p> <p>Backing up and restoring data in DB2\u00ae is done using the Backup and Restore commands. If you plan to restore data from a server with a different bit order than the one currently storing the data, you must use the Data Movement Tool. For more information, see Data Movement Tool.</p> <p>Parent topic: Administering Leap</p>"},{"location":"admin_application_dashboard.html","title":"Admin Application Dashboard","text":"<p>The Admin Application Dashboard is a page that is available to members of the Admin or SuperAdmin groups.</p> <p>An Admin tab will appear in the top banner for users with permission. The page provides information about all the applications on the Leap server. To manage the load on the server, the details are gathered using a timer task that runs at a regular configurable interval (see Application Statistics collection timer in Configuration properties).</p> <p>The dashboard shows the following:</p> <ul> <li>The total number of applications.</li> <li>A breakdown of the applications by status (i.e. running, undeployed).</li> <li>The total number of application records across all applications.</li> <li>A filterable table of all the applications. Clicking on a row in the table reveals additional details about the selected application.</li> </ul> <p>The data may be updated by clicking Refresh. The data may be exported to a spreadsheet by clicking Export to spreadsheet.</p> <p>For more information, see Application statistics REST API.</p> <p>Parent topic: Administering Leap</p>"},{"location":"admin_config_ui.html","title":"Admin Configuration Page","text":"<p>The Admin Configuration page is available to members of the 'AdministrativeUsers' security role.  The admin can modify settings like: the HTTP services whitelist, service catalogs and descriptions, the domains that Leap can be embedded into, the javaScript sandbox setting, image domain whitelist, users and roles, admin contact information, and enabling anonymous access.</p> <p>The page must be enabled by setting the Leap property \"ibm.nitro.NitroConfig.enableAdminConfigUI=true\" in the leap-config.properties or the Helm script for a Kubernetes deployment.</p> <p>To access the admin configuration page visit http://myLeapServer/apps-admin/secure/org/admin/config/index.html.</p> <p>When you access the admin configuration page the first time, all config settings (the javaScript sandbox, services whitelist, service descriptions, image domain whitelist, admin info and anonymous settings) will be loaded from the current configuration.</p> <p>After the feature is enabled, and the admin clicks 'save', the supported config properties are stored and read from the database.</p> <p>Changes made in the admin configuration page will take effect automatically within a few moments, the server/pod does not need to be restarted, but may need a browser refresh to take effect.</p> <p>Settings that are not supported in the Admin configuration page will continue to be configured using the leap_config.properties or the Helm chart properties.</p>"},{"location":"admin_config_ui.html#section_adm_srv_whitelist","title":"HTTP Services whitelist","text":"<p>The Leap admin can define a list of domains and operations that app authors are allowed to include in their applications.  The whitelist defaults to 'off, which means that app authors can use REST/JSON services from any domain'.  The admin can enable the feature and then click the \"Add URL to whitelist\" button, which will provide a dialog to define a URL and operations (get, post, put, patch, delete, and head) to allow.</p>"},{"location":"admin_config_ui.html#section_adm_srv_catalog","title":"Service catalogs and descriptions","text":"<p>Admins have always been able to add custom service descriptions to Leap (by placing them in the '.../ServiceCatalog/1' directory on the server).  Within the admin configuration page, admins will be able to upload existing XML service descriptions or create new service descriptions with the REST/JSON wizard.</p> <p>For the first time, Leap admins will be able to define additional service catalogs and populate those catalogs with services.</p> <p>The configured service descriptions are grouped by catalog.  App authors will see any configured catalogs and services to which they have access in the service description authoring dialog.  This dialog can be accessed from Settings\u2026Services\u2026Add Service Configuration panel, or through other venues like events or buttons within the authoring environment.</p> <p>The section will also show product-level service descriptions, enabling the admin to adjust which users and groups have access to them.</p>"},{"location":"admin_config_ui.html#service-security","title":"Service Security","text":"<p>Access to a service description may be given to all authenticated users or a specific user or group.  The access control is made up of two parts: - App Authors (those who may discover and work with the service while designing an application)   - Can be set to all app authors   - Can be set to specific users or groups - End user access (those who may run the service)   - Can be set to all authenticated users   - Can be set to include anonymous users   - Can be set to specific users or groups</p> <p>The Leap admin must manually enter the users and groups to which they want to assign access for a service description.  </p> <p>The user values provided must match the configured user identification attribute (userIdMap):</p> <p>For a Kubernetes Deployment, this is defined in the ldap override section of your Helm chart, which is currently limited to \"mail\". The group values must match the configured group identification attribute (groupIdMap), defined in the ldap override section of your Helm chart, which defaults to its common name (cn). </p> <p>For a traditional WebSphere deployment, this is defined in your federated repository configuration, which defaults to 'uid'.  The group values must match the configured group identification attribute, defined in the federated repository configuration, which defaults to its common name (cn).</p>"},{"location":"admin_config_ui.html#creating-a-service-description","title":"Creating a service description","text":"<p>To add a service, click the \"Create service description\" button, where you will have two options: Build REST/JSON or Upload service description XML.</p>"},{"location":"admin_config_ui.html#build-restjson","title":"Build REST/JSON","text":"<p>For this feature we have provided the same wizard that is provided to application authors for building a REST/JSON service description.  This enables the admin to build a service description for a HTTP endpoint that accepts and returns JSON.</p>"},{"location":"admin_config_ui.html#url","title":"URL","text":"<p>Select the desired action and URL for the endpoint.</p>"},{"location":"admin_config_ui.html#segments-and-parameters","title":"Segments and parameters","text":"<p>This section separates the segments and parameters of the specified URL.  The purpose of this is so that you can define which components need to remain hard-coded or can be assignable from within the Leap application that uses the service.</p> <p>If assignable, you can customize the name of the parameter as it will appear for the app author.</p>"},{"location":"admin_config_ui.html#request","title":"Request","text":"<p>In this section you can define any request headers that are required to communicate with the specified URL.  Any header defined can be hard-coded or marked as assignable.</p>"},{"location":"admin_config_ui.html#response","title":"Response","text":"<p>In this section you can define a sample response body.  We will attempt to access the URL and retrieve a sample response.  If a sample response cannot be retrieved, then you may need to supply one.  The content in this section will determine how the output of the service is constructed.  If there is no response then the service will have a single response output parameter.</p> <p>You may also add any response headers.</p>"},{"location":"admin_config_ui.html#security","title":"Security","text":"<p>In this section you can define who can access this service.  The access is defined as: - Application authors (who can discover and use the service in their applications) - End users (who are allowed to access the data from the service while running in an application)</p> <p>You can also define what kind of authentication is required to call the service: - no authentication required - username/password - cookie-based authentication</p>"},{"location":"admin_config_ui.html#service-details","title":"Service Details","text":"<p>In this section you can define the service name, description, and assign it to a category.  If you want to create a new category, enter in the category name and then click the \"Add ...\" option that appears.</p>"},{"location":"admin_config_ui.html#upload-service-description-xml","title":"Upload service description XML","text":"<p>This feature is for configuring any custom service description files that have been deployed to your Leap environment.  We recommend that you remove the files from your ServiceCatalog/1 directory and then upload them using this feature of the admin configuration page.</p> <p>Note: The previous mechanism of placing files in the ServiceCatalog/1 directory will still work, but any files added that way cannot be assigned to a category and will appear in \"General\".</p> <ol> <li>Select \"Upload service description XML\"</li> <li>Click Next.</li> <li>Click \"Upload File\", locate and select the desired service description XML file.  Note that only XML files that follow our schema definition for service descriptions may be used.</li> <li>The content of the file will be parsed and displayed.  This version of the tech-preview will not allow editing of the content, if you need to make changes to the service configuration you must edit outside the admin UI and then re-upload the file.</li> <li>Assign the service to a catalog.  Select an existing catalog from the list, or type in the name of a new catalog and click the \"Add ... \" option that appears in the list. Note: the catalog will not be added if you do not click the list item that appears.</li> <li>Click Next to move on to security.</li> <li>Select the desired security option and if applicable enter the users or groups separated by commas.</li> </ol>"},{"location":"admin_config_ui.html#section_adm_ebd_iframe","title":"Embedding into iFrame","text":"<p>You can toggle the option to \"Allow embedding from any domain\" or you can add the specific domains that are allowed.</p> <p>Define which domains users can embed Leap forms into.</p> <p>To add a domain, click the \"Add new domain\" button and enter the HTTP address for the domain into the field that appears.  If you want to allow Leap apps to embed other Leap apps add a value of 'self' (including single quotes).</p>"},{"location":"admin_config_ui.html#section_adm_js","title":"JavaScript Setting","text":"<p>By default, any custom JavaScript and custom HTML in Leap applications runs in a restricted sandbox.</p> <p>With this setting enabled, Leap applications can utilize unrestricted JavaScript and HTML.</p> <p>This section is related to the existing \"secureJS\" property.</p>"},{"location":"admin_config_ui.html#section_adm_img_whitelist","title":"Image domain whitelist","text":"<p>The Image Domain Whitelist config settings define a white-list of domains from where images can be uploaded to a Rich Text Entry field.</p> <p>You can toggle the option to \"Allow images from any domain\" or you can add the specific domains that are allowed.</p> <p>To add a domain, click the \"Add new domain\" button and enter the HTTP address for the domain in the field that appears. This section is related to the existing \"imageDomainWhitelist\" property.</p>"},{"location":"admin_config_ui.html#section_adm_usr_role","title":"Users and Roles","text":"<p>This section allows the Leap admin to change the definition of the administrator, application author and application end user roles.  You can use this to change the users and groups assigned to the roles, which previously would have required you to define them in the WebSphere admin console or modify the helm chart in a kubernetes deployment.  When using the admin configuration page, Leap becomes the custodian of the access permissions related to application security.  You must assign the special subject of 'All Authenticated Users' to each of these roles within the WebSphere admin console 'security role to user/group mapping' or the helm charts 'roleMapping' property.</p> <p>Note: The user values provided must match the attributes used to login, for a Kubernetes deployment this is limited to the users email property. The group values must match the configured attribute, which defaults to cn.  The user and group values should be comma separated.</p>"},{"location":"admin_config_ui.html#administrator-role","title":"Administrator Role","text":"<p>Users or groups in the Administrator role can modify the Leap configuration, view application statistics, and, view and edit all applications.  Add users or groups to the designated fields to assign them to the role.</p>"},{"location":"admin_config_ui.html#application-manager-role","title":"Application Manager Role","text":"<p>Users or groups in this role can view application statistics and view and edit all applications.  Add users or groups to the designated fields to assign them to the role.</p>"},{"location":"admin_config_ui.html#application-author-role","title":"Application Author Role","text":"<p>A role that defines who has the ability to create an application.  You can select \"all authenticated\" or define a specific set of users or groups.</p>"},{"location":"admin_config_ui.html#application-end-user-role","title":"Application end user role","text":"<p>A role that defines who can access the runtime version of an application.  You can select \"all authenticated\" or define a specific set of users or groups.  You can also toggle the option to allow anonymous access to use applications.</p>"},{"location":"admin_config_ui.html#admin-contact-info","title":"Admin Contact Info","text":"<p>This section is for setting the \"adminInfo\" from our existing configuration properties.  It allows the Leap admin to provide the user more contact information when an error message is shown.  The section renders the message, including the admin-supplied info, that will be displayed to end users.</p> <p>Parent topic: Administering Leap</p>"},{"location":"admin_foundry_integration.html","title":"Integrating with HCL Volt MX Foundry","text":"<p>HCL Leap can now use the integration services defined in HCL Volt MX Foundry.</p> <p>Leap can be connected to more than one Foundry application and can even be located on different Foundry cloud or on-premise servers.\u00a0 This integration does not require any identity services because all requests will be made using the app key and the app secret of the application.</p> <p>Once configured, Leap will connect with Foundry to determine the services and operations that need to appear in Leap.\u00a0 Each service in the Foundry application will be represented as a Service Catalog in Leap.\u00a0 Each operation in the Foundry service will appear as a service in the Leap catalog.  Leap will periodically reach out to Foundry to insure that its service catalogs and services are kept in sync.</p> <p>Before configuring the integration you will need to have a published Foundry application that includes at least 1 integration service and operation.</p>"},{"location":"admin_foundry_integration.html#how-to-create-your-first-foundry-integration-service","title":"How to create your first Foundry Integration Service","text":"<ol> <li>Login to the HCL Volt MX Foundry console.</li> <li>Click Add new.</li> <li>Enter a name for the application.</li> <li>Click Integration.</li> <li>Click Configure New.</li> <li>Give the service a meaningful name (it may not contain spaces and only allows special characters '-' and '_'.</li> <li>Set the service type.</li> <li>Define the base url of the service.</li> <li>If required, configure the authentication for connecting to the service.</li> <li>Click Save &amp; Add Operation.</li> <li>Define the operation:</li> <li>Give the operation a meaningful name (it may not contain spaces).</li> <li>Define the target URL.\u00a0   Note: If the URL is meant to take dynamic parameters, create an input parameter and then reference it in the URL with a dollar sign (for example,  <code>$inputParam</code>).</li> <li>Define the target method.</li> <li>Click Save and Fetch Response.</li> <li>In the Backend Response section, hover over the elements that you want to be returned and click Create Response.  This will add the appropriate outputs to the operation response.</li> <li>Click Save Operation.</li> <li>Click on the Publish tab.</li> <li>Click on the Publish button. Once the app is published, you are ready to move on to the next step of setting up the Leap configuration!\u00a0 You will need the service URL, the primary app key, and the primary app secret.\u00a0 If you did not copy them from the publish dialog you can access them by clicking on the Key button (on the upper right corner of the application card) on the Publish tab.</li> </ol> <p>For more detailed information on the HCL Volt MX Foundry integration services refer to the product documentation.</p>"},{"location":"admin_foundry_integration.html#enabling-and-configuring-the-mx-foundry-integration","title":"Enabling and configuring the MX Foundry Integration","text":"<p>In this section we will configure Leap so that it can communicate with MX Foundry and its integration services.</p> <p>The process for enabling and configuring the integration depends on your Leap environment.\u00a0</p> <p>If you have the Admin Configuration page enabled you will use it, otherwise the settings are defined as Leap properties.</p> <p>There are 3 things that are required for each Foundry application:</p> <ol> <li> <p>the application name (appName) - This can be any name that you like, but it is intended to help you easily correlate the settings with the application in Foundry. It is recommended that you set this to the same name used in Foundry.</p> </li> <li> <p>the service url (serviceUrl) - This is the url for the integration service.\u00a0 It can be copied from the Foundry \"publish\" dialog.</p> </li> <li> <p>the credential alias (credentialAlias) - This is the name of the credential object that contains the app key and app secret which is used to communicate with MX Foundry.\u00a0 The credential setup depends on where Leap is deployed.</p> </li> </ol>"},{"location":"admin_foundry_integration.html#how-to-create-credential-for-accessing-mx-foundry","title":"How to create credential for accessing MX Foundry","text":"<p>The process for creating the credential object is based on the deployment environment: WebSphere, Kubernetes, or Domino.</p>"},{"location":"admin_foundry_integration.html#create-credential-for-leap-on-websphere","title":"Create credential for Leap on WebSphere","text":"<p>The credential object for Leap running on WebSphere is a J2c Alias.</p> <ol> <li>Login to the WebSphere Administration console.</li> <li>Create a new J2C Alias.</li> <li>Provide a name for the alias.  This is the value that will be given to the <code>credentialAlias</code> in the Leap configuration.</li> <li>Copy the app key from the MX Foundry publish dialog into the username field.</li> <li>Copy the app secret from the MX Foundry publish dialog into the password field.</li> <li>Save the alias.</li> <li>Restart WebSphere.</li> </ol>"},{"location":"admin_foundry_integration.html#create-credential-for-leap-on-kubernetes","title":"Create credential for Leap on Kubernetes","text":"<p>The credential object for Leap running on WebSphere is a Kubernetes Secret. The value you supply is the same as the one you have used in creating the kubernetes secret.</p> <p>First, create a kubernetes secret using the command below:</p> <pre><code>\"kubectl create secret generic &lt;secretName&gt; --from-literal=&lt;credentialAlias&gt;_key=&lt;appKey&gt; --from-literal=&lt;credentialAlias&gt;_secret=&lt;appSecret&gt; -n dxns\"\n</code></pre> <ul> <li> <p>The <code>&lt;secretName&gt;</code> will be how the object is identified within Kubernetes.</p> </li> <li> <p>The <code>&lt;credentialAlias&gt;</code> is the value provided to the 'credentialAlias' property. This is how Leap will locate/use this object.</p> </li> <li> <p>The <code>&lt;appKey&gt;</code> is the app key for the Foundry application.</p> </li> <li> <p>The <code>&lt;appSecret&gt;</code> is the app secret for the Foundry application.</p> </li> </ul> <p>An example secret would look something like:</p> <p><pre><code>\"kubectl -n dxns create secret generic foundry-app1-credentials --from-literal=FOUNDRY_APP1_key=6e230187797c9ddb28b77d5d11306d55 --from-literal=FOUNDRY_APP1_secret=1f8527fd8d981e31a4861291ce632942\"\n</code></pre> The value specified for the <code>credentialAlias</code> would be \"FOUNDRY_APP1\".</p> <p>After creating, you need to refer to the secret in the <code>deploy-values.yaml</code> as shown in the following example:</p> <pre><code>configuration:\n  leap:\n    . . .\n    customSecrets:\n      foundry-app1: foundry-app1-credentials\n    . . .\n</code></pre>"},{"location":"admin_foundry_integration.html#create-credential-for-domino-leap","title":"Create credential for Domino Leap","text":"<p>The credential object for Domino Leap is a service credential which can be defined in the Leap Config DB (.nsf).</p> <ol> <li>Open the Leap Configuration database in HCL Domino Designer or HCL Notes.</li> <li>Create a new service credential.</li> <li>Provide a name for the credential, this is the value that is given to the <code>credentialAlias</code> in the Leap configuration.</li> <li>Copy the app key from the MX Foundry publish dialog into the username field.</li> <li>Copy the app secret from the MX Foundry publish dialog into the password field.</li> <li>Save the service credential.</li> </ol>"},{"location":"admin_foundry_integration.html#using-a-service-from-mx-foundry-in-your-leap-application","title":"Using a service from MX Foundry in your Leap application","text":"<p>The MX Foundry services will appear in the service configuration dialog.  The Foundry service will be the name of the service catalog.  After selecting the catalog, the Foundry operations will be listed as the Leap services.</p> <p>Select the service and continue through the dialog to map inputs and outputs as you would for any other service.</p>"},{"location":"admin_foundry_integration.html#troubleshooting-the-hcl-volt-mx-integration","title":"Troubleshooting the HCL Volt MX Integration","text":"<p>If your Foundry Integration services are not appearing with in Leap, try the following procedures:</p> <ul> <li>Verify that your Leap server can reach the Foundry server.</li> <li>Verify that you have enabled the integration.</li> <li>Verify that you have defined all three config settings for the Foundry application (app name, service url, and credential alias).</li> <li>Verify that the username and password in the credential alias is using the correct app key (should be used as the username) and app secret (used as the password).</li> <li>Verify that your Foundry application is published.  If it was published recently, then you may need to wait at least 5 minutes before the change will appear in Leap.  Restarting Leap will also force Leap to pull fresh content from Foundry.</li> <li>Leap caches (default is 60 minutes) the artifacts that define the foundry services, if your changes are not appearing in Leap then you may need to restart Leap.</li> <li>You may need to install the trusted root certificate for the SSL certificate that was used to secure the MX Foundry server.</li> <li>Increase the log level by adding the trace string \"com.ibm.form.nitro.service.*=finest\".</li> <li>If the catalogs and services are still not appearing, contact Support.</li> </ul> <p>Parent topic: Administering Leap</p>"},{"location":"administering_leap.html","title":"Administering Leap","text":"<p>The following topics contain information on administering Leap.</p> <ul> <li>Backing up and restoring the DB2 database Data for HCL Leap applications is stored within a database. Ensure that you have a backup and restore strategy in place to protect your data.</li> <li>Strict CSP HCL Leap has a limited capability to restrict the rendering of Leap Forms using a \u201cStrict CSP\u201d policy.</li> <li>Admin Application Dashboard The Admin Application Dashboard is a page that is available to members of the Admin or SuperAdmin groups.</li> <li>Admin Configuration Page The Admin configuration page can be used to modify some configuration properties and is available to members of the Admin group.</li> <li>Integrating with HCL Volt MX Foundry Connect to MX Foundry and use integration services within your Leap applications.</li> </ul>"},{"location":"app_stats_restapi.html","title":"Application statistics REST API","text":"<p>Application statistics REST API exposes statistics data on all applications, such as an application's last updated date, record count, attachment size etc.</p> <p>Statistics are collected by a timer task which can be configured by an administrator using Configuration properties.</p> <ul> <li> <p>Authentication</p> <p>All REST API calls must be made as an authenticated user in Administrator or Super Administrator role. If you want to exercise the API with code, you may use basic authentication. The primary mechanism is to use basic authentication where the username and password are a Base64 encoded string.</p> </li> <li> <p>REST actions</p> <p>The following table lists the types of actions that are available and the URLs associated with those actions.</p> URL HTTP Verb ActionName /apps-basic/secure/org/admin/apps GET list /apps-basic/secure/org/admin/apps/{app-uid} GET app detail <p>Note: <code>{app-uid}</code> is the UID of the application.</p> </li> </ul>"},{"location":"app_stats_restapi.html#section_p5n_2bc_kyb","title":"List","text":"<p>This action retrieves a list of all apps, available query parameters:</p> <ul> <li> <p><code>forceRefresh</code>: executes statistics collection on all apps. Default value: <code>false</code></p> </li> <li> <p><code>includeForms</code>: whether includes app forms information in response. Default value: <code>false</code></p> </li> <li> <p><code>includeAdmins</code>: whether includes app administrators information in response. Default value: <code>false</code></p> </li> <li> <p><code>format</code>: (case sensitive) acceptable values:</p> <ul> <li>JSON: <code>json</code> or <code>application/json</code></li> <li>Spreadsheet: <code>xlsx</code> or <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code></li> </ul> </li> <li> <p><code>filename</code>: (optional) only used when <code>pFormat</code> is set to <code>xlsx</code> format. The file extension must be <code>.xlsx</code>.</p> <p>Note: If this parameter is not specified, the default file name is app.xlsx.</p> </li> </ul>"},{"location":"app_stats_restapi.html#section_qwb_qbc_kyb","title":"App detail","text":"<p>This action retrieves the details for a single app.</p> <p>Parent topic: REST API reference</p>"},{"location":"as_assigning_users_or_groups_to_roles.html","title":"Assigning users or groups to roles","text":"<p>Give the users in your organization permission to work with the data relevant to them by assigning them roles.</p> <p>After you establish roles for the users in your organization, you can start assigning users to those roles by adding them individually, or in groups using the Access tab in HCL Leap. For example, you can assign users or groups as defined in your LDAP to Roles. You can use the search to find users and groups within your company directory, or database. There are several predefined groups from which to choose:</p>"},{"location":"as_assigning_users_or_groups_to_roles.html#all-authenticated-users","title":"All Authenticated Users","text":"<p>Any user who is authenticated with your organization.</p>"},{"location":"as_assigning_users_or_groups_to_roles.html#anonymous-users","title":"Anonymous Users","text":"<p>Any user who you want to work anonymously with the application.</p>"},{"location":"as_assigning_users_or_groups_to_roles.html#invited-users","title":"Invited Users","text":"<p>Any anonymous user who receives a unique URL generated from within stages when an application changes from one stage to another. A user who is not normally given access to the form in that stage can use that URL to participate in the workflow in that instance.</p> <p>Note: Requires allowed anonymous access.</p>"},{"location":"as_assigning_users_or_groups_to_roles.html#instance-creator","title":"Instance Creator","text":"<p>The user who submitted a form.</p> <p>Note: You cannot add All Authenticated Users to any role that has application Edit permissions. This prevents the applications from all other users from appearing in your Manage tab, making your applications easier to find. This also prevents your application from appearing on the Manage page for every other authenticated user.</p> <p>To add users from predefined groups:</p> <ol> <li> <p>In the Access tab, go to the navigation tree and click the role you want to assign in the Assign Users menu.</p> <p>The Assign Users window opens.</p> </li> <li> <p>Add new usersor groups, or select from a predefined group:</p> <ul> <li> <p>To create new usersor groups, enter the name of an individual useror group. Select it, then click the Add user plus sign.</p> <p>Note: There is a limit to the length of a single user name, or ID. The limit varies by language and character set. For example, the English limit is 256 characters. If you exceed the character limit, you are shown an error message when you attempt to save the form.</p> </li> <li> <p>To use an existing group, select the group and click the Add group plus sign. The Role Members window shows the members that are assigned to the role.</p> </li> </ul> </li> <li> <p>You can remove members from a role by clicking Delete user for the name of the member., or run a test to see whether Leap can find the member.</p> <ul> <li>To remove a member from a group, click Delete group for the name of the member.</li> <li>To test if Leap can find a group member, click Validate.</li> </ul> </li> </ol> <p>Parent topic: Securing</p>"},{"location":"as_assigning_users_to_maintain_the_application.html","title":"Assigning users to maintain the application","text":"<p>To define who can edit an HCL Leap application, use the design settings in the Access tab.</p> <p>By default, only administrators can edit and maintain an application. However, you can also assign other roles to do the task. In the Manage tab, an administrator can grant permission for other users to edit applications.</p> <ol> <li> <p>To change who can edit an application, click Design Settings in the Access tab.</p> <p>The Design Settings table opens, displaying roles and their access permissions.</p> </li> <li> <p>To grant or remove edit permission from a user role, click the Edit check box next to that role.</p> </li> </ol> <p>Parent topic: Securing</p>"},{"location":"as_define_security_roles.html","title":"Defining basic security roles for users","text":"<p>Create roles for users in your organization so they can work with data that is relevant to them.</p> <p>HCL Leap uses a customizable role-based model to define who can access data and who can modify the application. Roles allow the assignment of data access, and application maintenance permissions.Individuals or groups are then assigned to the roles with the access component, or programmatically through web services. There are three predefined roles:</p>"},{"location":"as_define_security_roles.html#administrator","title":"Administrator","text":"<p>A role that includes users, or groups, with administrator privileges for an application.</p>"},{"location":"as_define_security_roles.html#initiator","title":"Initiator","text":"<p>A role that includes any user, or group, who can submit a form or initiate an application. For example, if the application was for Vacation Requests, you can allow all users in your organization to initiate, or submit, a Vacation Request.</p>"},{"location":"as_define_security_roles.html#record-owner","title":"Record Owner","text":"<p>A role that contains the user, or group, who submitted the form dynamically at run time.</p> <p>Each role can be Open (dynamic) or Closed (static).</p> <ul> <li>Open roles \u2013 where assignments are done either statically, or dynamically with a web service call defined on a stage action within stages. Users are assigned based on data that is gathered during the form submission. For example, a web service looks up a manager for each user who submits a form, and assigns the manager a role.</li> <li>Closed roles \u2013 where assignments of users and groups to the roles must be done explicitly from within the Access tab. Closed roles do not assign users dynamically with a web service.</li> </ul> <p>To add a role:</p> <ol> <li> <p>In the design environment, click the Access tab.</p> <p>The Define Roles window opens.</p> </li> <li> <p>Click the Add role green plus sign to add a role.</p> <p>For example, you can name the new role, \u201cManager\u201d.</p> </li> <li> <p>Click the Add role plus sign to define another role.</p> <p>For example, your form also requires a \u201cShift Supervisor\u201d.</p> </li> <li> <p>Use the radio buttons to select whether the role is Open or Closed.</p> </li> </ol> <p>Parent topic: Securing</p>"},{"location":"as_setting_stage_permissions.html","title":"Setting Stage permissions","text":"<p>Setting Stage permissions defines the \u201cCreate\u201d, \u201cRead\u201d, \u201cUpdate\u201d, and \u201cDelete\u201d permissions for each role in a stage.</p> <p>A Stage is a step in the life of a form. By default, each form has a Start and Submitted stage. The Start stage is activated when a user begins a form. The Submitted stage is the end of the workflow. You can define different permissions for each role on different stages. There are four actions users can take in the Access tab:</p>"},{"location":"as_setting_stage_permissions.html#create","title":"Create","text":"<p>By default, an initiator can create a form when the application is deployed.</p>"},{"location":"as_setting_stage_permissions.html#read","title":"Read","text":"<p>By default, only record owners and administrators can read the form when it is submitted.</p>"},{"location":"as_setting_stage_permissions.html#update","title":"Update","text":"<p>By default, no one can change the form after it is submitted. However, you can authorize users to update the form in the View Data section.</p>"},{"location":"as_setting_stage_permissions.html#delete","title":"Delete","text":"<p>By default, only administrators can delete a form from the database.</p> <p>For example, you can add a custom stage for manager approval by adding a stage, and giving a manager permission to modify the form. The following steps describe how to set the permission for a stage. Before using the following instructions, you must create a Stage between the Start and Submitted stages.</p> <ol> <li> <p>Click the Access tab. In the Stage Settings parent, select the new stage that you created.</p> </li> <li> <p>Check the permissions for the stage for each role.</p> <p>Permissions must be set for each stage of a form. The permissions that are set on one stage do not carry forward to another stage.</p> </li> </ol> <p>Parent topic: Securing</p>"},{"location":"as_setting_up_security_for_anon_access.html","title":"Setting up security for anonymous access","text":"<p>Using the correct permissions, you can allow anonymous users to access a form.</p> <p>To allow anyone to complete a form anonymously, without asking for authentication, use the following steps. No data about the user is captured or stored.</p> <p>Note: Administrators must allow anonymous access first.</p> <ol> <li> <p>Start a new application. Enter an application name. From the dashboard in the design environment, click Access.</p> </li> <li> <p>Click the Initiator role in the Access navigation.</p> </li> <li> <p>In the Add Users window, click the Add group icon next to the predefined \u201cAnonymous Users\u201d group.</p> <p>Once selected, the group appears in the Role Members window.</p> </li> <li> <p>In the Stage Settings section of the Access tab, select the Start stage for your form. Confirm that the Initiator has the Create permission selected.</p> <p>This setting allows anonymous users to submit responses. If a registered user is identified, they can either create a form anonymously or log in using their credentials.</p> <p>Note: If a user logs on using their credentials, they are no longer anonymous and their user data will be stored.</p> </li> <li> <p>In the Stage Settings section of the Access tab, select the Submitted stage for your form. Confirm that the Initiator has the Read permission selected.</p> <p>This setting allows anonymous users to view responses. You can now send users the View Data URL from the Manage tab. For more information on the View Data URL, see Viewing submitted responses.</p> </li> </ol> <p>Parent topic: Securing</p>"},{"location":"builtin_properties_widgets.html","title":"Built-In Properties","text":"<p>Some properties that already exist in the product are general purpose, or, are integral to the proper functioning of a widget.</p> <p>The following built-in properties are supported for custom widgets:</p> <ul> <li><code>'required'</code>: for data widgets, allows the app author to ensure that a value is collected. Requiredness will be enforced beyond the UI; the integrity of the data will be enforced when it is submitted to the server.</li> <li><code>'title'</code>: this is used in various contexts to allow for editing and display of the name of a widget instance.</li> <li><code>'seenInOverview'</code>: allows the app author to decide if the widget's data should be displayed in the View Data page.</li> <li><code>'range'</code>: this adds a Range with minimum and maximum properties to the property panel and allows an app author to specify minimum and maximum value. This property can be used with widgets with datatype of number, time, date and timestamp.</li> <li><code>'format'</code>: this adds a Format property to the property panel and allows an app author to specify a format for the string. This property can be used by widgets with datatype of string only.</li> </ul> <p>Example:</p> <pre><code>const myWidgetDefinition = {\n    ...\n    builtInProperties : [\n        {id: 'required'}, \n        {id: 'title'}, \n        {id: 'seenInOverview', defaultValue: true}\n    ],\n    ...\n}\n</code></pre> <p>Note: All widgets will be implicitly given an <code>ID</code> property. The default value of this property will be auto-incrementing unique value based on the last substring of the widget definition's id. For example, a widget with an id of <code>'example.YesNo'</code> will result in a default ID of '<code>F_YesNo1'.</code> Similar to Leap's built-in widgets, the app author is free to alter the ID to suit their needs.</p> <p>Parent topic: Custom Widget API</p>"},{"location":"co_config_app_server_enviro.html","title":"Application server environment configuration","text":"<p>The following general information describes the requirements for configuring your application server environment.</p> <p>By default the settings available from WebSphere\u00ae Application Server are sufficient for general usage. Refer to the WebSphere Application Server documentation for general set-up. For basic architecture of Leap, see Leap Basic Architecture.</p> <p>Loading/performance: When you set up your Application Server environment for HCL Leap, you should follow the performance tuning guidelines in the WebSphere Application Server documentation. To achieve the best performance for the workload on your system, you might want to consider altering the following settings:</p> <ul> <li>Use a web server and configure the WebSphere Application Server plugins to provide load balancing, fail-over, and the ability to deploy in a DMZ.</li> <li>Update the Java heap size for your server. For further information, see WebSphere Application Server documentation.</li> <li>Increase the web container threads within WebSphere Application Server</li> <li>Increase the JDBC connection pool to the Leap database.</li> </ul> <p>For more information, see WebSphere Application Server documentation.</p> <p>Security: When you consider security, standard web application security practices must be considered. Leap provides application-level security. However it relies on the server environment for extra security.</p> <ul> <li>Ensure that your information is secure by using SSL whenever possible. Communication between the web browser and Leap when you use service descriptions and web services through the HTTP Service Transport, and the JDBC connection between Leap and the Leap database must be secured.</li> <li>Setting up an HTTP Strict Transport Security provides a method to ensure SSL communications from your application environment.</li> <li>Restrict cookies to HTTP requests whenever possible to prevent access from JavaScript, especially relating to sessions and authentication (LTPA tokens).</li> <li>Restrict the ability to put Leap content in an iFrame if embedding is not part of your planned integration. Adding HTTP headers such as X-Frames-Options or Content-Security-Policy provides an extra layer of security.</li> <li>Use IBM HTTP Server as a front end server to prevent direct access to the Application Server environment. Using a front end server allows for clustering through the WebSphere Application Server plug-in.</li> <li>Keep your system updated with all security and maintenance patches to ensure a safe and stable environment. Watch for security bulletins in the HCL Support Portal, or by subscribing to My Notifications for updates.</li> </ul> <p>For more WebSphere Application Server information, see WebSphere Application Server documentation, and Advanced Security Hardening WebSphere Application Server.</p> <p>Parent topic: Configuring</p>"},{"location":"co_config_toc.html","title":"Configuring","text":"<p>This section contains information on how to configure Leap.</p> <ul> <li>Application server environment configuration The following general information describes the requirements for configuring your application server environment.</li> <li>Configuring the properties file When you install HCL Leap, a file containing sample configuration properties is also installed. You can configure the properties for optimal performance with your system.</li> </ul>"},{"location":"co_configuration_properties%28org%29.html","title":"Configuration properties","text":"<p>The following table contains a list of properties in the HCL Leap Leap_config.properties file. You can adjust the settings listed in the file, or add your own for a custom configuration.</p> <p>Table 1. List of properties in the Leap_config.properties configuration file</p> Setting Description adminInfo You can provide the user more contact information when the following error message is shown. If the message is \u201cWe are unable to process your request. If this error persists, report the problem to your administrator at adminInfo1, or adminInfo2, and provide error reference: XXX.\u201d You provide adminInfo1 and adminInfo2. If you provide only adminInfo1, then the message is shortened. Examples: ``` ibm.nitro.NitroConfig.adminInfo1 = admin@yourcompany.com ibm.nitro.NitroConfig.adminInfo2 = 1-800-GET-HELP ``` anonBlockedMsg=Anonymous access blocked When a user attempts to access a Leap application anonymously, an error message is displayed. The default message is \u201cAnonymous access blocked\u201d. You can change the default message to provide additional information to the user. <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.anonBlockedMsg=Anonymous access blocked\n</code></pre> <p>| |appFilesWhiteList</p> <p>appFilesBlackList</p> <p>appFilesMaxSize</p> <p>|List of allowed (WhiteList), and not allowed (BlackList) of mimetypes, and the number of maximum file sizes for Application File uploads.</p> <p>appFilesWhiteList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 empty (everything is allowed)</li> </ul> <p>appFilesBlackList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 exe</li> </ul> <p>appFilesMaxSize (size in kb) \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/ /vnd.xfdl</li> <li>file extensions \u2013 GIF PDF XML or default as special type</li> <li>default value \u2013 5000</li> </ul> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.appFilesWhiteList = css js html exe text/plain application/vnd.xfdl mov avi \nibm.nitro.NitroConfig.appFilesBlackList =exe \nibm.nitro.NitroConfig.appFilesMaxSize.10000 = default \nibm.nitro.NitroConfig.appFilesMaxSize.50000 = mov avi\n</code></pre> <p>| |appStats.timerEnabled</p> <p>appStats.refreshHour</p> <p>appStats.refreshDays</p> <p>|By default, the timer is enabled and the collection time is set to 3am daily local server timer.Note: Depending on the volume of applications, statistics collection may take 10+ minutes, adjust the timer and frequency to server quiet time.</p> <p>appStats.timerEnabledEnable Application Statistics collection.</p> <p>To disable Application Statistics collection, set to false.</p> <p>Default value: true</p> <p>appStats.refreshHourSets the hour of day to start Application Statistics collection.</p> <p>Value 0 to 23, indicating the hour of day to start the statistics collection process.</p> <p>Default value: 3</p> <p>appStats.refreshDaysSets the Application Statistics collection day. Use full names of day of the week, separated by a comma, semicolon, or space.</p> <p>Valid values: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</p> <p>Default value: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</p> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.appStats.timerEnabled=true \nibm.nitro.NitroConfig.appStats.refreshDays=Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\nibm.nitro.NitroConfig.appStats.refreshHour=3\n</code></pre> <p>| |attachmentFilesWhiteList</p> <p>attachmentFilesBlackList</p> <p>attachmentFilesMaxSize</p> <p>|List of allowed (WhiteList), and not allowed (BlackList) of mimetypes, and the number of maximum file sizes for the Attachment form item.</p> <p>attachmentFilesWhiteList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 empty (everything is allowed)</li> </ul> <p>attachmentFilesBlackList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 exe js html svg</li> </ul> <p>attachmentFilesMaxSize (size in kb) \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/ /vnd.xfdl</li> <li>file extensions \u2013 GIF PDF XML or default as special type</li> <li>default value \u2013 5000</li> </ul> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.attachmentFilesWhiteList = css js html exe text/plain application/vnd.xfdl mov avi\nibm.nitro.NitroConfig.attachmentFilesBlackList =exe \nibm.nitro.NitroConfig.attachmentFilesMaxSize.10000 = default \nibm.nitro.NitroConfig.attachmentFilesMaxSize.50000 = mov avi\n</code></pre> <p>| |blockAnonAccess|As of Leap 8.5.1 anonymous access is no longer allowed by default. To complete a Leap application or survey, users must authenticate with a valid user ID and password. Where:</p> <ul> <li>enabled - anonymous access is blocked</li> <li>disabled - anonymous access is allowed</li> <li>redirect - redirects the user to authenticate</li> </ul> <p>Note: Redirection is not available for Leap with WebSphere\u00ae Portal.</p> <p>Default value: redirect</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.blockAnonAccess=redirect\n</code></pre> <p>| |customThemes.[ID].displayName</p> <p>customThemes.[ID].location</p> <p>customThemes.[ID].isDefault</p> <p>customThemes.[ID].nl.[LOCALE]</p> <p>|The customThemes config settings define a list of customer-provided themes that can be used in Leap applications.</p> <p>For each theme, two parameters must be set:</p> <ul> <li>customThemes.[ID].displayName</li> <li>customThemes.[ID].location</li> </ul> <p>[ID] - An identifier for the custom theme (e.g. \"corpTheme1\").</p> <p>The id can contain the letters 'a' through 'z' and numbers, and must start with a letter.</p> <p>displayName - The theme name to be displayed in the Leap authoring UI.</p> <p>location -The full URL of the theme's .css file.</p> <p>For each theme, there are 2 optional parameters:</p> <ul> <li>customThemes.[ID].isDefault</li> <li>customThemes.[ID].nl.[LOCALE]</li> </ul> <p>isDefault - If set to true, designates the theme as the default selection for new applications.</p> <p>nl.[LOCALE] - For globalization support of the theme's display name. [LOCALE] is the locale code that identifies the language (e.g.,\"en\", \"fr\", \"fr_CA\", \"zh\").</p> <p>After modifying these settings, restart the http task to see the changes in the authoring environment. If the location property of a theme is modified, any deployed applications using that custom theme need to be redeployed for changes to take affect.</p> <p>Examples:</p> <p>``` {#codeblock_wgh_s51_hzb} customThemes.corpTheme1.displayName = Corporate Theme 1 customThemes.corpTheme1.nl.fr = Th\u00e8me d'entreprise 1 customThemes.corpTheme1.nl.zh = \u4f01\u4e1a\u4e3b\u98981 customThemes.corpTheme1.isDefault = true customThemes.corpTheme1.location =https://mycompany.com/theme1.css <pre><code>|\n|detectBrowser|If Leap detects an unsupported browser, a warning message is displayed to the user. The user can still see the form after the warning message is closed.Where:\n\n-   warn - The user is warned that the browser is unsupported. A list of supported browsers is displayed in the warning message. When the user closes the warning message, the form is displayed.\n-   ignore - The user is not warned that the browser is unsupported, and the form is displayed.\n\nDefault value: warn\n\n**Example:**\n\n``` {#codeblock_iqt_j2f_gzb}\nibm.nitro.NitroConfig.detectBrowser=warn\n</code></pre></p> <p>| |disableUseTab|Hides the \"Use\" tab, and prevents fetching the list of deployed and usable applications.Where:</p> <ul> <li>true - \"Use\" tab is hidden</li> <li>false - \"Use\" tab is displayed</li> </ul> <p>Default value: false</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.disableUseTab=true\n</code></pre> <p>| |EventHandler.infoLevelEvents</p> <p>EventHandler.debugLevelEvents</p> <p>EventHandler.auditLevelEvents</p> <p>|Leap contains an event handling implementation that enables printing out all or specific events in the system log or in a separate file based on properties setting, by default this feature is not enabled. Change properties, in the Leap_config.properties file, to monitor events that you are interested in, and where you want to output the event information.The following will output Events information in Application Server's system log at info or debug level:</p> <ul> <li>EventHandler.infoLevelEvents</li> <li>EventHandler.debugLevelEvents</li> </ul> <p>auditLevelEvents will output to a file. The default file location on Windows is c:\\febEvents.log and AIX/Linux is /febEvents.log, with maximum file size 5MB, back up to 5 files.</p> <p>The content of the event output is in CSV format, the description of the data: Event topic, event issued time stamp, user id, user email, Leap application id, Leap application name, Leap application Form short name, Record Id, result</p> <p>The following is the list of event topics that Leap sends out:</p> <ul> <li>\"builder/app/delete\" \u2013 Application is deleted</li> <li>\"builder/app/deploy\" \u2013 Application is deployed for the first time</li> <li>\"builder/app/redeploy\" \u2013 A deployed application is deployed again</li> <li>\"builder/app/stop\" \u2013 A deployed application is stopped</li> <li>\"builder/app/import\" \u2013 Application is imported</li> <li>\"builder/app/importAndDeploy\" \u2013 Application is imported and deployed</li> <li>\"builder/app/importAndDeployWithData\" \u2013 Application is imported and deployed with data</li> <li>\"builder/app/export\" \u2013 Application is exported</li> <li>\"builder/app/exportWithData\" \u2013 Application is exported with data</li> <li>\"builder/app/upgrade\" \u2013 Application is upgraded</li> <li>\"builder/app/upgradeWithDataReplaced\" \u2013 Application is upgraded and the data replaced</li> <li>\"builder/app/result/export\" \u2013 Application data is exported from View Data (or REST API)</li> <li>\"builder/app/retrieve/source\"</li> <li>\"builder/app/query/deployed\"</li> <li>\"builder/record/submit\" \u2013 A form is submitted</li> <li>\"builder/record/update\" \u2013 A specific form record is updated</li> <li>\"builder/record/delete\" \u2013 A specific form record is deleted</li> <li>\"builder/data/insert/user\"</li> <li>\"builder/data/insert/code\"</li> <li>\"builder/data/update/user\"</li> <li>\"builder/data/update/code\"</li> <li>\"builder/data/delete/user\"</li> <li>\"builder/data/delete/code\"</li> </ul> <p>To capture failed events, use \"builder/error\" + mainEventCode</p> <p>Example:</p> <pre><code> ibm.nitro.EventHandler.infoLevelEvents=builder/record/submit,builder/error/submit\n</code></pre> <p>| |exportDataWithEmails|By default when you export data from applications, emails are also exported. You can exclude emails from the export by changing the property value to false.</p> <p>Where:</p> <ul> <li>true - emails are exported with application data</li> <li>false - emails are not exported with application data</li> </ul> <p>Default value: true</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.exportDataWithEmails=true\n</code></pre> <p>| |imageDomainWhitelist.enabled=true</p> <p>imageDomainWhitelist.[N].domain</p> <p>|The imageDomainWhitelist config settings define a white-list of domains from where images can be uploaded to a Rich Text Entry field.</p> <p>In addition to setting the following:</p> <p>imageDomainWhitelist.enabled=true for each domain an additional parameters must be set.</p> <p>imageDomainWhitelist.[N].domain = where \"[N]\" is an integer number identifying that service.</p> <p>domain - The domain property implicitly allows sub-domains. For example, a domain property of example.com allows URLs such as https://www.example.com/anything,http://api.example.com/anything , or https://example.com/anything.</p> <p>Examples:</p> <pre><code>ibm.nitro.imageDomainWhitelist.enabled=true\nibm.nitro.imageDomainWhitelist.[1].domain=http://acme.com\nibm.nitro.imageDomainWhitelist.[2].domain=http://acme2.com\n</code></pre> <p>| |InfoEntryPoint.dailyInfo|Provides HTML content that is shown at the end of the login screen. Can be used for status messages, or help.Example:</p> <pre><code>ibm.nitro.InfoEntryPoint.dailyInfo = Welcome to **HCL Leap**\n</code></pre> <p>| |LogoutServlet.postLogoutRedirectURL|The value of this parameter tells Leap where to redirect user after log off. If the parameter is not configured or left blank, the user is redirected to the login page.</p> <p>Example:</p> <p>``` {#codeblock_zxm_42f_gzb} ibm.nitro.LogoutServlet.postLogoutRedirectURL=http://example_url.com/signout <pre><code>|\n|maximumRecordsToRetrieve|Maximum number of records that are permitted for export from the View Data page at one time. If the number of records to be exported exceeds the number set by this property, the export is stopped, and an error message is shown.\n\n **Note:** The default value of 20,000 is supported for base systems. Setting the value higher results in poor performance, depending on result set size and server hardware.\n\n **Example:**\n\n``` {#codeblock_qy1_1df_gzb}\nibm.nitro.NitroConfig.maximumRecordsToRetrieve=25000\n</code></pre></p> <p>| |MemberManager.adminAlias</p> <p>MemberManager.userProps.loginName</p> <p>MemberManager.userProps.id</p> <p>MemberManager.groupProps.id</p> <p>MemberManager.userProps.email</p> <p>MemberManager.userProps.displayName</p> <p>|MemberManager.adminAlias setting is mandatory. For WebSphere Application Server only, configure the VMM login.</p> <p>By default, Leap uses J2C alias vmmAdmin to authenticate with VMM. You must configure it here if you want to change the J2C alias name.</p> <p>You must have WebSphere Application Server administrative user credentials to run Leap</p> <p>If you use LDAP within WebSphere Application Server, there are a number of properties that look up user and group information. If your LDAP uses different property keys than the ones set by default, update the property keys here so that user and group look up function correctly.</p> <p>If you are using LDAP within WebSphere Application Server, refer to the following settings:</p> <p>MemberManager.userProps.loginName</p> <p>Describes the LDAP property used as the login ID. Each loginName must be unique.</p> <p>Default setting: uid</p> <p>MemberManager.userProps.id</p> <p>Represents a unique key for the user. This key must be identical to the loginName.</p> <p>Default setting: uid</p> <p>MemberManager.groupProps.id</p> <p>Represents a unique key for the group. The value is the LDAP property that is used. For example, cn, represents Common Name.</p> <p>Default setting: cn</p> <p>MemberManager.userProps.email</p> <p>The email address of the user. Leap uses this email address to send notifications and other emails to the user.</p> <p>Default setting: mail</p> <p>MemberManager.userProps.displayName</p> <p>Used to display the name of the user, instead of the login id.</p> <p>Default setting: cn</p> <p>Examples:</p> <pre><code>ibm.was.MemberManager.userProps.loginName = mail \nibm.was.MemberManager.userProps.id = mail\nibm.was.MemberManager.groupProps.id = name\nibm.was.MemberManager.userProps.email = mail\nibm.was.MemberManager.userProps.displayName = cn\n</code></pre> <p>| |purgeOrphanFilesHours|In some circumstances, files attached to either application designs or user-submitted records can become orphaned if the primary design or record element is removed outside the normal process. File records which are older than this number of hours and are no longer associated with an existing primary record are removed by a clean-up agent in VoltBuilder.nsf.</p> <p>Default value: 48</p> <p>Example:</p> <pre><code>ibm.nitro.purgeOrphanFilesHours=36\n</code></pre> <p>| |runtimeCSP|The runtimeCSP setting defines the <code>Content-Security-Policy</code> header that will be applied to running Forms.</p> <p>Note: This setting only applies to Forms. It does not currently apply to App Pages, Summarry Charts, or the View Data page.</p> <p>For more information, see https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP</p> <p>For more information on Strict CSP, see Strict CSP.</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.runtimeCSP=default-src 'self' *.example.com; img-src *\n</code></pre> <p>| |runtimeResources.[N]|Additional web resources to load into the Domino Leap UI for leveraging the Custom Widget API. The values from these settings will be injected into the &lt;head&gt; section of Domino Leap's HTML pages.Example:</p> <pre><code>ibm.nitro.NitroConfig.runtimeResources.1 = &lt;link rel='stylesheet' type='text/css' media='screen' href='/custom-widgets/samples/acme/Acme_Widgets.css'&gt;\nibm.nitro.NitroConfig.runtimeResources.2 = &lt;script nonce='#!#cspNonce!#!' type='text/javascript' src='/custom-widgets/samples/acme/Acme_common.js'&gt;&lt;/script&gt;\nibm.nitro.NitroConfig.runtimeResources.3 = &lt;script nonce='#!#cspNonce!#!' type='text/javascript' src='/custom-widgets/samples/acme/Acme_Boolean_Widget.js'&gt;&lt;/script&gt;\n</code></pre> <p>| |secureJS|Enables or disables JavaScript security in run time forms. When a form designer adds custom JavaScript to an application, this flag applies security settings to the custom JavaScript. This flag applies to the entire Leap server for all users.</p> <p>Note: Setting this parameter to <code>FALSE</code> might expose users to malicious JavaScript. Only set to <code>FALSE</code> in a secured environment where Leap applications are created by trusted users.</p> <p>For more information, see JavaScript API for Leap.</p> <p>Default value: true</p> <p>Example:</p> <pre><code>ibm.nitro.ApplicationCompilerService.secureJS = true\n</code></pre> <p>| |serviceAuthorization.enabled</p> <p>serviceAuthorization.jxpath-sample</p> <p>|Access to a service description may be given to a specific user, group, or special assignment. The access control is made up of two parts:-   Who may discover and work with the service while designing an application. -   Who may run the service.</p> <p>Users or Groups provided must be defined using the attributes defined by <code>ibm.was.MemberManager.userProps.id = mail</code> and <code>ibm.was.MemberManager.groupProps.id = name</code> respectively.Special assignment valid values are:-   all-authenticated: for app author \"discover\" privilege only -   anonymous: for app authors and end-user \"discover\" and \"invoke\" privileges -   all-authors: for end-user \"invoke\" privilege only</p> <p>To enable service authorizations, set <code>ibm.nitro.NitroConfig.serviceAuthorization.enabled=true</code>.Multiple services may be defined. To define a service authorization, add <code>ibm.nitro.NitroConfig.serviceAuthorization.serviceIdN</code> where serviceIdN is the 'id' of the service description. The value must be a valid JSON string, see provided samples.Note: A backslash (\\) at the very end of a line can be used to present a value over multiple lines. The backslashmust be the very last character on the line.</p> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.serviceAuthorization.enabled = true\nibm.nitro.NitroConfig.serviceAuthorization.jxpath-sample = {{\"comment\": \n\"Sample 1\",\"discover\": { \"users\": [ \"user1\" ], \"groups\": [],\"special\": [] }, \"invoke\": \n{ \"users\": [ \"user1\"], \"groups\": [], \"special\": [] } }\n</code></pre> <p>| |serverURI|Indicates the base URI used for critical functions, including editing applications, and email. Must include everything necessary to connect to the Leap context, for example, /apps.</p> <p>With this entry, all emailed links, and absolute links visible during Leap design time start with the following base URI regardless of what the user enters in the address bar.Example:</p> <pre><code>ibm.nitro.NitroConfig.serverURI = http://host:9080/apps\n</code></pre> <p>| |servicesWhitelist.enabled</p> <p>servicesWhitelist.[N].actions</p> <p>servicesWhitelist.[N].domain</p> <p>|The servicesWhitelist config settings define a white list of domains and HTTP actions that app authors are allowed to call directly from their applications using URL based services.</p> <p>In addition to setting <code>servicesWhitelist.enabled=true</code>, for each service two additional parameters must be set:</p> <ul> <li>servicesWhitelist.[N].domain =</li> <li>servicesWhitelist.[N].actions =</li> </ul> <p>The domain property implicitly allows sub-domains. For example, a domain property of example.com allows URLs such as https://www.example.com/anything,http://api.example.com/anything , or https://example.com/anything.</p> <p>The https or http protocol included in the domain property is respected. For example, a domain property of https://api.example.com only allows calls to secure SSL https://api.example.com/anything and not to non-secure http://api.example.com/anything.</p> <p>The actions property is a comma-separated list of the HTTP actions allowed for a particular domain. Valid values are GET, PUT, POST, and DELETE. If the actions value is missing, no actions are allowed.</p> <p>Where [N] is an integer number identifying that service. For more information, see the servicesWhitelist documents in VoltConfig.nsf.</p> <p>Default value: true</p> <p>Examples:</p> <p>``` {#codeblock_qdk_2ff_gzb} ibm.nitro.NitroConfig.servicesWhitelist.enabled = true ibm.nitro.NitroConfig.servicesWhitelist.1.domain = example.com ibm.nitro.NitroConfig.servicesWhitelist.1.actions = GET ibm.nitro.NitroConfig.servicesWhitelist.2.domain = https://securehost.com ibm.nitro.NitroConfig.servicesWhitelist.2.actions = GET, POST,PUT <pre><code> **Note:** This white-list has no effect on service descriptions and custom service transports that were installed on the server by the administrator.\n\n|\n|SetupAll.setupStatus|After deploying Leap for the first time or upgrading to a newer version, there is a setup screen that is presented upon accessing the manage page. This setup screen shows the status of detecting and updating the database tables, checks that security is properly enabled, and a mail session is configured. This page requires the admin to click a button to fully progress through the setup. To disable this setup page and required admin interaction add the property `ibm.nitro.SetupAll.setupStatus = start`.\n\n **Example**:\n\n``` {#codeblock_twt_qs5_jzb}\nibm.nitro.SetupAll.setupStatus = start\n</code></pre></p> <p>| |viewResponsesMaximumCount|For WebSphere Application Server with DB2\u00ae, or Oracle. The maximum number of records that View Response counts up to when returning large record sets. Larger values are still returned, but the paging no longer accurately lists the total number of pages. Setting this value higher can have performance consequences for the server if there are many users viewing forms with large response lists. Example:</p> <pre><code>ibm.nitro.NitroConfig.viewResponsesMaximumCount=2000\n</code></pre> <p>| |wchApiUrl|IBM Watson Content Hub API URL. This setting is optional. When set in the config, all Leap users will use the same Watson Content Hub tenant for selecting assets. When it's not set, Leap design users can set their own Watson Content Hub API URL at the time of use.ibm.nitro.NitroConfig.wchEnabled=true is required for this setting to work.</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.wchApiUrl=https://my1.digitalexperience.ibm.com/api/&lt;guid&gt;\n</code></pre> <p>| |wchEnabled|Enables integration with IBM Watson Content Hub. This allows Leap applications to select assets from IBM Watson Content Hub.Where:</p> <ul> <li>true - enables a choice in the design experience that allows a design user to select assets from IBM Watson Content Hub (a Watson Content Hub subscription is required)</li> <li>false - feature remains disabled</li> </ul> <p>Default value: false</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.wchEnabled=false\n</code></pre> <p>| |xFrameOptions|Use this setting to control the X-Frame-Options response header for Leap pages.</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.xFrameOptions = SAMEORIGIN\n</code></pre> <p>|</p> <p>Parent topic:Configuring the properties file</p>"},{"location":"co_configuration_properties.html","title":"Configuration properties","text":"<p>This topic contains a list of properties in the Leap Leap_config.properties file or defined in the Kubernetes .yaml file. You can adjust the settings listed in the file, or add your own for a custom configuration.</p>"},{"location":"co_configuration_properties.html#section_config_properties","title":"Properties","text":""},{"location":"co_configuration_properties.html#section_admininfo","title":"adminInfo","text":"<p>Allows admin contact information to be shown within error messages.</p> <p>If adminInfo1 and adminInfo2 are both provided, the error message will be \u201cWe are unable to process your request. If this error persists, report the problem to your administrator at adminInfo1, or adminInfo2, and provide error reference: XXX.\u201d </p> <p>If only adminInfo1 is provided, the error message will be \u201cWe are unable to process your request. If this error persists, report the problem to your administrator at adminInfo1 and provide error reference: XXX.\u201d</p> <p>If neither are provided, the error message will be \u201cWe are unable to process your request. If this error persists, report the problem to your administrator and provide error reference: XXX.\u201d</p> <p>Examples: <pre><code>ibm.nitro.NitroConfig.adminInfo1 = admin@yourcompany.com \nibm.nitro.NitroConfig.adminInfo2 = 1-800-GET-HELP\n</code></pre></p>"},{"location":"co_configuration_properties.html#section_anonblockedmsg","title":"anonBlockedMsg","text":"<p>When a user attempts to access a Leap application anonymously, an error message is displayed. The default message is \u201cAnonymous access blocked\u201d. You can change the default message to provide additional information to the user.</p> <p>Example: <pre><code>ibm.nitro.NitroConfig.anonBlockedMsg=Anonymous usage is not allowed\n</code></pre></p>"},{"location":"co_configuration_properties.html#appfiles","title":"appFiles","text":"<p>List of allowed (whitelist), and not allowed (blackList) of mimetypes, and the number of maximum file sizes for Application File uploads.</p> <p>appFilesWhiteList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 empty (everything is allowed)</li> </ul> <p>appFilesBlackList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 exe</li> </ul> <p>appFilesMaxSize (size in kb) \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/ /vnd.xfdl</li> <li>file extensions \u2013 GIF PDF XML or default as special type</li> <li>default value \u2013 5000</li> </ul> <p>Examples: <pre><code>ibm.nitro.NitroConfig.appFilesWhiteList = css js html exe text/plain application/vnd.xfdl mov avi \nibm.nitro.NitroConfig.appFilesBlackList = exe \nibm.nitro.NitroConfig.appFilesMaxSize.10000 = default \nibm.nitro.NitroConfig.appFilesMaxSize.50000 = mov avi\n</code></pre></p>"},{"location":"co_configuration_properties.html#section_appstats","title":"appStats","text":"<p>By default, the timer is enabled and the collection time is set to 3 AM daily local server timer.</p> <p>Note: Depending on the volume of applications, statistics collection may take 10+ minutes, adjust the timer and frequency to server quiet time.</p> <p>appStats.timerEnabled - Enable Application Statistics collection. To disable Application Statistics collection, set to false. Default value: true</p> <p>appStats.refreshHour - Sets the hour of day to start Application Statistics collection. Value 0 to 23, indicating the hour of day to start the statistics collection process. Default value: 3</p> <p>appStats.refreshDays - Sets the Application Statistics collection day. Use full names of day of the week, separated by a comma, semicolon, or space. Valid values: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday Default value: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</p> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.appStats.timerEnabled=true \nibm.nitro.NitroConfig.appStats.refreshDays=Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\nibm.nitro.NitroConfig.appStats.refreshHour=3\n</code></pre>"},{"location":"co_configuration_properties.html#section_attachmentfiles","title":"attachmentFiles","text":"<p>List of allowed (whitelist), and not allowed (blackList) of mimetypes, and the number of maximum file sizes for the Attachment form item.</p> <p>attachmentFilesWhiteList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 empty (everything is allowed)</li> </ul> <p>attachmentFilesBlackList \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 exe js html svg</li> </ul> <p>attachmentFilesMaxSize (size in kb) \u2013 A space separated list of:</p> <ul> <li>mimetypes \u2013 text/plain application/ /vnd.xfdl</li> <li>file extensions \u2013 GIF PDF XML or default as special type</li> <li>default value \u2013 5000</li> </ul> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.attachmentFilesWhiteList = css js html exe text/plain application/vnd.xfdl mov avi\nibm.nitro.NitroConfig.attachmentFilesBlackList = exe \nibm.nitro.NitroConfig.attachmentFilesMaxSize.10000 = default \nibm.nitro.NitroConfig.attachmentFilesMaxSize.50000 = mov avi\n</code></pre>"},{"location":"co_configuration_properties.html#section_blockanonaccess","title":"blockAnonAccess","text":"<p>Anonymous access is not allowed by default which means that to use a Leap application or survey, users must authenticate with a valid user ID and password. This setting determines anonymous access, where:</p> <ul> <li>enabled - anonymous access is blocked</li> <li>disabled - anonymous access is allowed</li> <li>redirect - redirects the user to authenticate</li> </ul> <p>Default value: redirect</p> <p>Example: <pre><code>ibm.nitro.NitroConfig.blockAnonAccess=redirect\n</code></pre></p>"},{"location":"co_configuration_properties.html#section_customthemes","title":"customThemes","text":"<p>The customThemes config settings define a list of customer-provided themes that can be used in Leap applications.</p> <p>For each theme, two parameters must be set:</p> <ul> <li>customThemes.[ID].displayName</li> <li>customThemes.[ID].location</li> </ul> <p>[ID] - An identifier for the custom theme (e.g. \"corpTheme1\"). The id can contain the letters 'a' through 'z' and numbers, and must start with a letter.</p> <p>displayName - The theme name to be displayed in the Leap authoring UI.</p> <p>location -The full URL of the theme's .css file.</p> <p>For each theme, there are 2 optional parameters:</p> <ul> <li>customThemes.[ID].isDefault</li> <li>customThemes.[ID].nl.[LOCALE]</li> </ul> <p>isDefault - If set to true, designates the theme as the default selection for new applications.</p> <p>nl.[LOCALE] - For globalization support of the theme's display name. [LOCALE] is the locale code that identifies the language (e.g.,\"en\", \"fr\", \"fr_CA\", \"zh\").</p> <p>After modifying these settings, restart the Leap server to see the changes in the authoring environment. If the location property of a theme is modified, any deployed applications using that custom theme need to be redeployed for changes to take affect.</p> <p>Examples: <pre><code>customThemes.corpTheme1.displayName = Corporate Theme 1\ncustomThemes.corpTheme1.nl.fr = Th\u00e8me d'entreprise 1\ncustomThemes.corpTheme1.nl.zh = \u4f01\u4e1a\u4e3b\u98981\ncustomThemes.corpTheme1.isDefault = true\ncustomThemes.corpTheme1.location =https://mycompany.com/theme1.css\n</code></pre></p>"},{"location":"co_configuration_properties.html#section_detectbrowser","title":"detectBrowser","text":"<p>If Leap detects an unsupported browser, a warning message is displayed to the user. The user can still see the form after the warning message is closed.Where:</p> <ul> <li>warn - The user is warned that the browser is unsupported. A list of supported browsers is displayed in the warning message. When the user closes the warning message, the form is displayed.</li> <li>ignore - The user is not warned that the browser is unsupported, and the form is displayed.</li> </ul> <p>Default value: warn</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.detectBrowser=ignore\n</code></pre>"},{"location":"co_configuration_properties.html#section_disableusetab","title":"disableUseTab","text":"<p>Hides the \"Use\" tab, and prevents fetching the list of deployed and usable applications, where:</p> <ul> <li>true - \"Use\" tab is hidden</li> <li>false - \"Use\" tab is displayed</li> </ul> <p>Default value: false</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.disableUseTab=true\n</code></pre>"},{"location":"co_configuration_properties.html#section_enableAdminConfigUI","title":"enableAdminConfigUI","text":"<p>Enables the admin configuration page. Valid values are true or false.  For more information, refer to Admin Configuration Page.</p> <p>Default value: false</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.enableAdminConfigUI=true\n</code></pre>"},{"location":"co_configuration_properties.html#section_embedDomainWhitelist","title":"embedDomainWhitelist","text":"<p>The domains where Leap may be embedded. If the whitelist is enabled and the domain is not listed then Leap applications will not be allowed to be presented as part of that content.</p> <p>This property contains 2 parts:</p> <ul> <li>embedDomainWhitelist.enabled</li> <li>embedDomainWhitelist.[N].domain</li> </ul> <p>enabled - Enables/Disables the whitelist.  If the whitelist is disabled, Leap will allow itself to be embedded into any domain.</p> <p>Default value: true</p> <p>[N].domain - '[N]' is an incrementing number starting with '1'. Provide the domain where embedding Leap applications should be allowed.</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.embedDomainWhitelist.enabled = true\nibm.nitro.NitroConfig.embedDomainWhitelist.1.domain = https://embedder1.example.com\nibm.nitro.NitroConfig.embedDomainWhitelist.2.domain = https://embedder2.example.com\nibm.nitro.NitroConfig.embedDomainWhitelist.3.domain = 'self'\n</code></pre>"},{"location":"co_configuration_properties.html#section_eventhandler","title":"EventHandler","text":"<p>Leap contains an event handling implementation that enables printing out all or specific events in the system log or in a separate file based on properties setting, by default this feature is not enabled. Change properties, in the Leap_config.properties file, to monitor events that you are interested in, and where you want to output the event information.</p> <p>The following will output Events information in Application Server's system log at info or debug level:</p> <ul> <li>EventHandler.infoLevelEvents</li> <li>EventHandler.debugLevelEvents</li> </ul> <p>EventHandler.auditLevelEvents will output to a file. The default file location on Windows is C:\\febEvents.log and AIX/Linux is /febEvents.log, with maximum file size 5MB, back up to 5 files.</p> <p>The content of the event output is in CSV format, the description of the data: Event topic, Event time stamp, User id, User email, Application uid, Application title, Form id, Record uid, Result</p> <p>The following is the list of event topics that Leap sends out:</p> <ul> <li>builder/app/delete \u2013 Application is deleted</li> <li>builder/app/deploy \u2013 Application is deployed for the first time</li> <li>builder/app/redeploy \u2013 A deployed application is deployed again</li> <li>builder/app/stop \u2013 A deployed application is stopped</li> <li>builder/app/import \u2013 Application is imported</li> <li>builder/app/importAndDeploy \u2013 Application is imported and deployed</li> <li>builder/app/importAndDeployWithData \u2013 Application is imported and deployed with data</li> <li>builder/app/export \u2013 Application is exported</li> <li>builder/app/exportWithData \u2013 Application is exported with data</li> <li>builder/app/upgrade \u2013 Application is upgraded</li> <li>builder/app/upgradeWithDataReplaced \u2013 Application is upgraded and the data replaced</li> <li>builder/app/result/export \u2013 Application data is exported from View Data (or REST API)</li> <li>builder/app/retrieve/source \u2013 Application source is retrieved</li> <li>builder/app/query/deployed \u2013 Application deployment state is queried</li> <li>builder/record/submit \u2013 A record is submitted by normal app usage</li> <li>builder/record/update \u2013 A record is updated by normal app usage</li> <li>builder/record/delete \u2013 A record is deleted by normal app usage</li> <li>builder/data/insert/user \u2013 A record is created as a result of a direct user action</li> <li>builder/data/insert/code \u2013 A record is created indirectly</li> <li>builder/data/update/user \u2013 A record is updated as a result of a direct user action</li> <li>builder/data/update/code \u2013 A record is updated indirectly</li> <li>builder/data/delete/user \u2013 A record is deleted as a result of a direct user action</li> <li>builder/data/delete/code \u2013 A record is deleted indirectly</li> </ul> <p>To capture failed events, use \"builder/error/[EVENT_TOPIC]\"</p> <p>Example:</p> <pre><code> ibm.nitro.EventHandler.infoLevelEvents=builder/record/submit,builder/error/builder/record/submit\n</code></pre>"},{"location":"co_configuration_properties.html#section_exportdatawithemails","title":"exportDataWithEmails","text":"<p>By default when you export data from applications, emails are also exported. You can exclude emails from the export by changing the property value to false.</p> <p>Where:</p> <ul> <li>true - emails are exported with application data</li> <li>false - emails are not exported with application data</li> </ul> <p>Default value: true</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.exportDataWithEmails=true\n</code></pre>"},{"location":"co_configuration_properties.html#section_mxfoundry","title":"hclMXFoundryApps","text":"<p>The hclMXFoundryApps property defines the settings for connecting Leap to HCL Volt MX Foundry integration services.</p> <p>This property contains the following parts:</p> <ul> <li>hclMXFoundryApps.enabled</li> <li>hclMXFoundryApps.[N].appName</li> <li>hclMXFoundryApps.[N].serviceUrl</li> <li>hclMXFoundryApps.[N].credentialAlias</li> </ul> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.hclMXFoundryApps.enabled = true\nibm.nitro.NitroConfig.hclMXFoundryApps.1.appName = Foundry App 1\nibm.nitro.NitroConfig.hclMXFoundryApps.1.serviceUrl = http://myFoundryServer/authService/100000002/appconfig\nibm.nitro.NitroConfig.hclMXFoundryApps.1.credentialAlias = 'FOUNDRY_APP1'\nibm.nitro.NitroConfig.hclMXFoundryApps.2.appName = Foundry App 2\nibm.nitro.NitroConfig.hclMXFoundryApps.2.serviceUrl = https://100002720.myFoundryCloudServer/appconfig\nibm.nitro.NitroConfig.hclMXFoundryApps.2.credentialAlias = 'FOUNDRY_APP2'\n</code></pre>"},{"location":"co_configuration_properties.html#section_mxfoundrycache","title":"hclMXFoundryAppsCacheRefreshMins","text":"<p>The hclMXFoundryAppsCacheRefreshMins property defines the amount of time in minutes that MX Foundry service descriptions are held in memory.  The default value is 60.</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.hclMXFoundryAppsCacheRefreshMins=60\n</code></pre>"},{"location":"co_configuration_properties.html#section_imagedomain","title":"imageDomainWhitelist","text":"<p>The imageDomainWhitelist config settings define a white-list of domains from where images can be uploaded to a Rich Text Entry field.</p> <p>In addition to setting the following:</p> <p>imageDomainWhitelist.enabled=true for each domain an additional parameters must be set.</p> <p>imageDomainWhitelist.[N].domain = where \"[N]\" is an integer number identifying that service.</p> <p>domain - The domain property implicitly allows sub-domains. For example, a domain property of example.com allows URLs such as https://www.example.com/anything, http://api.example.com/anything, or https://example.com/anything.</p> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.imageDomainWhitelist.enabled=true\nibm.nitro.NitroConfig.imageDomainWhitelist.[1].domain=http://acme.com\nibm.nitro.NitroConfig.imageDomainWhitelist.[2].domain=http://acme2.com\n</code></pre>"},{"location":"co_configuration_properties.html#section_infoentrypoint","title":"InfoEntryPoint.dailyInfo","text":"<p>Provides HTML content that is shown in the login screen. Can be used for status messages, or help.</p> <pre><code>ibm.nitro.InfoEntryPoint.dailyInfo = Welcome to **HCL Leap**\n</code></pre>"},{"location":"co_configuration_properties.html#section_logout","title":"LogoutServlet.postLogoutRedirectURL","text":"<p>The value of this parameter tells Leap where to redirect user after log off. If the parameter is not configured or left blank, the user is redirected to the login page.</p> <p>Example:</p> <pre><code>ibm.nitro.LogoutServlet.postLogoutRedirectURL=http://example_url.com/signout\n</code></pre>"},{"location":"co_configuration_properties.html#section_maximumrecords","title":"maximumRecordsToRetrieve","text":"<p>Maximum number of records that are permitted for export from the View Data page at one time. If the number of records to be exported exceeds the number set by this property, the export is stopped, and an error message is shown.</p> <p>Note: The default value of 20,000 is supported for base systems. Setting the value higher could result in poor performance, depending on result set size and server hardware.</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.maximumRecordsToRetrieve=25000\n</code></pre>"},{"location":"co_configuration_properties.html#section_membermanager","title":"MemberManager","text":"<ul> <li>MemberManager.userProps.loginName</li> <li>MemberManager.userProps.id</li> <li>MemberManager.groupProps.id</li> <li>MemberManager.userProps.email</li> <li>MemberManager.userProps.displayName<li> <p>MemberManager.adminAlias setting is mandatory. For WebSphere Application Server only, configure the VMM login.</p> <p>By default, Leap uses J2C alias vmmAdmin to authenticate with VMM. You must configure it here if you want to change the J2C alias name.</p> <p>You must have WebSphere Application Server administrative user credentials to run Leap.</p> <p>If you use LDAP within WebSphere Application Server, there are a number of properties that look up user and group information. If your LDAP uses different property keys than the ones set by default, update the property keys here so that user and group look up function correctly.</p> <p>If you are using LDAP within WebSphere Application Server, refer to the following settings:</p> <p>MemberManager.userProps.loginName:  Describes the LDAP property used as the login ID. Each loginName must be unique. Default setting: uid</p> <p>MemberManager.userProps.id Represents a unique key for the user. This key must be identical to the loginName. Default setting: uid</p> <p>MemberManager.groupProps.id Represents a unique key for the group. The value is the LDAP property that is used. For example, cn, represents Common Name. Default setting: cn</p> <p>MemberManager.userProps.email The email address of the user. Leap uses this email address to send notifications and other emails to the user. Default setting: mail</p> <p>MemberManager.userProps.displayName Used to display the name of the user, instead of the login id. Default setting: cn</p> <p>Examples:</p> <pre><code>ibm.was.MemberManager.userProps.loginName = mail \nibm.was.MemberManager.userProps.id = mail\nibm.was.MemberManager.groupProps.id = name\nibm.was.MemberManager.userProps.email = mail\nibm.was.MemberManager.userProps.displayName = cn\n</code></pre>"},{"location":"co_configuration_properties.html#section_purgefileshours","title":"purgeOrphanFilesHours","text":"<p>In some circumstances, files attached to either application designs or user-submitted records can become orphaned if the primary design or record element is removed outside the normal process. File records which are older than this number of hours and are no longer associated with an existing primary record are removed.</p> <p>Default value: 48</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.purgeOrphanFilesHours=36\n</code></pre>"},{"location":"co_configuration_properties.html#section_reauthInNewWindow","title":"reauthInNewWindow","text":"<p>Helps with seamless re-authentication when Leap is using an external IdP (in SAML or OIDC configurations), so that Leap users do not lose their work.  When set to <code>true</code>, the authentication flow is presented in a pop-up window, which is typically adequate for most external IdPs. It is recommended to use this setting in conjunction with <code>ibm.nitro.NitroConfig.reauthOnFailedRequest</code>.</p> <p>Default value: false</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.reauthInNewWindow=true\n</code></pre>"},{"location":"co_configuration_properties.html#section_reauthOnFailedRequest","title":"reauthOnFailedRequest","text":"<p>Helps with seamless re-authentication when Leap is using an external IdP (in SAML or OIDC configurations) so that Leap users do not lose their work.  When set to <code>true</code>, a failed XHR request triggers the authentication flow. A failed request is the typical result when an SAML or OIDC session has timed-out. It is recommended to use this setting in conjunction with <code>ibm.nitro.NitroConfig.reauthInNewWindow</code>. </p> <p>Known Limitations: There is no mechanism in the browser for the Leap code to distinguish a session time-out failure from other types of failures, such as a loss of internet connectivity. Enabling this setting means that any XHR request failure will trigger an authentication flow, even if it is not appropriate. However, for the majority of cases this setting will help Leap users to not lose their work, therefore it is recommended.</p> <p>Default value: false</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.reauthOnFailedRequest=true\n</code></pre>"},{"location":"co_configuration_properties.html#section_rootAdminId","title":"rootAdminId","text":"<p>The rootAdminId setting defines the login id of a user that will always have access to the Admin Configuration page.</p> <p>Example</p> <pre><code>ibm.nitro.NitroConfig.rootAdminId=adminUser\n</code></pre>"},{"location":"co_configuration_properties.html#section_runtimecsp","title":"runtimeCSP","text":"<p>The runtimeCSP setting defines the <code>Content-Security-Policy</code> (CSP) header that will be applied to running Forms.</p> <p>Note: This setting only applies to Forms. It does not currently apply to App Pages, Summary Charts, or the View Data page.</p> <p>For more information on CSP, see Content Security Policy (CSP) in the Mozilla documentation.</p> <p>For more information on Strict CSP, see Strict CSP</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.runtimeCSP=default-src 'self' *.example.com; img-src *\n</code></pre>"},{"location":"co_configuration_properties.html#section_runtimeresources","title":"runtimeResources.[N]","text":"<p>Additional web resources to load into the Leap UI for leveraging the Custom Widget API. The values from these settings will be injected into the <code>&lt;head&gt;</code> section of Leap's HTML pages.</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.runtimeResources.1 = &lt;link rel='stylesheet' type='text/css' media='screen' href='/custom-widgets/samples/acme/Acme_Widgets.css'&gt;\nibm.nitro.NitroConfig.runtimeResources.2 = &lt;script type='text/javascript' src='/custom-widgets/samples/acme/Acme_common.js'&gt;&lt;/script&gt;\nibm.nitro.NitroConfig.runtimeResources.3 = &lt;script type='text/javascript' src='/custom-widgets/samples/acme/Acme_Boolean_Widget.js'&gt;&lt;/script&gt;\n</code></pre>"},{"location":"co_configuration_properties.html#section_securejs","title":"secureJS","text":"<p>Enables or disables JavaScript restrictions in run time forms. When a form designer adds custom JavaScript to an application, this flag restricts the scope of that custom JavaScript. This flag applies to the entire Leap server for all users.</p> <p>Note: Setting this parameter to <code>false</code> might expose users to malicious JavaScript. Only set to <code>false</code> in a secured environment where Leap applications are created by trusted users.</p> <p>For more information, see JavaScript API for Leap.</p> <p>Default value: true</p> <p>Example:</p> <pre><code>ibm.nitro.ApplicationCompilerService.secureJS = false\n</code></pre>"},{"location":"co_configuration_properties.html#section_serviceauthorization","title":"serviceAuthorization","text":"<p>Access to a service description may be given to a specific user, group, or special assignment. The access control is made up of two parts:</p> <ul> <li>Who may \"discover\" and work with the service while designing an application.</li> <li>Who may \"invoke\" the service.</li> </ul> <p>Users or Groups provided must be defined using the attributes defined by <code>ibm.was.MemberManager.userProps.id = mail</code> and <code>ibm.was.MemberManager.groupProps.id = name</code> respectively.</p> <p>Special assignment valid values are:</p> <ul> <li>all-authenticated: for app author \"discover\" privilege only</li> <li>anonymous: for app authors and end-user \"discover\" and \"invoke\" privileges</li> <li>all-authors: for end-user \"invoke\" privilege only</li> </ul> <p>To enable service authorizations, set <code>ibm.nitro.NitroConfig.serviceAuthorization.enabled=true</code>. Multiple services may be defined. To define a service authorization, add <code>ibm.nitro.NitroConfig.serviceAuthorization.serviceIdN</code> where serviceIdN is the 'id' of the service description. The value must be a valid JSON string, see provided samples.</p> <p>Note: A backslash () at the end of a line can be used to present a value over multiple lines. The backslash must be the very last character on the line.</p> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.serviceAuthorization.enabled = true\nibm.nitro.NitroConfig.serviceAuthorization.serviceId1 = { \\\n   \"comment\": \"Auth for Service 1\", \\\n   \"discover\": { \"users\": [\"user1\"], \"groups\": [\"group1\"], \"special\": [] }, \\\n   \"invoke\": { \"users\": [], \"groups\": [], \"special\": [\"all-authenticated\"]\" } \\\n}\n</code></pre>"},{"location":"co_configuration_properties.html#section_serveruri","title":"serverURI","text":"<p>Indicates the base URI used for critical functions, including editing applications, and email. Must include everything necessary to connect to the Leap context, for example, /apps.</p> <p>With this entry, all emailed links, and absolute links visible during Leap design time start with the following base URI regardless of what the user enters in the address bar.</p> <p>Example: <pre><code>ibm.nitro.NitroConfig.serverURI = https://leap.example.com/apps\n</code></pre></p>"},{"location":"co_configuration_properties.html#section_servicewhitelist","title":"servicesWhitelist","text":"<p>The servicesWhitelist config settings define a white list of domains and HTTP actions that app authors are allowed to call directly from their applications using URL based services.</p> <p>In addition to setting <code>servicesWhitelist.enabled=true</code>, for each service two additional parameters must be set:</p> <ul> <li>servicesWhitelist.[N].domain =</li> <li>servicesWhitelist.[N].actions =</li> </ul> <p>The domain property implicitly allows sub-domains. For example, a domain property of example.com allows URLs such as https://www.example.com/anything, http://api.example.com/anything, or https://example.com/anything. The https or http protocol included in the domain property is respected. For example, a domain property of https://api.example.com only allows calls to secure SSL https://api.example.com/anything and not to non-secure http://api.example.com/anything. The actions property is a comma-separated list of the HTTP actions allowed for a particular domain. Valid values are GET, PUT, POST, DELETE, HEAD, and PATCH. If the actions value is missing, no actions are allowed.</p> <p>Where [N] is an integer number identifying that service.</p> <p>Default value: true</p> <p>Examples:</p> <pre><code>ibm.nitro.NitroConfig.servicesWhitelist.enabled = true\nibm.nitro.NitroConfig.servicesWhitelist.1.domain = example.com\nibm.nitro.NitroConfig.servicesWhitelist.1.actions = GET\nibm.nitro.NitroConfig.servicesWhitelist.2.domain = https://securehost.com\nibm.nitro.NitroConfig.servicesWhitelist.2.actions = GET, POST,PUT\n</code></pre> <p>Note: This white-list has no effect on service descriptions and custom service transports that were installed on the server by the administrator.</p>"},{"location":"co_configuration_properties.html#section_setupall","title":"SetupAll.setupStatus","text":"<p>After deploying Leap for the first time or upgrading to a newer version, there is a setup screen that is presented upon accessing the manage page. This setup screen shows the status of detecting and updating the database tables, checks that security is properly enabled, and a mail session is configured. This page requires the admin to click a button to fully progress through the setup.</p> <p>To disable this setup page and required admin interaction add the property: </p> <pre><code>ibm.nitro.SetupAll.setupStatus = start\n</code></pre>"},{"location":"co_configuration_properties.html#section_viewresponsecount","title":"viewResponsesMaximumCount","text":"<p>For DB2\u00ae or Oracle. The maximum number of records that are counted when returning record sets in pages. If the total number of records exceeds viewResponsesMaximumCount, then paging indicators will no longer accurately lists the total number of pages. Setting this value higher can have performance consequences for the server if there are many users viewing forms with large response lists.</p> <p>Default value: 1000</p> <p>Example:</p> <pre><code>ibm.nitro.NitroConfig.viewResponsesMaximumCount=2000\n</code></pre>"},{"location":"co_configuration_properties.html#section_xframeoption","title":"xFrameOptions","text":"<p>Deprecated. Use embedDomainWhitelist.</p> <p>Parent topic: Configuring the properties file</p>"},{"location":"co_configuration_propertiesCOPY.html","title":"Configuration properties","text":"<p>The following table contains a list of properties in the HCL Leap Leap_config.properties file. You can adjust the settings listed in the file, or add your own for a custom configuration.</p> <p>Table 1. List of properties in the Leap_config.properties configuration file</p> Setting Description  adminInfo   Allows admin contact information to be shown within error messages.  If adminInfo1 and adminInfo2 are both provided, the error message will be \u201cWe are unable to process your request. If this error persists, report the problem to your administrator at adminInfo1, or adminInfo2, and provide error reference: XXX.\u201d   If only adminInfo1 is provided, the error message will be \u201cWe are unable to process your request. If this error persists, report the problem to your administrator at adminInfo1 and provide error reference: XXX.\u201d   If neither are provided, the error message will be \u201cWe are unable to process your request. If this error persists, report the problem to your administrator and provide error reference: XXX.\u201d  Examples: <pre><code>ibm.nitro.NitroConfig.adminInfo1 = admin@yourcompany.com \nibm.nitro.NitroConfig.adminInfo2 = 1-800-GET-HELP\n</code></pre>  anonBlockedMsg=[MESSAGE]    When a user attempts to access a Leap application anonymously, an error message is displayed. The default message is \u201cAnonymous access blocked\u201d. You can change the default message to provide additional information to the user. Example: <pre><code>ibm.nitro.NitroConfig.anonBlockedMsg=Anonymous usage is not allowed\n</code></pre>  appFilesWhiteListappFilesBlackListappFilesMaxSize    List of allowed (whitelist), and not allowed (blackList) of mimetypes, and the number of maximum file sizes for Application File uploads. appFilesWhiteList \u2013 A space separated list of:  -   mimetypes \u2013 text/plain application/vnd.xfdl -   partial mimetypes \u2013 text/audio/ /plain -   file extensions \u2013 GIF PDF XML -   default value \u2013 empty (everything is allowed)  appFilesBlackList \u2013 A space separated list of:  -   mimetypes \u2013 text/plain application/vnd.xfdl -   partial mimetypes \u2013 text/audio/ /plain -   file extensions \u2013 GIF PDF XML -   default value \u2013 exe  appFilesMaxSize (size in kb) \u2013 A space separated list of:  -   mimetypes \u2013 text/plain application/ /vnd.xfdl -   file extensions \u2013 GIF PDF XML or default as special type -   default value \u2013 5000 Examples: <pre><code>ibm.nitro.NitroConfig.appFilesWhiteList = css js html exe text/plain application/vnd.xfdl mov avi \nibm.nitro.NitroConfig.appFilesBlackList = exe \nibm.nitro.NitroConfig.appFilesMaxSize.10000 = default \nibm.nitro.NitroConfig.appFilesMaxSize.50000 = mov avi\n</code></pre>  appStats.timerEnabled  appStats.refreshHour  appStats.refreshDays   By default, the timer is enabled and the collection time is set to 3 AM daily local server timer. Note: Depending on the volume of applications, statistics collection may take 10+ minutes, adjust the timer and frequency to server quiet time. appStats.timerEnabled - Enable Application Statistics collection.  To disable Application Statistics collection, set to false.  Default value: true appStats.refreshHour - Sets the hour of day to start Application Statistics collection.  Value 0 to 23, indicating the hour of day to start the statistics collection process.  Default value: 3 appStats.refreshDays - Sets the Application Statistics collection day. Use full names of day of the week, separated by a comma, semicolon, or space.  Valid values: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday  Default value: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday Examples: <pre><code>ibm.nitro.NitroConfig.appStats.timerEnabled=true \nibm.nitro.NitroConfig.appStats.refreshDays=Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\nibm.nitro.NitroConfig.appStats.refreshHour=3\n</code></pre>  attachmentFilesWhiteList  attachmentFilesBlackList  attachmentFilesMaxSize   List of allowed (whitelist), and not allowed (blackList) of mimetypes, and the number of maximum file sizes for the Attachment form item. attachmentFilesWhiteList \u2013 A space separated list of: <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 empty (everything is allowed)</li> </ul> attachmentFilesBlackList \u2013 A space separated list of: <ul> <li>mimetypes \u2013 text/plain application/vnd.xfdl</li> <li>partial mimetypes \u2013 text/audio/ /plain</li> <li>file extensions \u2013 GIF PDF XML</li> <li>default value \u2013 exe js html svg</li> </ul> attachmentFilesMaxSize (size in kb) \u2013 A space separated list of: <ul> <li>mimetypes \u2013 text/plain application/ /vnd.xfdl</li> <li>file extensions \u2013 GIF PDF XML or default as special type</li> <li>default value \u2013 5000</li> <ul> Examples: <pre><code>ibm.nitro.NitroConfig.attachmentFilesWhiteList = css js html exe text/plain application/vnd.xfdl mov avi\nibm.nitro.NitroConfig.attachmentFilesBlackList = exe \nibm.nitro.NitroConfig.attachmentFilesMaxSize.10000 = default \nibm.nitro.NitroConfig.attachmentFilesMaxSize.50000 = mov avi\n</code></pre>  blockAnonAccess   Anonymous access is not allowed by default which means that to use a Leap application or survey, users must authenticate with a valid user ID and password. This setting determines anonymous access, where: <ul> <li>enabled - anonymous access is blocked</li> <li>disabled - anonymous access is allowed</li> <li>redirect - redirects the user to authenticate</li> </ul>  Default value: redirect Example: <pre><code>ibm.nitro.NitroConfig.blockAnonAccess=redirect\n</code></pre>  customThemes.[ID].displayNamecustomThemes.[ID].locationcustomThemes.[ID].isDefaultcustomThemes.[ID].nl.[LOCALE]   The customThemes config settings define a list of customer-provided themes that can be used in Leap applications.   For each theme, two parameters must be set: <ul> <li>customThemes.[ID].displayName</li> <li>customThemes.[ID].location</li> </ul> [ID] - An identifier for the custom theme (e.g. \"corpTheme1\").  The id can contain the letters 'a' through 'z' and numbers, and must start with a letter. displayName - The theme name to be displayed in the Leap authoring UI. location -The full URL of the theme's .css file.  For each theme, there are 2 optional parameters: <ul> <li>customThemes.[ID].isDefault</li> <li>customThemes.[ID].nl.[LOCALE]</li> </ul> isDefault - If set to true, designates the theme as the default selection for new applications. nl.[LOCALE] - For globalization support of the theme's display name. [LOCALE] is the locale code that identifies the language (e.g.,\"en\", \"fr\", \"fr_CA\", \"zh\").  After modifying these settings, restart the Leap server to see the changes in the authoring environment. If the location property of a theme is modified, any deployed applications using that custom theme need to be redeployed for changes to take affect. Examples: <pre><code>customThemes.corpTheme1.displayName = Corporate Theme 1\ncustomThemes.corpTheme1.nl.fr = Th\u00e8me d'entreprise 1\ncustomThemes.corpTheme1.nl.zh = \u4f01\u4e1a\u4e3b\u98981\ncustomThemes.corpTheme1.isDefault = true\ncustomThemes.corpTheme1.location =https://mycompany.com/theme1.css\n</code></pre>  detectBrowser   If Leap detects an unsupported browser, a warning message is displayed to the user. The user can still see the form after the warning message is closed.Where: <ul> <li>warn - The user is warned that the browser is unsupported. A list of supported browsers is displayed in the warning message. When the user closes the warning message, the form is displayed.</li> <li>ignore - The user is not warned that the browser is unsupported, and the form is displayed.</li> </ul>  Default value: warn Example: <pre><code>ibm.nitro.NitroConfig.detectBrowser=ignore\n</code></pre> disableUseTab  Hides the \"Use\" tab, and prevents fetching the list of deployed and usable applications, where: <ul> <li>true - \"Use\" tab is hidden</li> <li>false - \"Use\" tab is displayed</li> </ul> Default value: false Example: <pre><code>ibm.nitro.NitroConfig.disableUseTab=true\n</code></pre>  EventHandler.infoLevelEvents  EventHandler.debugLevelEvents  EventHandler.auditLevelEvents   Leap contains an event handling implementation that enables printing out all or specific events in the system log or in a separate file based on properties setting, by default this feature is not enabled. Change properties, in the Leap_config.properties file, to monitor events that you are interested in, and where you want to output the event information.  The following will output Events information in Application Server's system log at info or debug level: <ul> <li>EventHandler.infoLevelEvents</li> <li>EventHandler.debugLevelEvents</li> </ul> auditLevelEvents will output to a file. The default file location on Windows is C:\\febEvents.log and AIX/Linux is /febEvents.log, with maximum file size 5MB, back up to 5 files.  The content of the event output is in CSV format, the description of the data: Event topic, Event time stamp, User id, User email, Application uid, Application title, Form id, Record uid, Result  The following is the list of event topics that Leap sends out: <ul> <li>builder/app/delete \u2013 Application is deleted</li><li>builder     <li>builder/app/deploy \u2013 Application is deployed for the first time</li> <li>builder/app/redeploy \u2013 A deployed application is deployed again</li> <li>builder/app/stop \u2013 A deployed application is stopped</li> <li>builder/app/import \u2013 Application is imported</li> <li>builder/app/importAndDeploy \u2013 Application is imported and deployed</li> <li>builder/app/importAndDeployWithData \u2013 Application is imported and deployed with data</li> <li>builder/app/export \u2013 Application is exported</li> <li>builder/app/exportWithData \u2013 Application is exported with data</li> <li>builder/app/upgrade \u2013 Application is upgraded</li> <li>builder/app/upgradeWithDataReplaced \u2013 Application is upgraded and the data replaced</li> <li>builder/app/result/export \u2013 Application data is exported from View Data (or REST API)</li> <li>builder/app/retrieve/source \u2013 Application source is retrieved</li> <li>builder/app/query/deployed \u2013 Application deployment state is queried</li> <li>builder/record/submit \u2013 A record is submitted by normal app usage</li> <li>builder/record/update \u2013 A record is updated by normal app usage</li> <li>builder/record/delete \u2013 A record is deleted by normal app usage</li> <li>builder/data/insert/user \u2013 A record is created as a result of a direct user action</li> <li>builder/data/insert/code \u2013 A record is created indirectly</li> <li>builder/data/update/user \u2013 A record is updated as a result of a direct user action</li> <li>builder/data/update/code \u2013 A record is updated indirectly</li> <li>builder/data/delete/user \u2013 A record is deleted as a result of a direct user action</li> <li>builder/data/delete/code \u2013 A record is deleted indirectly</li>  To capture failed events, use \"builder/error/[EVENT_TOPIC]\" Example: <pre><code> ibm.nitro.EventHandler.infoLevelEvents=builder/record/submit,builder/error/builder/record/submit\n</code></pre> exportDataWithEmails  By default when you export data from applications, emails are also exported. You can exclude emails from the export by changing the property value to false.  Where: <ul> <li>true - emails are exported with application data</li> <li>false - emails are not exported with application data</li> </ul> Default value: true Example: <pre><code>ibm.nitro.NitroConfig.exportDataWithEmails=true\n</code></pre>  imageDomainWhitelist.enabled=true  imageDomainWhitelist.[N].domain   The imageDomainWhitelist config settings define a white-list of domains from where images can be uploaded to a Rich Text Entry field.  In addition to setting the following: imageDomainWhitelist.enabled=true for each domain an additional parameters must be set. imageDomainWhitelist.[N].domain = where \"[N]\" is an integer number identifying that service.  domain - The domain property implicitly allows sub-domains. For example, a domain property of example.com allows URLs such as https://www.example.com/anything, http://api.example.com/anything, or https://example.com/anything. Examples: <pre><code>ibm.nitro.imageDomainWhitelist.enabled=true\nibm.nitro.imageDomainWhitelist.[1].domain=http://acme.com\nibm.nitro.imageDomainWhitelist.[2].domain=http://acme2.com\n</code></pre> InfoEntryPoint.dailyInfo  Provides HTML content that is shown in the login screen. Can be used for status messages, or help.  <pre><code>ibm.nitro.InfoEntryPoint.dailyInfo = Welcome to &lt;b&gt;HCL Leap&lt;/b&gt;\n</code></pre> LogoutServlet.postLogoutRedirectURL  The value of this parameter tells Leap where to redirect user after log off. If the parameter is not configured or left blank, the user is redirected to the login page. Example: <pre><code>ibm.nitro.LogoutServlet.postLogoutRedirectURL=http://example_url.com/signout\n</code></pre>  maximumRecordsToRetrieve  Maximum number of records that are permitted for export from the View Data page at one time. If the number of records to be exported exceeds the number set by this property, the export is stopped, and an error message is shown. Note: The default value of 20,000 is supported for base systems. Setting the value higher could result in poor performance, depending on result set size and server hardware. Example: <pre><code>ibm.nitro.NitroConfig.maximumRecordsToRetrieve=25000\n</code></pre>  MemberManager.adminAlias  MemberManager.userProps.loginName  MemberManager.userProps.id  MemberManager.groupProps.id  MemberManager.userProps.email  MemberManager.userProps.displayName  MemberManager.adminAlias setting is mandatory. For WebSphere Application Server only, configure the VMM login.  By default, Leap uses J2C alias vmmAdmin to authenticate with VMM. You must configure it here if you want to change the J2C alias name.  You must have WebSphere Application Server administrative user credentials to run Leap  If you use LDAP within WebSphere Application Server, there are a number of properties that look up user and group information. If your LDAP uses different property keys than the ones set by default, update the property keys here so that user and group look up function correctly.  If you are using LDAP within WebSphere Application Server, refer to the following settings: MemberManager.userProps.loginName  Describes the LDAP property used as the login ID. Each loginName must be unique.  Default setting: uid MemberManager.userProps.id  Represents a unique key for the user. This key must be identical to the loginName.  Default setting: uid MemberManager.groupProps.id  Represents a unique key for the group. The value is the LDAP property that is used. For example, cn, represents Common Name.  Default setting: cn MemberManager.userProps.email  The email address of the user. Leap uses this email address to send notifications and other emails to the user.  Default setting: mail MemberManager.userProps.displayName  Used to display the name of the user, instead of the login id.  Default setting: cn Examples: <pre><code>ibm.was.MemberManager.userProps.loginName = mail \nibm.was.MemberManager.userProps.id = mail\nibm.was.MemberManager.groupProps.id = name\nibm.was.MemberManager.userProps.email = mail\nibm.was.MemberManager.userProps.displayName = cn\n</code></pre> purgeOrphanFilesHours  In some circumstances, files attached to either application designs or user-submitted records can become orphaned if the primary design or record element is removed outside the normal process. File records which are older than this number of hours and are no longer associated with an existing primary record are removed.  Default value: 48 Example: <pre><code>ibm.nitro.purgeOrphanFilesHours=36\n</code></pre> runtimeCSP  The runtimeCSP setting defines the <code>Content-Security-Policy</code> (CSP) header that will be applied to running Forms. Note: This setting only applies to Forms. It does not currently apply to App Pages, Summary Charts, or the View Data page.  For more information on CSP, see https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP  For more information on Strict CSP, see Strict CSP Example: <pre><code>ibm.nitro.NitroConfig.runtimeCSP=default-src 'self' *.example.com; img-src *\n</code></pre> runtimeResources.[N]  Additional web resources to load into the Leap UI for leveraging the Custom Widget API. The values from these settings will be injected into the <code>&lt;head&gt;</code> section of Leap's HTML pages. Example: <pre><code>ibm.nitro.NitroConfig.runtimeResources.1 = &lt;link rel='stylesheet' type='text/css' media='screen' href='/custom-widgets/samples/acme/Acme_Widgets.css'&gt;\nibm.nitro.NitroConfig.runtimeResources.2 = &lt;script type='text/javascript' src='/custom-widgets/samples/acme/Acme_common.js'&gt;&lt;/script&gt;\nibm.nitro.NitroConfig.runtimeResources.3 = &lt;script type='text/javascript' src='/custom-widgets/samples/acme/Acme_Boolean_Widget.js'&gt;&lt;/script&gt;\n</code></pre> secureJS  Enables or disables JavaScript restrictions in run time forms. When a form designer adds custom JavaScript to an application, this flag restricts the scope of that custom JavaScript. This flag applies to the entire Leap server for all users. Note: Setting this parameter to <code>false</code> might expose users to malicious JavaScript. Only set to <code>false</code> in a secured environment where Leap applications are created by trusted users.  For more information, see JavaScript API for Leap.  Default value: true Example: <pre><code>ibm.nitro.ApplicationCompilerService.secureJS = false\n</code></pre>  serviceAuthorization.enabled  serviceAuthorization.[SERVICE_ID]   Access to a service description may be given to a specific user, group, or special assignment. The access control is made up of two parts: <ul> <li>Who may \"discover\" and work with the service while designing an application.</li> <li>Who may \"invoke\" the service.</li> </ul>  Users or Groups provided must be defined using the attributes defined by <code>ibm.was.MemberManager.userProps.id = mail</code> and <code>ibm.was.MemberManager.groupProps.id = name</code> respectively.   Special assignment valid values are:  <ul> <li>all-authenticated: for app author \"discover\" privilege only</li> <li>anonymous: for app authors and end-user \"discover\" and \"invoke\" privileges</li> <li>all-authors: for end-user \"invoke\" privilege only</li> </ul>  To enable service authorizations, set <code>ibm.nitro.NitroConfig.serviceAuthorization.enabled=true</code>. Multiple services may be defined. To define a service authorization, add <code>ibm.nitro.NitroConfig.serviceAuthorization.serviceIdN</code> where serviceIdN is the 'id' of the service description. The value must be a valid JSON string, see provided samples.  Note: A backslash (\\) at the end of a line can be used to present a value over multiple lines. The backslash must be the very last character on the line. Examples: <pre><code>ibm.nitro.NitroConfig.serviceAuthorization.enabled = true\nibm.nitro.NitroConfig.serviceAuthorization.serviceId1 = { \\\n   \"comment\": \"Auth for Service 1\", \\\n   \"discover\": { \"users\": [\"user1\"], \"groups\": [\"group1\"], \"special\": [] }, \\\n   \"invoke\": { \"users\": [], \"groups\": [], \"special\": [\"all-authenticated\"]\" } \\\n}\n</code></pre> serverURI  Indicates the base URI used for critical functions, including editing applications, and email. Must include everything necessary to connect to the Leap context, for example, /apps.  With this entry, all emailed links, and absolute links visible during Leap design time start with the following base URI regardless of what the user enters in the address bar.  Example: <pre><code>ibm.nitro.NitroConfig.serverURI = https://leap.example.com/apps\n</code></pre>  servicesWhitelist.enabled  servicesWhitelist.[N].actions  servicesWhitelist.[N].domain   The servicesWhitelist config settings define a white list of domains and HTTP actions that app authors are allowed to call directly from their applications using URL based services.  In addition to setting <code>servicesWhitelist.enabled=true</code>, for each service two additional parameters must be set: <ul> <li>servicesWhitelist.[N].domain =</li> <li>servicesWhitelist.[N].actions =</li> </ul> The domain property implicitly allows sub-domains. For example, a domain property of example.com allows URLs such as https://www.example.com/anything, http://api.example.com/anything, or https://example.com/anything.  The https or http protocol included in the domain property is respected. For example, a domain property of https://api.example.com only allows calls to secure SSL https://api.example.com/anything and not to non-secure http://api.example.com/anything.  The actions property is a comma-separated list of the HTTP actions allowed for a particular domain. Valid values are GET, PUT, POST, DELETE, HEAD, and PATCH. If the actions value is missing, no actions are allowed.  Where [N] is an integer number identifying that service.  Default value: true Examples: <pre><code>ibm.nitro.NitroConfig.servicesWhitelist.enabled = true\nibm.nitro.NitroConfig.servicesWhitelist.1.domain = example.com\nibm.nitro.NitroConfig.servicesWhitelist.1.actions = GET\nibm.nitro.NitroConfig.servicesWhitelist.2.domain = https://securehost.com\nibm.nitro.NitroConfig.servicesWhitelist.2.actions = GET, POST,PUT\n</code></pre> Note: This white-list has no effect on service descriptions and custom service transports that were installed on the server by the administrator.  SetupAll.setupStatus  After deploying Leap for the first time or upgrading to a newer version, there is a setup screen that is presented upon accessing the manage page. This setup screen shows the status of detecting and updating the database tables, checks that security is properly enabled, and a mail session is configured. This page requires the admin to click a button to fully progress through the setup.  To disable this setup page and required admin interaction add the property:  <pre><code>ibm.nitro.SetupAll.setupStatus = start\n</code></pre> viewResponsesMaximumCount  For DB2\u00ae or Oracle. The maximum number of records that are counted when returning record sets in pages. If the total number of records exceeds viewResponsesMaximumCount, then paging indicators will no longer accurately lists the total number of pages. Setting this value higher can have performance consequences for the server if there are many users viewing forms with large response lists.  Default value: 1000 Example: <pre><code>ibm.nitro.NitroConfig.viewResponsesMaximumCount=2000\n</code></pre> xFrameOptions  Use this setting to control the <code>X-Frame-Options</code> response header for Leap pages, which determines if Leap can be embedded into other web pages. Example: <pre><code>ibm.nitro.NitroConfig.xFrameOptions = SAMEORIGIN\n</code></pre> <p>Parent topic: Configuring the properties file</p>"},{"location":"co_configuring_the_properties_file.html","title":"Configuring the properties file","text":"<p>When you install HCL Leap, a file containing sample configuration properties is also installed. You can configure the properties for optimal performance with your system.</p> <p>To use the provided properties file, you must move it to the extensions folder, then adjust the settings to match your system.</p> <p>Note: In a horizontally clustered environment, the Leap_config.properties must be configured for each node.</p>"},{"location":"co_configuring_the_properties_file.html#section_xfj_ds5_jzb","title":"Define extensions directory in the fsp.properties","text":"<ol> <li>Go to &lt;install location&gt;/deploy, and locate Leap_config.properties.</li> <li>Copy the file and paste it to:<ul> <li>Windows \u2013 C:\\HCL\\Leap\\extensions</li> <li>Linux, AIX \u2013 /opt/HCL/Leap/extensions</li> </ul> </li> <li>Open the Leap_config.properties file and configure the settings to match your system.</li> </ol>"},{"location":"co_configuring_the_properties_file.html#section_nmd_q4f_zzb","title":"Customizing the location of the extensions directory","text":"<p>There are two ways to define a customized location for the extensions directory. You can modify the fsp.properties or add a jvm property.</p>"},{"location":"co_configuring_the_properties_file.html#using-the-fspproperties-file","title":"Using the fsp.properties file","text":"<ol> <li> <p>To customize the location of the Leap_config.properties file, you must edit the fsp.properties file.</p> </li> <li> <p>Go to the fsp.properties file. The default location of the fsp.properties file is: \\AppServer\\profiles\\AppSrv01\\installedApps\\\\Experience Builder.ear\\builder.war\\WEB-INF\\classes.</p> </li> <li>Open the properties file in a text editor and add a valid extensions= parameter. For example, extensions = /usr/HCL/Leap/extensions.</li> </ol>"},{"location":"co_configuring_the_properties_file.html#section_fjf_4t5_jzb","title":"Using a jvm property","text":"<p>Add the option <code>-Dfsp.extensions.dirs</code> to the jvm where Leap is deployed. The value is the path(s) to the extensions directory.</p> <p>AIX:</p> <pre><code>-Dfsp.extensions.dirs=/customFolder/extensions,/customFolder2/extensions\n</code></pre> <p>Windows</p> <pre><code>-Dfsp.extensions.dirs=c:\\customFolder\\extensions,c:\\customFolder2\\extensions\n</code></pre>"},{"location":"co_configuring_the_properties_file.html#section_h25_tt5_jzb","title":"Validate which directory is loaded","text":"<p>Check the Leap SystemOut.log. There is an entry that indicates which directory is recognized and loaded. For example:</p> <pre><code>[5/21/14 22:51:37:095 PDT] 0000001b IntegratorSta I com.ibm.form.platform.service.startup.IntegratorStartup phase1Start Extensions folder: /usr/HCL/Leap/extensions\n</code></pre> <p>Note: Some configuration properties require a restart of the Leap server. If you do not see your changes applied within a few minutes of modifying the properties file, restart the server.</p> <ul> <li>Configuration properties The following table contains a list of properties in the HCL Leap Leap_config.properties file. You can adjust the settings listed in the file, or add your own for a custom configuration.</li> </ul> <p>Parent topic: Configuring</p>"},{"location":"cr_adding_custom_behavior.html","title":"Adding custom behaviour","text":"<p>There may be times that you want your applications to behave a certain way and it is not a built-in feature.  There are many different ways to add custom behavior with a little planning and some custom javaScript.  </p> <p>This page provides some examples of custom behavior.</p>"},{"location":"cr_adding_custom_behavior.html#automatically-submit-after-x-minutes","title":"Automatically submit after X minutes","text":"<p>This form will be submit automatically after X minutes.  You could use this technique for a form where the user is only given a certain amount of time to complete it (i.e. a timed test).</p> <p>This example uses some javaScript in the onNew event to programmatically trigger the submit button.  The javaScript is:</p> <p>if secureJS=false: <pre><code>// Will trigger the submit button after 10 minutes has\n// passed since the form was opened.\nsetTimeout(function(){\nvar actionButtons = form.getStageActions();\nfor(var i=0; i&lt;actionButtons.length; i++){\n  if(actionButtons[i].getId() === 'S_Submit')\n    actionButtons[i].activate();\n}},600000);\n</code></pre></p> <p>if secureJS=true: <pre><code>setTimeout(function(){\nvar actionButtons = form.getStageActions();\nfor(var i=0; i&lt;actionButtons.length; i++){\n  if(get(actionButtons, i).getId() === 'S_Submit')\n    get(actionButtons, i).activate();\n}},600000);\n</code></pre></p> <p>There are some key things to remember:</p> <ol> <li>You must redirect the form after the submission, in the properties of the Submit button in the Stages tab</li> </ol> <p>or </p> <ol> <li>You must change the form to render in the next stage</li> </ol> <p>If you do not do one of these two things then this will cause the form to get stuck in an endless loop of opening a new form and then submitting it (which becomes really apparent if you shorten the submit timing to 1s).  However if a user closes the form then the javaScript is not executed.</p>"},{"location":"cr_adding_custom_behavior.html#customize-the-submit-behavior","title":"Customize the submit behavior","text":"<p>Why would I want to customize the submit behavior and what does that mean?</p>"},{"location":"cr_adding_custom_behavior.html#use-cases","title":"Use Cases:","text":"<ol> <li> <p>You don't like where the submit button is (in the footer) and you want to move it in your form or you want to change the look and feel of the submit button (like use an image for the button).</p> </li> <li> <p>You might want to perform some error checking before allowing the submit to complete.</p> </li> <li> <p>Disable the dialog that appears on submit showing invalid fields.</p> </li> <li> <p>Customize error text that appears below invalid items.</p> </li> </ol>"},{"location":"cr_adding_custom_behavior.html#case-1-creating-a-form-button-that-triggers-the-submit-action","title":"Case #1 - Creating a form button that triggers the submit action.","text":"<ol> <li> <p>Create a regular form button.</p> </li> <li> <p>In the onClick event of your button object you can place the following code to activate the \"real\" submit button:</p> </li> </ol> <pre><code>var actionButtons = form.getStageActions();\nfor(var i=0; i&lt;actionButtons.length; i++){\n  if(get(actionButtons, i).getId() === 'S_Submit')\n    get(actionButtons, i).activate();\n}\n</code></pre> <p>Note: The only part of this code that you may have to change is the \"S_Submit\", this is the ID of the stage action that you want to trigger.  To find the ID you will have to go to the Stages tab, then open the properties for the button you want to trigger.</p> <ol> <li>Next, we need to hide the \"real\" submit button so that the user can't click it.  If you deselect the checkbox on the page properties to not show the stage buttons then the objects are not created and then cannot be activated.  Instead leave the checkbox enabled and hide the stage buttons with the form is loaded.  In the form onShowActionButtons you can hide the stage buttons by using:</li> </ol> <pre><code>var actionButtons = form.getStageActions();\nfor(var i=0; i&lt;actionButtons.length; i++){\n  get(actionButtons, i).setVisible(false);\n}\n</code></pre> <p>The above code will hide ALL the stage action buttons.  If you just want to hide a single stage action button then you would have to modify the code to look like:</p> <pre><code>var actionButtons = form.getStageActions();\nfor(var i=0; i&lt;actionButtons.length; i++){\n  if(get(actionButtons, i).getId() === 'S_Submit') {\n    get(actionButtons, i).setVisible(false);\n  }\n}\n</code></pre> <p>In this example we check for the ID of the action button and only hide the ones that we want.</p>"},{"location":"cr_adding_custom_behavior.html#case-2-custom-error-checking-before-submit","title":"Case #2 - Custom Error checking before submit","text":"<p>There are two ways to perform error checking BEFORE the submit operation:</p> <ol> <li>If you are implementing a form button that triggers a submit as referenced in Case #1 then you could add the custom error checking to the onClick event of the form button before you execute the stage action.  For example: <pre><code>// only perform the submit if the condition passes\nif(x = 1) {\n  var actionButtons = form.getStageActions();\n  for(var i=0; i&lt;actionButtons.length; i++){\n    if(get(actionButtons, i).getId() === 'S_Submit')\n      get(actionButtons, i).activate();\n  }\n}\n</code></pre></li> </ol>"},{"location":"cr_adding_custom_behavior.html#case-3-disable-the-invalid-item-dialog","title":"Case # 3 - Disable the Invalid Item Dialog","text":"<p>There is no way to disable the invalid item dialog that appears on submit.  The only way to workaround it is to not use the default validity check and to implement your own using javaScript validation.  Let's look at this in greater detail, what is involved in something like this:</p> <ol> <li> <p>Can't use the required property of the form items</p> </li> <li> <p>Can't use rules to change required or valid</p> </li> </ol> <p>Since we can't use the built-in tools for this we now have to manage it on our own.  This means that all the validation will be controlled by javaScript that is executed when the form is loaded in the browser.</p> <ol> <li>Since required and valid are controlled by javaScript they cannot be enforced when using the REST API</li> </ol> <p>So to bypass the default dialog we need to get in front of it, we can do that by adding code to the validateButtonPressed event which is executed anytime a stage button is triggered.  The code might look something like this:</p> <pre><code>if(pActionId === 'S_Submit') {\n  // do your custom validation, here you can use setValid() or setRequired() if desired\n  // if you consider the form to be in an invalid state then return false to cancel the submit action\n  if(!app.getSharedData().isFormValid) {\n    return false;\n  }\n}\n</code></pre> <p>This technique looks to cancel the submit action if the form is deemed invalid by your criteria.  If the form is considered valid then the submit is allowed to proceed.  In this way the user would never see the invalid items dialog because we never actually trigger the submit action if any of the fields contain invalid data.</p>"},{"location":"cr_adding_custom_behavior.html#case-4-customize-the-error-text-that-appears-below-invalid-items","title":"Case #4 - Customize the error text that appears below invalid items","text":"<p>There may be times that you want to customize the error text making it more descriptive of what the user needs to do.  In this example, a message will appear beneath any field on the form that is invalid.</p> <p>Implementing a solution that allows custom messages means that you have to use javaScript and abandon the default error checking and you cannot use the built-in property or a rule for setting the field as required.  The approach that I took looks like this:</p> <ol> <li> <p>Create an object array to store the fields to be considered required and the custom message to use</p> </li> <li> <p>In the validateButtonPressed event walk all the form items and use the setValid() function to set the custom error text if the field is empty or invalid.  At the same time we have to set a listener in the onItemChange event to clear the error text if the user enters text into the field.</p> </li> </ol> <p>This solution leverages the recursive function).  Copy the hasItems and getItem functions into the onLoad event, in addition to the following code:</p> <pre><code>// add all the fields that you want to be required and their custom error text to the object array\napp.getSharedData().requiredMap = new Array();\napp.getSharedData().requiredMap.push({id: 'F_SingleLine2', msg: 'Please enter name.'});\napp.getSharedData().requiredMap.push({id: 'F_SingleLine3', msg: 'Please enter address.'});\napp.getSharedData().requiredMap.push({id: 'F_SingleLine', msg: 'Please enter age.'});\n\n// This function is used for retrieving an item from the requiredMap by ID specified\napp.getSharedData().getArrayVal = function(id) {\n  var theMsg = \"\";\n  for(var i=0; i&lt;app.getSharedData().requiredMap.length;i++) {\n    var tmp = get(app.getSharedData().requiredMap, i);\n    if (tmp.id === id) {\n      theMsg = tmp.msg;\n      break;\n    }\n  }\n return theMsg;\n}\n\n/*\n* This is the function where you place the logic that you want to perform on the item that you are currently looking at.\n* The recursive function passes the handle to the current item, from which you can then access any of its properties\n*/\napp.getSharedData().isFormValid = true;\napp.getSharedData().processItem = function(item) {\n  if(item.getType() === \"text\") {\n\n    // do your thing\n    var theMsg = app.getSharedData().getArrayVal(item.getId());\n    if(theMsg !== \"\") {  //item is a required item\n      if(item.getValue() === \"\" || !item.getBOAttr().getValid()) {\n        app.getSharedData().isFormValid = false;\n        item.getBOAttr().setValid(false, theMsg);\n      }\n    }\n\n    var ev = \"onItemChange\";\n    // add an onItemChange Listener - the code within will be called when the fields value changes\n    var hndl = item.connectEvent(ev, function(success){\n      var v = item.getBOAttr().getValue();\n      if(v !== \"\") {\n        item.getBOAttr().setValid(true, \"\");\n      }\n   }); // end of dynamic event listener\n  } // end if item.getType\n}\n</code></pre> <p>The code is then triggered from the validateButtonPressed event:</p> <pre><code>if(pActionId === 'S_Submit') {\n\n  // reset valid flag for multiple submit attempts in one session\n  app.getSharedData().isFormValid = true;\n\n  // walk all form items looking for invalid fields\n  app.getSharedData().getItem(form, app.getSharedData().processItem);\n  if(!app.getSharedData().isFormValid) {\n    return false;\n  }\n}\n</code></pre>"},{"location":"cr_adding_custom_behavior.html#inactive-form-time-out","title":"Inactive form time-out","text":"<p>This example simulates a forced time-out.  If the form sits inactive for a specified duration then you can for the form to close or redirect to a different page.  This works by using the javaScript setTimeout and clearTimeout functions.</p> <p>When the form loads we first walk all the input items in the form and attach a listener to the onItemChange event.  When a field changes the event listener will clear the current timeout and then start it over again.</p> <p>If the duration is met then the form performs the action defined in the app.getSharedData().doTimeout function, which in this case is to switch to a custom page in the application that provides instructions to the user that their session timed out.</p> <p>The duration for this sample is 5 seconds (5000 milliseconds), if you do nothing</p>"},{"location":"cr_adding_custom_behavior.html#code","title":"Code","text":"<p>onStart</p> <p>Copy all of the functions from recursive functions into the onStart event.</p> <p>Form onLoad event <pre><code>app.getSharedData().timeoutDuration = 5000;  // duration of timeout in milliseconds\napp.getSharedData().timeout = null;      // holds the pointer to the current timeout process\napp.getSharedData().hndls = new Array(); // holds the handles for all the onItemChange listeners\n\n// defines what happens when the timeout is executed\n// this action could be anything you want it to be\napp.getSharedData().doTimeout = function() {\n  form.selectPage(\"P_NewPage2\");\n}\n\n// hook the timeout functions on all the form input items onItemChange event\napp.getSharedData().getItem(form, app.getSharedData().processItem);\n\n// start the timeout, if any form item changes then we clear the timeout and start over\napp.getSharedData().timeout = setTimeout(app.getSharedData().doTimeout, app.getSharedData().timeoutDuration);\n</code></pre></p> <p>Form onDesctruct event <pre><code>// disconnect all the handles.  We do this incase the form is ever reloaded in the same\n// session, because it will attach new listeners which means there will be duplicates\nfor(var i=0; i&lt; app.getSharedData().hndls.length;i++) {\n  var itm = get(app.getSharedData().hndls, i).itm;\n  var hndl = get(app.getSharedData().hndls, i).hndl;\n\n  itm.disconnectEvent(hndl);\n}\n</code></pre></p>"},{"location":"cr_adding_custom_behavior.html#progress-indicator","title":"Progress Indicator","text":"<p>Often we want to take user through a few questions / panels at a time.  While doing so it's good practice to let the user know the progress they have made at completing the form with a graphical indicator.</p> <p>The simplest way to do this is by using the HTML  Tag. <p>Let's say that you have 3 steps in the form completion process.  </p> <ol> <li>Add an HTML item to each page.</li> <li>Add the \"progress\" element with the appropriate value for each page in the form.</li> </ol> <pre><code>&lt;progress value=\"33\" max=\"100\"&gt;&lt;/progress&gt;\n</code></pre> <p>For a more accurate progress meter, you could calculate its maximum value to be the total number of fields and update its value as each field is filled in.    To accomplish this we have to walk over all the items when the page is loaded and attach an event handler that will update the progress meter.</p> <p>In the form onLoad event you need the isInputField, hasItems and getItem from the recursive functions, in addition to the following code:</p> <pre><code>app.getSharedData().fieldCount = 0;\napp.getSharedData().filledFieldCount = 0;\napp.getSharedData().fieldValues = [];\n\napp.getSharedData().processItem = function(item) {\n\n  if(app.getSharedData().isInputField(item.getType())) {\n    // increment the global field count\n    app.getSharedData().fieldCount += 1;  \n\n    // attach an event handler\n    item.connectEvent(\"onItemChange\",function(){\n\n      if (item.getValue() !== \"\")\n      {\n        var field = app.getSharedData().fieldValues.find(field =&gt; field.id === item.getId());\n        if ( !field ) {      \n          // first time so adding to the global array to watch field values\n          app.getSharedData().fieldValues.push({id:item.getId(), value:item.getValue()});\n          app.getSharedData().filledFieldCount += 1;\n        }  \n      }\n      else\n      {\n        // field was cleared, decrement the progress meter \n        app.getSharedData().filledFieldCount -= 1;\n\n        // remove the field from the global list\n        var filter = app.getSharedData().fieldValues.filter(field =&gt; field.id !== item.getId());\n        app.getSharedData().fieldValues = filter;\n      }\n\n      // update the progress meter\n      const str = \"&lt;progress value='\" + app.getSharedData().filledFieldCount + \"' max='\" + app.getSharedData().fieldCount + \"'&gt;&lt;/progress&gt;\";\n      item.getPage().F_HTMLArea4.setContent(str);\n    });\n  }\n}\n</code></pre> <p>Parent topic: Adding dynamic behavior</p>"},{"location":"cr_adding_dynamic_behavior.html","title":"Adding dynamic behavior to Leap applications","text":"<p>This topic provides details on adding dynamic behavior to your Leap applications.</p> <p>Adding formulas to your application </p> <p>You can create and edit formulas to assign values to an item on your HCL Leap form.</p> <p>Creating rules in your application </p> <p>Rules help you gather the correct information from users and organize your information after data is entered in a form. You can create composite rules that govern how your form, and the data in your form behaves.</p> <p>Incorporating web services into your applications </p> <p>The following topics describe how to incorporate web services into your HCL Leap application.</p> <p>Adding Stages to an application </p> <p>It is often desirable to have an application, or form, transition through a set of phases or stages. At each stage the form might be used by different people in different roles. The form also might be presented in a slightly different manner in each stage, such as having some items or pages hidden, or in a read-only state.</p> <p>Adding JavaScript</p> <p>You can customize your form's behavior by adding custom javaScript.</p> <p>Adding custom behaviour</p> <p>There may be times that you want your applications to behave a certain way and it is not a built-in feature.  There are many different ways to add custom behavior with a little planning and some custom javaScript. </p> <p>Working with Attachments</p> <p>Some examples of working with attachments.</p> <p>Parent topic: Building Apps</p>"},{"location":"cr_adding_formula_from_settings_tab.html","title":"Creating a formula from the Settings tab","text":"<p>The Settings tab contains a Formula section from which you can view and create formulas.</p> <p>When you select the Formulas menu option, you are shown the formulas for your form. They are divided into two categories: General Formulas and Item Formulas. Item Formulas is a list of the formulas created in the form using the Properties side panel. General Formulas are complex formulas created on the Settings tab.</p> <p>Note: If you are creating a formula to assign a string value to a Time form item, the content of the string must be based on a 24-hour clock. If the input value is not in a valid 24-hour clock format, the resulting value will not be correct.</p> <p>To create a complex formula:</p> <ol> <li> <p>Click Add Formula.</p> </li> <li> <p>Add a title and description to your formula.</p> <p>Although the description is optional, it is useful for users to distinguish between several similarly titled formulas.</p> </li> <li> <p>Select the function from the list of available options.</p> <p>The available options are:</p> <ul> <li>Add \u2013 Adds two values together.</li> <li>Assign \u2013 Assigns a value to the specified form item.</li> <li>Table Average \u2013 Calculates the average column value of a table.</li> <li>Concatenate \u2013 Concatenates two values together into a single string.</li> <li>Power \u2013 Raises power of one value to another value.</li> <li>Table Max \u2013 The maximum column value of a table on the form.</li> <li>Multiply \u2013 Multiplies two values together.</li> <li>Minus \u2013 Subtracts one value from another value.</li> <li>Table Sum \u2013 The sum of a column of a table.</li> <li>Table Count \u2013 The number of rows in a table.</li> <li>Divide \u2013 Divide one value by another.</li> <li>Table Min \u2013 The minimum column value of a table. After you select a function input areas, and a result area are shown.</li> </ul> </li> <li> <p>Click either the Input 1 field.</p> <ul> <li>Select a form item from the list.</li> <li>Click Or, Enter a Number. Enter a number in the Value: field, and click OK.</li> <li> <p>Click either the Input 2 field.</p> </li> <li> <p>Select a form item from the list.</p> </li> <li>Click Or, Enter a Number. Enter a number in the Value: field, and click OK.</li> <li>Click Result to select where the result of the formula is shown to the user.</li> </ul> <p>Note: If your formula contains errors, an error icon is shown. Ensure that a formula is free of errors before applying it to a form item.</p> </li> <li> <p>To create complex formulas, click the Add green plus icon.</p> <p>A second set of inputs is shown. Set values for the inputs and the result to create the second function. You can add as many additional functions as required to complete your formula.</p> <p>The formula runs when there are changes to the item. If you do not want the formula to automatically run, clear the check box for Automatically run this formula when there are changes to item values.</p> <p>You can change the order of functions in a formula by clicking the Move up or Move down arrows located.</p> </li> <li> <p>Click OK to save and apply the formula.</p> </li> </ol> <p>Save and preview your form to test the formula.</p> <p>Parent topic: Adding formulas to your application</p>"},{"location":"cr_adding_formula_running_formula_from_event.html","title":"Running a formula from an event","text":"<p>After you add General formulas using the Settings tab, you can use the formulas when running events. For example, you can set a formula to run when a user clicks a button.</p> <p>General formulas by default run whenever a form item is changed by the user. You can set formulas to run upon a specific event. For example, if a customer is entering information into an order form, you can set a formula to calculate sales tax and a subtotal when the user clicks a button. To run a formula when a user clicks a button:</p> <ol> <li> <p>Add a button to your form.</p> </li> <li> <p>Select the newly added button.</p> <p>The Properties side panel opens.</p> </li> <li> <p>Click the Events tab.</p> </li> <li> <p>Select onClick from the list of Client Side events.</p> <p>The onClick options window opens.</p> </li> <li> <p>Select Run a Formula.</p> <ul> <li>Click the list to reveal the list of General formula created in the Settings tab.</li> <li>Click Add/Edit Formula to create a formula.</li> <li>After you either select or create the formula, click OK to close the onClick window.</li> </ul> </li> </ol> <p>Parent topic: Adding formulas to your application</p>"},{"location":"cr_adding_formulas_from_properties_window.html","title":"Creating a Formula from the Properties side panel","text":"<p>You can set a formula on a form item using the Properties side panel. The following instructions describe how to open the Formula editor and the formula options available.</p> <p>You must set the formula on the form item that stores the result. For example, if you want to add two numbers together, set the formula on the field where you want the result shown.</p> <p>Note: If you are creating a formula to assign a string value to a Time form item, the content of the string must be based on a 24-hour clock. If the input value is not in a valid 24-hour clock format, the resulting value will not be correct.</p> <ol> <li> <p>Select the form item.</p> <p>The Properties side panel opens.</p> </li> <li> <p>Click the Formula tab.</p> </li> <li> <p>Select the function from the list of available options.</p> <p>The available options are:</p> <ul> <li>Add \u2013 Adds two values together.</li> <li>Assign \u2013 Assigns a value to the specified form item.</li> <li>Table Average \u2013 Calculates the average column value of a table.</li> <li>Concatenate \u2013 Concatenates two values together into a single string.</li> <li>Power \u2013 Raises power of one value to another value.</li> <li>Table Max \u2013 The maximum column value of a table on the form.</li> <li>Multiply \u2013 Multiplies two values together.</li> <li>Minus \u2013 Subtracts one value from another value.</li> <li>Table Sum \u2013 The sum of a column of a table.</li> <li>Table Count \u2013 The number of rows in a table.</li> <li>Divide \u2013 Divide one value by another.</li> <li>Table Min \u2013 The minimum column value of a table. After you select a function, input areas and a result area are shown.</li> </ul> </li> <li> <p>Click the Input 1 field.</p> <ul> <li>Select a form item from the list.</li> <li>Click Or, Enter a Number. Enter a number in the Value: field, and click OK.</li> <li> <p>Click the Input 2 field.</p> </li> <li> <p>Select a form item from the list.</p> </li> <li>Click Or, Enter a Number. Enter a number in the Value: field, and click OK. Note: If your formula contains errors, an error icon is shown. Ensure that a formula is free of errors before applying it to a form item.</li> </ul> </li> </ol> <p>Save and preview your form to test the formula.</p> <p>Parent topic: Adding formulas to your application</p>"},{"location":"cr_adding_formulas_toc.html","title":"Adding formulas to your application","text":"<p>You can create and edit formulas to assign values to an item on your HCL Leap form.</p> <p>There are two places within Leap where you can access the Formula editor:</p> <ul> <li>The Formula tab of the Properties side panel.</li> <li> <p>The Formula menu item from the Settings tab.</p> </li> <li> <p>Creating a Formula from the Properties side panel You can set a formula on a form item using the Properties side panel. The following instructions describe how to open the Formula editor and the formula options available.</p> </li> <li>Creating a formula from the Settings tab The Settings tab contains a Formula section from which you can view and create formulas.</li> <li>Running a formula from an event After you add General formulas using the Settings tab, you can use the formulas when running events. For example, you can set a formula to run when a user clicks a button.</li> </ul> <p>Parent topic: Adding dynamic behavior</p>"},{"location":"cr_application_operations_toc.html","title":"Application Management","text":"<p>This topic gives an overview of the types of operations that you can perform for a Leap application.</p> <p>Creating an application </p> <p>This topic gives a general overview of the application creation process, from opening the HCL Leap interface to launching a completed application.</p> <p>Creating an application from an excel spreadsheet </p> <p>Leap allows you to create an application from an excel spreadsheet, automatically creating the widgets and importing the data found in the spreadsheet.</p> <p>Deploying an application</p> <p>Deploying an HCL Leap application makes it available for users. </p> <p>Launching an application </p> <p>After an HCL Leap application is deployed, the Launch link is enabled. When you click Launch, the live application opens in a new window.</p> <p>Viewing submitted responses </p> <p>After users complete and submit forms, you can view the submitted responses. Responses are available compiled into summary charts, or as a list of individual forms.</p> <p>Viewing the application history</p> <p>Shows the history of actions (create, deploy, update) performed against the application, the date and by whom.</p> <p>Upgrading an application design </p> <p>The upgrade feature allows an application design to be replaced by a new version.</p> <p>Updating and stopping a deployment </p> <p>The following instructions describe how to update, or stop, the deployment of an HCL Leap application.</p> <p>Duplicating an application</p> <p>Create a new application by duplicating an existing application.</p> <p>Parent topic: Building Apps</p>"},{"location":"cr_attachments.html","title":"Working with attachments","text":"<p>A file that is added to a form using the attachment item is uploaded to the Leap server as soon the user adds it.  The attached file is associated with the form after it is submitted.  If the form is not submitted then the uploaded file will be removed by the server after 48 hours.</p> <p>An attachment item is made up of an id, uid and filename and it can be used in many different ways.  There is a REST API for working with attachments, this can be used to produce some dynamic behavior in your application.</p>"},{"location":"cr_attachments.html#get-attachment-file-name","title":"Get Attachment File Name","text":"<p>You can retrieve the file name of an attachment item by using javascript.</p> <pre><code>// if secureJS == true\nvar filename = get(BO.F_Attachment.getValue(), \"fileName\");\n\n// if secureJS == false\nvar filename = BO.F_Attachment.getValue().fileName;\n</code></pre>"},{"location":"cr_attachments.html#render-attachment-in-a-later-stage","title":"Render attachment in a later stage","text":"<p>If you have a form where the user attaches an image, you can render that image in the form, in a later stage, after it has been submitted.</p> <ol> <li> <p>Create an attachment item (F_Attachment)</p> </li> <li> <p>Create an HTML item.  In the onShow event of place the code:</p> </li> </ol> <pre><code>var attachmentUid = BO.F_Attachment.getValue().uid;\nvar url = \"/apps/secure/org/data/\" + app.getUID() + \"/\" + form.getId() + \"/attachment/\" + attachmentUid;\n\nitem.setContent(\"&lt;img src='\" + url + \"'&gt;&lt;/url&gt;\");\n</code></pre> <ol> <li> <p>Hide the HTML item in the Start stage (using a rule or workflow visibility controls). It is important to note that the content of an attachment cannot be displayed until the form has been submitted.  The URL here is using the REST API to get the content of the attachment, but until the form has been submitted the attachment is not available on the server.</p> </li> <li> <p>When your form gets to the next stage you will now see the image rendered!</p> </li> </ol>"},{"location":"cr_attachments.html#display-link-to-attached-file-in-a-later-stage","title":"Display link to attached file in a later stage","text":"<p>You can provide the user with a link to the attached file on a different page of the form than where the attachment item is located.</p> <ol> <li> <p>Create an Attachment object (id = F_Attachment)</p> </li> <li> <p>Create a Link item (in the Action drawer)</p> </li> <li> <p>Place this code in the onShow event:</p> </li> </ol> <pre><code>var attachmentUid = BO.F_Attachment.getValue().uid;\nvar url = \"/apps/secure/org/data/\" + app.getUID() + \"/\" + form.getId() + \"/attachment/\" + attachmentUid;\n\nitem.setDisplayValue(BO.F_Attachment.getValue().fileName);\nitem.setLinkValue(url);\n</code></pre> <ol> <li>When the page where the link is rendered the link display will be set to the filename and clicking on the link will open/download the file.</li> </ol> <p>Note: You can access the file name at anytime even before the form has been submitted, but you cannot create a valid link to the attachment until the form has been submitted.</p>"},{"location":"cr_attachments.html#multiple-attachments","title":"Multiple Attachments","text":"<p>You can place the Attachment item within a table.  The table should have two single-line fields; one for the filename and the other for the attachment UID.  In the onItemChange event of the attachment item you can use the following JavaScript to set the field values:</p> <pre><code>// modern browsers may add a 'fakepath', remove it\nBO.F_AttachmentName.setValue(BO.F_Attachment0.getValue().fileName.replace(\"C:\\\\fakepath\\\\\", \"\"));\nBO.F_AttachmentUid.setValue(BO.F_Attachment0.getValue().uid);\n</code></pre> <p>Now your users can attach as many files as they want and have a way of seeing what they have added. You can hide the ID column by removing it from the defined columns on the Advanced tab of the table properties.</p>"},{"location":"cr_attachments.html#attachment-summary","title":"Attachment summary","text":"<p>In this example we have a table of attachments from a previous stage and we want to provide a way for the user to download the attachments from a summary page in a future stage.  We can use JavaScript with the Link item to provide this functionality.</p> <p>Place a Link item on your form, outside the table.  When you click on a row of the table we are going to set the link URL and display value to point to the attachment from the selected row. To do this we place the following code in the onClick event of the table:</p> <pre><code>if(item.getSelection() !== null) {\n  var url = \"/apps/secure/org/data/\" + app.getUID() + \"/\" + form.getId() + \"/attachment/\" + item.getSelection().F_AttachmentUid.getValue();\n  item.getPage().F_StaticWebLink1.setLinkValue(url);\n  item.getPage().F_StaticWebLink1.setDisplayValue(item.getSelection().F_AttachmentName.getValue());\n}\n</code></pre> <p>When the user selects a row of the table, the URL of the attachment is set to the Link value and its display value is set to the attachment name.</p> <p>This will only work after the form has been submitted.</p>"},{"location":"cr_attachments.html#reading-contents-of-an-uploaded-file","title":"Reading contents of an uploaded file","text":"<p>If you are running on a server that has JavaScript sandbox turned off (secureJs=false), a setting found in the Leap properties, then you could use AJAX to retrieve the content of the file that was uploaded.  </p> <p>For this example, the code was placed in the onShow event of a multi-line text field that is visible after the form has been submitted.  When the field is shown it will contain the content of the file that was previously uploaded.</p> <pre><code>var attachmentUid = BO.F_Attachment.getValue().uid;\nvar url = \"/apps/secure/org/data/\" + app.getUID() + \"/\" + form.getId() + \"/attachment/\" + attachmentUid;\n\n// create function to get file content using REST API\nfunction loadDocContent()\n{\n  var xmlhttp;\n  if (window.XMLHttpRequest) {\n    // code for IE7+, Firefox, Chrome, Opera, Safari\n    xmlhttp=new XMLHttpRequest();\n  } else {\n    // code for IE6, IE5\n    xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n\n  xmlhttp.onreadystatechange=function()\n  {\n    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) {\n      BOA.setValue(xmlhttp.responseText);\n    }\n  }\n\n  xmlhttp.open(\"GET\",url,true);\n  xmlhttp.send();\n}\n\nvar attachedFileContent = loadDocContent(); //executes the function\nitem.setValue(attachedFileContent);\n</code></pre> <p>Parent Topic: Adding dynamic behavior</p>"},{"location":"cr_copying_items.html","title":"Copying items","text":"<p>Items may be copied from one form to another form within any application.</p> <p>If you want to copy an item from one form to another, select the item and press Ctrl+C. Select the target form and press Ctrl+V. If a cell on the target form's page is selected, the copy is inserted there, otherwise it will be inserted into the first available cell on that page. If there is no empty cell, then a new row will be added with the pasted item.</p> <p>Note: Table items cannot be copied.</p> <p>Note: Copying an entire page is not supported at this time.</p>"},{"location":"cr_copying_items.html#section_f3b_1vn_hvb","title":"Usage details","text":"<ul> <li>Use Ctrl+C to copy the selected item.</li> <li>Use Ctrl+V to paste the item to the selected page within any Leap application.</li> <li>Users can only copy one item at a time.</li> <li>If the browser clipboard is not accessible, the copy/paste action will not be allowed.</li> </ul> <p>Parent topic: Using the editor</p>"},{"location":"cr_creating_and_managing_toc.html","title":"Building Apps","text":"<p>This topic contains a variety of topics on how to build and efficiently use applications.</p> <ul> <li>Application Management This topic gives an overview of the operations you can perform for a Leap application.</li> <li>Using the editor Provides helpful information for using the features of the design editor to create an application.</li> <li>Adding dynamic behavior Provides helpful information for improving the user-interaction of your application by adding dynamic behavior.</li> <li>Working with application data After an HCL Leap application is deployed you can import and export data using the view responses page. This topic provides details on working with submitted data.</li> <li>Styling your application Provides a variety of topics for improving the look of your application.</li> <li>Globalization features The following information describes the languages formatting features supported by HCL Leap.</li> <li>Creating an accessible application When you create a form or application, the following information helps you design an accessible form for users with disabilities.</li> <li>Leap document integration Leap's document integration feature lets you use previously built PDF files and populate them with data captured by Leap.</li> </ul>"},{"location":"cr_creating_application_excel.html","title":"Creating an application from an excel spreadsheet","text":"<p>Leap allows you to create an application from an excel spreadsheet, automatically creating the widgets and importing the data found in the spreadsheet.</p> <p>The following steps describe how to prepare a spreadsheet that you want to import into Leap and how to create the application from the spreadsheet.</p> <ol> <li> <p>Prepare the spreadsheet for importation.</p> <p>Points to consider:</p> <ul> <li>Each sheet in the spreadsheet file will be turned into a form in a new application.</li> <li>The first non-empty row in the sheet will be considered the 'header row'.</li> <li>If all the sheets in the spreadsheet have no header rows, the import will fail.</li> <li>The contents of a header row cell will be the name of the widget for that column.</li> <li>There can be a horizontal gap of a single cell between the header row cells. If there is a gap of more than one cell in the header row, then the cells to the right of the gap will not be processed.</li> <li>Header titles get processed to only have valid characters and then are assigned to the corresponding widget name. If after processing there are too few characters, the widget gets a default name.</li> <li>The contents of cells under the header row cell will be used for the data import process.</li> <li>There can be one gap of up to two columns in the data and header row.</li> <li>There can be a gap between the left-hand edge of the spreadsheet and the header row.</li> <li>There can be a gap between the header row and data.</li> <li>Parsing of rows will stop after parsing 10 empty rows in a row.</li> <li>If the column under a non-blank header row cell is empty, then the resulting widget will be a single line entry.</li> <li>Web links must have https:// or http:// at the beginning of the URL.</li> <li>Select many widgets can be created when the contents of a cell contains [value],[value],[value].... with no spaces between values and commas. Values cannot be duplicated, and the cell cannot begin or end with a comma. Commas are used as delimiters for multi select widgets; therefore, any comma will not be part of the value itself and will separate values.</li> <li>For a widget to be selectable (i.e. a Dropdown, Select One, Select Many, etc.), then the number of possible values must be greater than one and less than a certain value, currently set at 30.</li> <li>If there are only numbers and currency cells in a column, then the column widget type will be whichever count is greater.</li> <li>Log on to Leap. By default you see the Manage window which displays the New Application button, any previously created applications, and any applications to which you have edit permissions.</li> </ul> </li> <li> <p>Click New Application.</p> <p>A dialog will open, which provides a choice to create an application from a blank canvas or from an Excel spreadsheet. The rest of this topic describes how to create an application from an Excel spreadsheet. For a topic covering creating applications from a blank canvas, see Creating an application.</p> </li> <li> <p>Click From Spreadsheet.</p> <p>An upload file dialog will open. Upload the prepared excel spreadsheet here, then click Next. Leap will parse the spreadsheet one sheet at a time. Each column in the main data range will be used to create a widget in the form. Leap will go through the rows of each column within that range, then attempt to assign a type based on the contents of the cells of the column.</p> </li> <li> <p>Choose the fields, names, and types of your application.</p> <p>On the next dialog, the names of sheets (forms) and columns (widgets) can be changed. Additionally, the type of the created widgets can be changed (within limits of the imported data). When the names and types are set up properly, click Next.</p> </li> <li> <p>Enter the name of the new application, and (optional) a description or tags for the application. Click Create.</p> </li> <li> <p>The application will include an app page with a data grid configured to show the first 5 columns of the data from F_Form1.  You can edit the data grid if desired.</p> </li> </ol> <p>Parent topic: Application Management</p>"},{"location":"cr_creating_application_overview.html","title":"Creating an application","text":"<p>This topic gives a general overview of the application creation process, from opening the HCL Leap interface to launching a completed application.</p> <p>The following steps are a general overview of the lifecycle of an application.</p> <ol> <li> <p>Log on to Leap. By default you see the Manage window which displays the New Application button, any previously created applications, and any applications to which you have edit permissions.</p> </li> <li> <p>Click New Application.</p> <p>A dialog will open, which provides a choice to create an application from a blank canvas or from an Excel spreadsheet. The rest of this topic describes how to create an application from a blank canvas. For a topic covering creating applications from spreadsheets, see Creating an application from an excel spreadsheet.</p> </li> <li> <p>Click From Blank. Enter the name of the new application, and (optional) a description or tags for the application. Click Create.</p> <p>An application opens. A blank grid appears with a Palette of form items.</p> </li> <li> <p>Add items from the Palette to build the form.</p> <ul> <li>The grid automatically expands as you add form items, and automatically aligns items in the cells.</li> <li>You can change the size of columns or rows in the grid. Right-click on the edge of the grid to reveal row or column properties.</li> <li>You can insert additional pages to a form in the Outline view. Page order is flexible, and you can reorder the pages in your form by dragging dropping them to your preferred order.</li> <li>Many form items can be edited directly on the grid. Click the title of a form item to edit it.</li> <li>You can modify the properties of each form item by using the Properties side panel. The panel contains tabs that allows the creation of rules, web service calls, or event triggers.</li> <li>You can save and preview the form at any time by using the Save and Preview icons.</li> <li>Click the Style tab to customize the appearance of your application. Select or customize a theme or add your own custom CSS to change the style of your application.</li> </ul> </li> <li> <p>Use the Access tab to define user roles, such as \u201cAdministrator\u201d, \u201cSupervisor\u201d, or \u201cRecord Owner\u201d.</p> <p>You can add as many users as required for your application to function. For example, when a user completes a vacation request form, the form is sent only to the user\u2019s supervisor. You can also add groups of users to specific roles. For example, you might have a time sheet application that is sent to a group of supervisors upon submission. For more information, see Security overview.</p> </li> <li> <p>Use the Workflow tab to define stages within a form.</p> <p>You can create as many stages as required for your form or workflow. For example, an employee completes a vacation request form. The employee does not see the part of the form where the supervisor approves or rejects the request. When the supervisor receives the form, the next stage is visible, and the request is granted, or refused. You can also use stages to set buttons at specific points in your form. For example, you might want to allow a user to save a draft copy of the form after they reach a specific stage. For more information, see Adding stages to an application.</p> </li> <li> <p>Use the Events tab to review any custom Javascript added to the application.</p> </li> <li> <p>Click the Validation tab to check your application for errors.</p> </li> <li> <p>After an application is built, click the Manage tab. You must now deploy the application. Click Deploy.</p> <p>Adjust the Deployment Settings and click Start.</p> </li> <li> <p>Click Launch to view the live application in a web browser.</p> <p>The link URL is what is sent to users so they can access the application.</p> <p>Note: As an application creator, you can edit an application at any time. If you edit a live application, you must redeploy and relaunch it after your changes are saved. If a user is entering data into an application as you redeploy, their work is not saved.</p> </li> </ol> <p>Parent topic: Application Management</p>"},{"location":"cr_custom_theme.html","title":"Styling your application with a custom theme","text":"<p>Style the colors, fonts, and other characteristics of the application by creating or importing a custom theme.</p> <p></p> <ul> <li>An application can have one theme; the theme is applied to all forms in the application.</li> <li>Themes are customized in the Style tab.</li> <li>Settings made in the General section of the Theme Editor will be applied to specific attributes of all items in your application, but will be overridden by settings made to a more specific item type. For example, settings made in General &gt; Fonts &gt; General can be overridden by values set in General &gt; Fonts &gt; Label Fonts or set in Buttons &gt; Fonts.</li> <li>A section's background color and border visibility can be set in the item's properties. This will override the theme settings.</li> <li>Background images maintain aspect ratio, but are stretched to fit the browser window.</li> <li>During application design, themes, and custom CSS are not applied to your application. To see how your application will display to end users, use the Preview button in either the Theme Editor dialog or the main banner.</li> <li>Browsers support different font file types (eg. .woff, .woff2, .ttf, eot, and .otf), so when specifying a custom font in your theme, you may need to include multiple font file types for a specific font family in order for it to render in all browsers.</li> <li>Themes can be exported and then imported into another application.<ul> <li>To increase the portability of your customized theme, use the option to Maintain a link to the file only for font files and background image, instead of importing them into your application.</li> </ul> </li> <li>Some limitations exist in IE8, including differences around the way IE8 displays background images.</li> <li>Custom CSS can be used in combination with themes.<ul> <li>Custom CSS that you have included in your application is applied after all theme styling is applied except when the replace theme checkbox is selected. In this case, the custom CSS is the only styling that is applied to your application. CSS precedence rules still apply though, so some custom CSS may not override all theme settings.</li> <li>The Show CSS feature in the Style tab can be used by custom CSS developers to understand the CSS that is being generated by the theme.</li> <li>Custom CSS is not applied to the sample form in the Theme Editor dialog but is applied to the sample form in the Style tab.</li> </ul> </li> </ul> <p>Parent topic: Styling your application</p>"},{"location":"cr_deploying_an_application.html","title":"Deploying an application","text":"<p>Deploying an HCL Leap application makes it available for users. When you click Deploy, the application is loaded onto a server. You can deploy an application immediately, or set a timer to deploy the application for a specific period of time.</p> <p>You can update Leap applications with existing data that are currently deployed. However, these types of changes might impact existing data, and forms in-progress, depending on the type of changes made to the application. The impact occurs when the application is deployed, not during the design phase. The following changes might result in data loss, or prevent in-progress forms from being completed:</p> <ul> <li>If you delete fields that capture data from a form, any existing data for those fields is removed.</li> <li>If you change the ID of a field that contains data, any existing data is removed.</li> <li>If you change Access settings, users might no longer have access to existing data or forms in progress.</li> <li> <p>If you change Stage IDs, in-progress applications at or before the stage are not completed.</p> </li> <li> <p>Before deploying an application, click Save to ensure the latest version of the application is saved.</p> <p>Note: If you make changes to an application while it is deployed, a warning icon is displayed on the Manage tab next to Deploy. This is to remind you to redeploy the application after making changes.</p> </li> <li> <p>Go to the Manage tab, and click Deploy for the application.</p> <p>The Deployment Settings window opens.</p> </li> <li> <p>Set the deployment options for your application from the Basic and Advanced tabs.</p> <p>Leap can send out email notifications when an application is deployed or stopped. These notifications are triggered from the Email Notifications section on the Deployment Setting window. The notifications are not triggered if the application is stopped on a preset Stop Date. The Stop notifications are only sent if the deployment is stopped manually using the Deployment Settings dialog.</p> </li> <li> <p>Click Start to deploy the application.</p> </li> </ul> <p>After an application is deployed, the Launch tool is activated.</p> <p>Parent topic: Applications Operations</p>"},{"location":"cr_duplicating_application.html","title":"Duplicating an application","text":"<p>Create a new application by duplicating an existing application.</p> <p>To do this perform the steps below:</p> <ol> <li>Click on More .. then Duplicate.</li> <li>Provide a new name for the application.  </li> </ol> <p>The entire application will be duplicated as a new application.</p> <p>Parent topic: Application Management</p>"},{"location":"cr_enabling_dynamic_layout.html","title":"Enabling dynamic layout","text":"<p>When you build applications, you can now set the display width of your Leap application. Setting this feature reduces or removes the need for horizontal scrolling when you have an unknown or limited amount of space, such as when the application is displayed in a WebSphere_Portal portlet.</p> <p>To set dynamic width on a page:</p> <ol> <li> <p>In the Outline menu, click the Properties icon for the desired page.</p> <p>The Properties side panel opens.</p> </li> <li> <p>In the Width: options, select Dynamic Value, and enter a minimum and maximum value.</p> <p>Note: If you click the green plus sign to add another page to your application, the values you set are automatically copied to the new page.</p> </li> <li> <p>To set Dynamic Layout on a page or in a section:</p> </li> <li> <p>Click the check box beside Enable dynamic layout, and set the minimum window width.</p> </li> <li> <p>Select whether the user sees form items in single column mode, or in carousel mode.</p> <p>The default is single column mode.</p> <p>Note: If you have or add a Section on the page, the Dynamic Layout settings of the Page are duplicated in the Section. For best results, Carousel mode should be used on forms that do not contain sections.</p> </li> </ol> <p>Parent topic: Using the editor</p>"},{"location":"cr_import_data_in_view_responses.html","title":"Importing data in View Data","text":"<p>Application Owners can use an Import Data operation on the View Data page to import spreadsheet data into their application. This can provide a quick start method for adding many records/rows of data into an application from an existing spreadsheet.</p> <p>The import operation is available for application Owners to use as an alternative to keying each row of data into the Launch experience of their Leap application and as an alternative to using the Data Access Rest API to programmatically add the data.</p> <p>Each row of data in the spreadsheet is imported into the Start stage of your Leap application as a new submitted record. Supported spreadsheet formats are Microsoft Excel 97 workbook and Microsoft Excel workbook (.xls and .xlsx).</p> <p>Note: Microsoft Excel 5.0/95 workbooks are not supported.</p> <ul> <li>When using other spreadsheet tools, save the spreadsheet file into one to the supported formats before attempting to import your data.</li> <li>Only spreadsheet data on the active sheet can be imported.</li> </ul> <p>To indicate where in your application each column of spreadsheet data should be imported, the first row of your spreadsheet must be modified to provide data mapping instructions.</p> <ul> <li>Each column header must include the ID of the item within your application where the data is mapped.</li> <li>An item's ID can be found on the Advanced tab of the Properties Dialog when editing the application.</li> </ul> <p>The Import Data button on the View Data page is available only to an application's Owners/Administrators and only active when the following is true:</p> <ul> <li>Imports respect the access settings that are configured within the application, so the application owner must be included in the list of people in the Initiator role.</li> <li>The application must not be configured to Limit to single submission per Authenticated User.</li> <li>The application must be deployed and not stopped.</li> </ul> <p>Validation and enforcement of your applications data types, required elements, and rules are performed on import.</p> <ul> <li>Custom JavaScript added to the applications UI is not run during data import.</li> <li>Some data elements, including dates and times, need to be in a specific format to import successfully. To identify the correct input format, it can be helpful to add a record of data using the application Launch UI, and then exporting the row from View Data and review the output format.</li> </ul> <p>Table data and Attachments can not be imported.</p> <p>Surveys and Select Many items can contain values that are lists of multiple selected choices.</p> <ul> <li>Use commas to separate the selected choices.</li> <li>In cases where one of the selected choices contains a comma, the following sequence can be used as an alternative separator: #</li> </ul> <p>The data import operation stops when it encounters blank columns or rows in the spreadsheet.</p> <p>The data import operation supports a maximum of 1000 rows of data.</p> <p>To import data that has been exported from a HCL Leap application:</p> <ul> <li>You must replace the column header label with the item IDs required for mapping.</li> <li>The metadata can not be imported and must be removed from the spreadsheet or mapped to a form item.</li> </ul> <p>Stage transition emails configured in your application will be sent, so depending on the nature of the emails and the number of records being imported, application owners may want to disable the stage action email associated with the Start stage prior to running the import operation.</p> <p>Import operations can not be undone and bulk deletion of records is not available. Using some of the following recommendations can help ensure the desired outcome when using the bulk data import.</p> <ul> <li>Select one or two rows or spreadsheet data to import as an initial test to help ensure the mapping is set up as expected and the data types are compatible. Review the imported data in View Data after the import to see that it imported as expected.</li> <li>To quickly remove all data from an application, on the Manage page, choose to Export your application without including submitted data and then choose to Upgrade your application and select the option to Replace submitted data.</li> <li>Prior to performing a large bulk data import into an application that already has submitted data, creating a backup of the application and all existing records is recommended. On the Manage page, select the Export operation for your application and be sure to select the option to Include submitted data. This will provide an archive of the application and data in the state it was in just prior to the import.</li> </ul> <p>Parent topic: Working with application data</p>"},{"location":"cr_in_app_service.html","title":"Adding and configuring a service","text":"<p>The following instructions describe how to add and configure a service so you can map it within your application.</p> <p>These instructions provide a general overview of adding and configuring services. They are used whenever you want to add a service to your application.</p> <ol> <li> <p>Click \"Add/Edit Service Configuration\"</p> </li> <li> <p>The Service Configuration window opens.</p> <ul> <li>Enter the URL of your service</li> <li>Or, select a service to select a service from a list.</li> <li>To specify options for the URL, click the Properties icon located to the right of URL field.</li> </ul> <p>Use the Service Details dialog to configure how Leap should call the service.</p> <ul> <li>You can add details to the URL in the URL field.</li> <li>Specify the HTTP method for the service</li> <li> <p>Make URL parameters and segments available for input mapping by selecting Assignable. The display name specified is used in the input mapping interface.</p> <ul> <li> <p>URL parameters are query parameters within a URL. The first parameter follows the question mark in the URL. Additional parameters follow an ampersand. For example: https://server.com?this=1&amp;that=2, where this is the first parameter, and that is the second parameter.</p> <p>When you make a parameter assignable, the parameter value is replaced at runtime. In the example https://server.com?this=1&amp;that=2, if this is assignable, the value of this is replaced with the mapped input value from the form. For example:https://server.com?this=AAAAA&amp;that=2, where AAAAA is the value from the form.</p> </li> <li> <p>URL segments are path elements within a URL. For example https://server.com/resources/identifier, where resources is the first segment, and identifier is the second segment.</p> <p>When you make a segment assignable, the segment is replaced at runtime. In the example https://server.com/resources/identifier, assigning identifier a value of 1234 results in a URL that reads: https://server.com/resources/1234.</p> </li> </ul> <p>Note: To add or remove URL parameters or segments, you must modify the URL and tab out of the URL field.</p> </li> <li> <p>Specify authentication options in the Authentication section.</p> </li> <li>If you want to add request headers, expand the Request header section and click Add a required request header. You can also make request headers assignable for input mapping.</li> <li> <p>In the Sample Response JSON section, you can Fetch a sample JSON response, or insert your own. Elements in the provided JSON are automatically added as assignable outputs in the Outputs mapping tab. When you click Fetch, the Fetch a response window opens. You can modify the URL as required to connect to the service. Click Submit to fetch the response.</p> <p>Note: For Post and Put HTTP methods, you can enter Sample Request JSON. Elements in the provided JSON are automatically added as assignable inputs in the Inputs mapping tab.</p> </li> <li> <p>If you want to add response headers, expand the Response header section and click Add a required response header. Response headers are automatically assignable for output mapping.</p> </li> <li>When you have finished making configuration changes click OK.</li> </ul> </li> <li> <p>Click the Inputs tab.</p> <ol> <li> <p>Select a source from the Select source: window.</p> </li> <li> <p>Select a target from the Select target: window.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> <p>The connected source and target are shown in the Assigned Inputs section of the page.</p> </li> </ol> <p>Note: If you need to make changes to the service, or configure service details, click the Properties icon located to the right of URL.</p> </li> <li> <p>Click the Outputs tab.</p> <ol> <li> <p>Select a source from the Select source: window.</p> </li> <li> <p>Select a target from the Select target: window.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> </li> </ol> <p>The connected source and target are displayed in the Assigned Outputs section of the page.</p> </li> <li> <p>Click OK to exit the Service Configuration window.</p> </li> </ol> <p>Parent topic: Incorporating web services into your applications</p>"},{"location":"cr_launching_an_application.html","title":"Launching an application","text":"<p>After an HCL Leap application is deployed, the Launch link is enabled. When you click Launch, the live application opens in a new window.</p> <p>You must deploy your application before you can launch it. See Deploying an application for instructions on how to deploy your application.</p> <ol> <li> <p>To launch an application:</p> <ul> <li>Go to Manage tab, and click Launch. The application is launched in a web browser.</li> <li>Click the arrow head to the left of the application name. The application information window expands and displays the URL of the application. Copy the URL and paste it into a web browser, or disseminate it through email, or your web site.</li> </ul> </li> </ol> <p>Parent topic: Application Management</p>"},{"location":"cr_moving_items_on_a_form.html","title":"Moving items on a form","text":"<p>Form items are not static after they are added to a form. You can move items around on a single page, duplicate form items, and move items between pages on your form.</p> <p>Moving items on a single page of a form is done by clicking the item and dragging it to a new column or row. Notification is displayed by the mouse cursor if the location to which you move the form item is valid or not.</p> <p>You can move all Palette items between pages in a form. If you want to move an item from Page 1 to Page 2 of your form, select the item and drag it to the Outline view. Hover your mouse over Page 2. You can either drop the item on Page 2, where it is inserted into the first available cell of the page, or drag it onto a specific cell on Page 2.</p> <p>Usage details</p> <ul> <li>If you want to have a form item on multiple pages of your form, duplicate the item and move the duplicate to the other page. The duplicate icon is located to the right of the Rules icon on each form item.</li> <li>When you duplicate a form item:<ul> <li>Rules: If a form item is part of a Rule, the Rule is replicated and applies to the duplicate form item.</li> <li>Formulas: If a form item uses a Formula, the Formula is replicated and applies to the duplicate form item.</li> <li>Events: If an Event is set on a form item, the Event is replicated and applies to the duplicate form item.</li> <li>Stage settings: Stage settings for a form item are not replicated onto the new form item. You must apply Stage settings to the new item in the Workflow tab.</li> </ul> </li> <li>You can move forms and form items in the Outline view. This includes moving child pages, such as the ones created when you add a table to your form.</li> <li>Items in a table can be moved only within the same table. You can move entire Tables between form pages, but you cannot move a form item from inside one table to a table on another page.</li> <li>Keyboard shortcuts to move items between pages:<ul> <li>Tab: Focus on a cell, or to move focus from one cell to another</li> <li>Space or Enter: Select focused item</li> <li>Ctrl+M: Drop an item on the cell that has focus</li> <li>Esc: Cancel selection.</li> </ul> </li> </ul> <p>Parent topic: Using the editor</p>"},{"location":"cr_updating_and_stopping_deployment.html","title":"Updating and stopping a deployment","text":"<p>The following instructions describe how to update, or stop, the deployment of an HCL Leap application.</p> <p>There are many reasons why you might need to update, or stop, a deployed application. You might want to update the deployment parameters, such as adding a start and stop date. Or, you might need to stop the deployment to perform updates to the application, and do not want to impact existing data. To update, or stop, a deployment:</p> <ol> <li> <p>Go to the Manage tab and click Deploy for the application.</p> <p>The Deployment Setting window opens.</p> </li> <li> <p>Modify the deployment settings:</p> <ul> <li>To update a deployment, update the deployment settings and click Update.</li> <li> <p>To stop the deployment, click Stop.</p> <p>Note: If you want to set a Deployment period, you must stop the deployment first, set the Start and Stop dates, then deploy the application again.</p> </li> </ul> </li> </ol> <p>Parent topic: Application Management</p>"},{"location":"cr_uploading_and_using_files.html","title":"Uploading files for use in your application","text":"<p>The following instructions describe how to upload files to Leap, and how to use the uploaded files within your application.</p> <ol> <li> <p>There are two ways to upload files into a Leap application:</p> <ol> <li>Upload all files in the Settings tab before building the application.</li> <li>Upload files one by one as needed when you build the application. To upload files in the Settings tab:</li> </ol> </li> <li> <p>Open your Leap application, and click the Settings tab at the top of the page.</p> </li> <li> <p>Click Files from the menu on the left side of the screen, then click Add.</p> <p>The Add File or URL Link window opens.</p> </li> <li> <p>Select whether to add a file from your computer, or use a file from the internet.</p> </li> <li> <p>Browse to the location of the file, or enter the URL, then click OK.</p> <p>The file is listed on the Files page. After multiple files are uploaded, you can sort the files by type, upload date, or relationship.</p> </li> <li> <p>To use the uploaded files during form design:</p> </li> <li> <p>Add form items, such as Button, Image or Media to your form.</p> <p>The Properties side panel opens.</p> </li> <li> <p>Click the drop-down menu to select from an available list of files.</p> <p>Note: Only the supported files types for the form item are displayed in the drop-down menu. A list of supported file types is provided on the window.</p> </li> <li> <p>Add form items, such as Button, Image, Media to your form, the Properties side panel opens and click Add file.</p> </li> <li> <p>Select whether to add a file from your computer, or use a file from the internet.</p> </li> <li> <p>Browse to the location of the file, or enter the URL, then click OK.</p> </li> </ol>"},{"location":"cr_uploading_and_using_files.html#usinguploadedfiles","title":"Uploading files during form design","text":"<p>To upload files while you build your form.</p> <ol> <li> <p>Add form items, such as Button, Image, Media to your form, the Properties side panel opens, then click Add file.</p> </li> <li> <p>Select whether to add a file from your computer, or use a file from the internet.</p> </li> <li> <p>Browse to the location of the file, or enter the URL, then click OK.</p> </li> </ol> <p>Parent topic: Managing the files associated with your application</p>"},{"location":"cr_using_apps_as_services_toc.html","title":"Incorporating web services into your applications","text":"<p>The following topics describe how to incorporate web services into your HCL Leap application.</p> <ul> <li>Adding and configuring a service The following instructions describe how to add and configure a service so you can map it within your application.</li> <li>Service Oriented Architecture \u2013 Exposing a service to HCL Leap The following information is an overview of Service Oriented Architecture built into Leap, and describes how to expose a service to Leap.</li> <li>Triggering a service You can use a service to add information to a form automatically after a user triggered event.</li> <li>Using a service to populate form items You can use a web service to populate to a Drop Down, Select One, and Select Many form item.</li> <li>Cancelling user submit event Demonstrates how to cancel the user initiated submit event, call a service and then re-trigger the form submission.</li> <li>Integrating your application with existing HCL Leap applications Each Leap application can be used within another Leap applications as a service.</li> </ul> <p>Parent topic: Adding dynamic behavior</p>"},{"location":"cr_using_apps_exposing_service_to.html","title":"Service Oriented Architecture \u2013 Exposing a service to HCL Leap","text":"<p>The following information is an overview of Service Oriented Architecture built into Leap, and describes how to expose a service to Leap.</p> <p>The Leap has an extensible services architecture which allows Leap applications to send and receive data from any external system. The Services Architecture consists of the following components:</p> <ul> <li>Service Transports \u2013 The Service Transport is the Java\u2122 code responsible for communicating with an external service, such as a public REST service. It can send data out to the external service or receive data from the external service. The transport also uses JDBC to store and retrieve data from any database. Alternatively, the transport can simply implement a \u201cservice\u201d itself, such as a unit conversion library. You can add any custom transport installation to the Leap installation by placing an appropriate JAR file in a specific directory on the Leap server; however, Leap already includes a generic HTTP transport which can send and receive data over the internet or intranet, and will suffice for many use cases. For more information, see Service Description.</li> <li>Service Descriptions \u2013 The Service Description provides the interface for a Service Transport. A Service Description is usually described by an XML file, although it is also possible to programmatically create a Service Description. The Service Description specifies a service's name, description, input parameters, and output parameters. These attributes are what appear to the application designer when they are hooking up services to a Leap application.</li> <li>Data Mapping \u2013 Each service description can contain an optional \u201cmapping\u201d component which describes how the data coming from the Service Transport can be mapped to the outputs defined in the Service Description, or vice versa. The advantage of the mapping component is that it allows multiple Service Descriptions, each with its own name, description, input, and outputs to use to use the same generic transport. By using XPath-like references, the mapping component supports the mapping of complex data structures such as an XML document. The mapping of constant values is also supported.</li> <li>Service Configuration \u2013 The Service Configuration is another layer of mapping meant for application designers. It maps items in the form to the inputs and outputs of the Service Description. The application designer is responsible for creating service configurations and connecting form items to the service inputs and outputs. Service configurations are stored inside the application.</li> </ul>"},{"location":"cr_using_apps_exposing_service_to.html#supporting-documents","title":"Supporting documents","text":"<p>Use the following documents to gain a better understanding of the steps required to expose a service to Leap.</p> <p>Understanding the HTTP transport \u2013 The HTTP Service Transport provides a mechanism to communicate with HTTP servers. The transport allows configuration of the URL to request, HTTP method to use, query parameters, and request headers. When combined with the service mapping engine of Leap, the HTTP Service Transport can extract data from an HTTP response and make it available to your application. The HTTP Service Transport can be used to communicate with any standard HTTP server. While there are some limits on the capabilities of the HTTP Service Transport, it is all that is needed to communicate with a basic HTTP server, or RESTful service, in most cases. For more information, see HTTP Service Transport</p> <p>Creating and deploying service descriptions \u2013 The Service Description provides an interface to Leap mapping interface, and an interface to a Service Transport. For more information on creating Service Descriptions, see Service Description</p> <p>Parent topic: Incorporating web services into your applications</p>"},{"location":"cr_using_other_apps_as_services.html","title":"Integrating your application with existing HCL Leap applications","text":"<p>Each Leap application can be used within another Leap applications as a service.</p> <p>You can use another application to provide data to populate a drop-down menu on your form. Or, you can search a list of products that are maintained by another application. The ability to share data is a powerful feature of Leap.</p> <p>To use an application as a service, the designer of an application must set the requisite permissions on the Access tab of the application. Access can be set for Read, or Read/Write. If you set Read access, other applications are able to Retrieve and Search information from a specific application. If you set Read/Write access, other applications are able to Retrieve, Search, Delete, and Submit information to and from a specific application. For more information about setting permissions, see Defining permissions to share data with other applications.</p> <p>Note: When you use another Leap application as a service, mandatory items must be explicitly mapped in the service mapping Inputs and Outputs. Default Items in the form do not satisfy the mandatory requirement as they are not evaluated on the server. If any value is marked as mandatory, it must have a value that is mapped to it in the mappings dialog.</p> <p>When mapping input parameters, each target has a Search Operator that can change how the inputs are interpreted. For example, you can apply a search operator to create an assignment that links the input with the target, and the operator. To apply the operator, you have to set the View to constant and then type the operator keyword in the editable field. The following table contains the list of available search operators.</p> Search Operators Description equals Equal to notequals Not equal to lt Less than lte Less than or equal to gt Greater than gte Greater than or equal to Endswith The target ends with Startswith The target starts with contains The target contains <p>The services also provide access to metadata about the records, such as author, creation time, and the current stage. When you call these services, metadata can be used to filter the results.</p> <p>The search results can be sorted by form data, such as a field in an application, or by some metadata, such as the lastUpdated time. The default sort order is ascending. To change it to descending, you must prefix your sort field with \u201cDESC\u201d. For example, the following string sorts ascending, <code>\"F_Name\"</code>. The following string sorts descending, <code>\"DESCF_Name\"</code>.</p> <p>The following values are available for you to use when you are searching with metadata:</p> Metadata field Sort key Last update time <code>\"lastUpdated\"</code> Author name <code>\"itemAuthor\"</code> Stage name <code>\"flowState\"</code> Line ID <code>\"dbId\"</code> <p>You can also limit the results by setting a Page Size that limits how many entries you return, or a Page, which limits pages to return. If you do not provide paging values, then all records that meet your filters are returned.</p> <p>To see the list of applications available as services select the HCL Leap Applications entry in the Service Catalog list. A list of all applications and methods available for Service mapping is shown. Each application can expose the following methods that are based on Access settings:</p> <p>Retrieve :   Use Retrieve retrieve a single record from another application. For example, use Retrieve to pre-populate information that is based on an employee serial number that is entered by the user into the form. The retrieve returns a single row, and cannot be mapped to a repeating or list item.</p> <p>Search :   Use Search to return a list of records from another application that meets the search criteria. For example, use Search to populate a drop-down with a list of values from another Leap application. The results from a search must be mapped to a repeating/list, drop-down, or table item.</p> <p>Delete :   When Delete service method is called, it deletes the record in the target application that meets the supplied parameters. Use this method with caution as there is no way to retrieve the data after the record is deleted.</p> <p>Create :   The Create method is used to create a record in the target application. Create replicates a user interacting with, and submitting, the target form.</p> <p>Update :   The\u00a0Update\u00a0method is used to update an existing record in the target application.\u00a0Update\u00a0replicates a user interacting with, and submitting changes to a record in the target form</p> <p>Parent topic: Incorporating web services into your applications</p>"},{"location":"cr_using_the_editor_toc.html","title":"Using the Editor","text":"<p>This topic provides details on using the Leap Editor.</p>"},{"location":"cr_using_the_editor_toc.html#editor-overview","title":"Editor Overview","text":"<ol> <li>Navigation breadcrumb. You can click the last item to change the page on the canvas.</li> <li>Save, Preview, Close and Info links.</li> <li>Leap Navigation. Use this to move around to the different pages of Leap: Design, Access, Workflow, Style, Events, Validation, and Settings.</li> <li>Design Canvas.  This space represents your form.  It is made up of rows and columns.  Only 1 item may be placed into a cell.  You can add or remove rows/columns by clicking on the buttons at the outer edges of the canvas.</li> <li>Outline View.  This shows the forms, pages, app pages and tables. Clicking on an object in this view will reveal its properties in the property pane.</li> <li>Item Palette.  Click an item for it to appear in the currently selected cell or click and drag to the desired cell.</li> <li>Palette drawer. Items have been grouped into categories and placed in a drawer that can be collapsed.</li> <li>Properties Pane.  Each item has properties that can be set.  Clicking on an item will reveal its properties in this pane.</li> <li>Item configuration tabs: Properties, Formula, Events. These tabs reveal functionality that can be configured for the selected item.</li> </ol>"},{"location":"cr_using_the_editor_toc.html#additional-topics","title":"Additional Topics","text":"<ul> <li> <p>Copying items Items may be copied from one form to another form within any application.</p> </li> <li> <p>Moving items on a form Form items are not static after they are added to a form. You can move items around on a single page, duplicate form items, and move items between pages on your form.</p> </li> <li> <p>Creating an accessible application When you create a form or application, the following information helps you design an accessible form for users with disabilities.</p> </li> <li> <p>Enabling dynamic layout When you build applications, you can now set the display width of your Leap application. Setting this feature reduces or removes the need for horizontal scrolling when you have an unknown or limited amount of space, such as when the application is displayed in a WebSphere_Portal portlet.</p> </li> <li> <p>Adding specialized form items You can use specialized form items to style text, echo text back, create dynamic lines, or add HTML.</p> </li> <li> <p>Managing the files associated with your application You can upload a variety of files, such as images, for use with your application. Managing these embedded files is done in the Files section of the Settings tab</p> </li> </ul> <p>Parent topic: Building Apps</p>"},{"location":"cr_view_app_history.html","title":"Viewing application history","text":""},{"location":"cr_view_app_history.html#view-application-history","title":"View application history","text":"<p>Shows the history of actions (create, deploy, update) performed against the application, the date and by whom.</p> <ol> <li>Click on More .. then History.</li> </ol> <p>Parent topic: Application Management</p>"},{"location":"cr_viewing_submitted_responses.html","title":"Viewing submitted responses","text":"<p>After users complete and submit forms, you can view the submitted responses. Responses are available compiled into summary charts, or as a list of individual forms.</p> <p>To review user submitted responses, click View Data for a specific application. The View Data page opens, and you are presented with two options to view the submitted results:</p> <ul> <li>Viewing individual responses on the View Data page. The default is to see a list of responses.</li> <li>Viewing a summary of response data displayed in either a pie, bar chart, or table on the Summary page.</li> </ul> <p>Viewing responses in a list</p> <p>The following features are available on the View Data page:</p> <ul> <li>When you click on a response, it opens in a window so you can see all information easily.</li> <li>Print, email, and delete buttons are available on each row. You can access these buttons without having to open each individual response.</li> <li>If you choose to email the link to a response, the recipient receives not only a method of printing the response, but also a link to open and view the response. To obtain the View Data URL link<ol> <li>On the Manage tab, click the arrow head to the left of the application name.</li> <li>The application information window expands and displays the URL of the application. In the URL Links:section, change Launch Form to View Data.</li> <li>Copy the URL and paste it into a web browser, or disseminate it through email.</li> </ol> </li> </ul> <p>Viewing summary responses in a chart</p> <p>Charts are available for the following form items:</p> <ul> <li>Check Box</li> <li>Currency</li> <li>Drop Down</li> <li>Number \u2013 both decimal and integer</li> <li>Select Many</li> <li>Select One</li> <li>Survey</li> </ul> <p>If there are no charts to display, or if you do not have the required access to view the submitted data, an error message is displayed. Access is configured when the application is created. The same access permissions that allow users to view and edit the form are used to display submitted results.</p> <p>The following list is a Summary of page chart features:</p> <ul> <li>Display type \u2013 By default, charts are displayed as pie charts. You can select to have the chart display as a bar chart.</li> <li>Selecting which charts to display \u2013 The Summary page displays charts for the first 10 form items in a form. If your form contains more than 10 items that can be displayed as charts, click Customize to add or remove form items from the Summary page. Selected charts are remembered as a personal setting from session to session and are also reflected in the distributed Share URLs.</li> <li>What a chart means \u2013 The question on which the results are based is displayed with each chart. If the form item charted is a survey, the survey title is displayed with each of the survey questions.</li> <li>Displaying choice results \u2013 Charts display the most popular 10 answers for a question. If there are more than 10 choices available to a user, the most popular 9 are displayed and the rest of the responses are grouped into an Other category.</li> <li>Displaying numerical results \u2013 If the form item requests a numerical value from the user, the first 10 values are displayed. If there are more than 10 submitted responses, the numerical values are grouped into Ranges. Although the range is automatically determined, some decisions for the range are based on form item configuration when the application is designed.</li> <li>Filtering data \u2013 You can filter the results that are displayed in the charts by clicking Filters and setting parameters. The charts display only the filtered results. Clearing the filters returns the original data set. You can also quickly filter data by clicking a section of the chart. The filter that results from the click is presented in the search dialog prior to application. Filters are applied to the overall set of submitted records and are therefore reflected in all charts. Filters are remembered as a personal setting from session to session, and are also reflected in any distributed Share URLs. Note that Filtering and Quick Filtering is not supported for the Select Many form item.</li> <li> <p>Sharing charts \u2013 You can share the complete set of charts or individual charts by clicking Share. From the Share options, select whether to email or embed the URL of the chart. When you share a chart, the chart information is not static, and will continue to reflect new submissions. Any filters applied to the charts are also included when the chart URL is shared.</p> <p>Note: When you share charts, the people to whom you send the chart URL must have appropriate access permissions. Otherwise, an error message rather than the chart is displayed.</p> </li> <li> <p>iFrame embedding of charts \u2013 You can share charts by embedding the charts into an iFrame. You can use the embedding feature to show a chart on your own HTML page, or with an iFrame capable Portlet, such as the Web Clipping portlet. The iFrame content is also used to host the chart in a Leap application using the HTML form item.</p> </li> <li>Statistical data provided \u2013 Each chart displays the number of times the question was answered from the total number of submitted responses. If questions in your form are not mandatory, you can see how many people answered the question, and how many did not answer the question. Charts that are based on Number or Currency form items display statistical data, such as the minimum, maximum, range, and average of the submitted values.</li> <li>Reflecting new data submission in existing charts \u2013 Click Refresh to reflect newly submitted data in existing charts.</li> </ul> <p>Viewing individual responses \u2013 A list of submitted responses is displayed in a table. By clicking the row of a response, the user\u2019s submitted form is displayed in the Application View frame. If the form contains workflow elements, such as approving or denying the form, buttons that are associated with the workflow are provided for you.</p> <p>Parent topic: Application Management</p>"},{"location":"create_postgresql_db.html","title":"Creating a PostgreSQL database","text":"<p>The following instructions describe how to manually create the PostgreSQL database for Leap.</p> <p>In a production environment, you must create a PostgreSQL database before you install HCL Leap to WebSphere Application Server.</p> <p>Note</p> <p>Do not create a new database if you want to continue using the same database with the existing user content.</p> <p>Create an empty PostgreSQL database following standard naming conventions. </p> <p>Note</p> <p>Unquoted database names that contain uppercase letters will be converted to lower case.</p> <p>There are two methods:</p> <ul> <li>Use PGAdmin tooling</li> <li>Use the <code>psql</code> command </li> </ul> <p>Default database settings are adequate; however, it is required that the user that is used for Leap's datasource has full permissions on the database. For example:  <pre><code>GRANT ALL PRIVILEGES ON DATABASE leap_db TO leap_db_user\n</code></pre></p> <p>Parent topic: Create a Database</p>"},{"location":"custom_properties_widgets.html","title":"Custom Properties","text":"<p>The custom widget can define an array of custom properties for the app author to modify.</p> <p>Each property is an <code>object</code> with the following attributes:</p> <ul> <li><code>id</code>: (required) uniquely identifies this property for this widget.</li> <li><code>label</code>: (required) the property's label.</li> <li><code>propType</code>: (required) one of:<ul> <li><code>'string'</code>: rendered as a textbox.</li> <li><code>'string-multiline'</code>: rendered as a textarea.</li> <li><code>'enum'</code>: rendered as a dropdown. must be accompanied by a <code>values</code> attribute (see example below).</li> <li><code>'boolean'</code>: rendered as a checkbox.</li> <li><code>'number'</code> : rendered as a number input, for any number.</li> <li><code>'integer'</code> : rendered as a number input, for integers only.</li> <li><code>'customOptions'</code> : see the following listed items.</li> </ul> </li> <li><code>values</code>: required if <code>propType</code> is <code>'enum'</code> (see the following example).</li> <li><code>defaultValue</code> : (optional) the property's default value.</li> <li><code>constraints</code> : (optional)<ul> <li><code>min</code>: (optional) minimum allowed property value for numbers.</li> <li><code>max</code>: (optional) maximum allowed property value for numbers.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>const myWidgetDefintion = {\n  ...\n  properties: [\n    ...\n    {\n      id: 'messageType',\n      label:  'Message Type',\n      propType: 'enum',\n      values: [{title: 'Information', value: 'info'}, {title: 'Warning', value: 'warn'}, {title: 'Error', value: 'error'}],\n      defaultValue: 'info'\n    },\n    ... \n  ],\n  ...\n};\n</code></pre> <p>Parent topic: Custom Widget API</p>"},{"location":"customwidgetapi_landing.html","title":"Custom Widget API","text":"<p>This API provides a mechanism to incorporate custom widgets into the HCL Leap product.</p>"},{"location":"customwidgetapi_landing.html#section_m5p_4cn_jyb","title":"Getting started","text":"<p>Product Configuration</p> <p>Additional resources can be loaded into Leap UI's by adding <code>ibm.nitro.NitroConfig.runtimeResources</code> properties to <code>Leap_config.properties</code>. These additional resources are expected to include definitions of your custom widgets and any auxiliary styles or libraries that are required to support them.</p> <p>For example:</p> <pre><code>ibm.nitro.NitroConfig.runtimeResources.1 = \\\n  &lt;link rel='stylesheet' type='text/css' media='screen' href='https://mywidgets.example.com/common.css'&gt;; \\n\\\n  &lt;link rel='stylesheet' type='text/css' media='screen' href='https://mywidgets.example.com/MyYesNoWidget.css'&gt;; \\n\\\n  &lt;script src='https://myWidgets.example.com/common.js'&gt;&lt;/script&gt; \\n\\\n  &lt;script src='https://myWidgets.example.com/MyYesNoWidget.js'&gt;&lt;/script&gt; \\n\n</code></pre> <p>Registering a Widget</p> <p>As your custom .js is loaded into the page, it is expected to register one or more widget definitions:</p> <pre><code>const myWidgetDefinition = {...};\nnitro.registerWidget(myWidgetDefintion);\n</code></pre> <p>Full descriptions and examples are provided in the following topics. The following example is the basic skeleton of a custom widget:</p> <pre><code>const myWidgetDefinition = {\n    id: 'example.YesNo', // uniquely identifies this widget\n    version: '2.0.0', // the widget's version\n    apiVersion: '1.0.0', // the version of this API\n    label: 'Yes/No',\n    description: 'Allows user to choose \"Yes\" or \"No\"',\n    datatype: {\n        type: 'string' // must be one of 'string', 'date', 'number', 'boolean', 'time', 'timestamp'\n    },\n    // for placement in the palette\n    category: {\n        id: 'example.choice.widgets',\n        label: 'Choice Components'\n    },\n    iconClassName: 'myYesNoIcon', // styling of this class expected in custom .css\n    builtInProperties: [...], // use existing properties: 'title', 'required', etc\n    properties: [...], // custom properties, of prescribed types\n\n    // called by Leap to initialize widget in the DOM with initial properties, and set-up event handling\n    instantiate: function (context, domNode, initialProps, eventManager) {\n        return {\n             // (optional) for display in various parts of the UI\n            getDisplayTitle: function () {\n                return ...\n            },\n\n            // (required) for Leap to get widget's data value\n            getValue: function () {\n                return ...\n            },\n\n            // (required) for Leap to set widget's data value\n            setValue: function (val) {\n                ...\n            },\n\n            // (optional) for additional validation of value\n            validateValue: function (val) {\n                // return true, false, or custom error message\n            },\n\n            // (required) called when properties change in the authoring environment, or via JavaScript API\n            setProperty: function (propName, propValue) {\n                ...\n            },\n\n            // (optional) method to enable/disable widget\n            setDisabled: function (isDisabled) {\n                ...\n            },\n\n            // (optional) determines what the author can do with the widget via custom JavaScript\n            getJSAPIFacade: function () {\n                return {\n                    ...\n                 };\n            }\n        };\n    }\n};\n</code></pre> <ul> <li>Data Widgets vs Display Widgets Some widgets are for collecting data (ie. \"data widgets\") and others are presentational in nature (ie. \"display widgets\").</li> <li>Data Types Data widgets can declare one of the listed data types, each with additional optional constraints.</li> <li>Rules App authors will be able to incorporate custom widgets in rules.</li> <li>Built-In Properties Some properties that already exist in the product are general purpose, or, are integral to the proper functioning of a widget.</li> <li>Custom Properties The custom widget can define an array of custom properties for the app author to modify.</li> <li>Widgets with Options Widgets that allow the end-user to select from a set of options require specific treatment. This includes widgets such as dropdowns, radio groups, or checkbox groups. These options could be hardcoded in the custom widget, or defined by the app author.</li> <li>Widget Instantiation The widget <code>instantiate()</code> function is called when an instance of the custom widget needs to be created. The function is expected to return an <code>object</code> that allows Leap to interact with the instantiated widget.</li> <li>Validation Some intrinsic validation will be done according to the <code>type</code> and <code>constraints</code> declared in the widget's <code>datatype</code> property; however, it might be necessary for a widget to supply its own custom validation logic.</li> <li>Internationalization Certain attributes of the widget definition can be displayed to app authors working in different locales. To support multiple languages during authoring, some properties can be specified as \"multi-string\" objects rather than a plain <code>string</code> values.</li> <li>Usage of JavaScript API Custom widgets can use Leap's JavaScript API to help achieve their objectives.</li> <li>Versioning This topic describes the widget's <code>version</code>.</li> <li>Upgrading The exact techniques for upgrading widgets from one major version to the next has not yet been established.</li> <li>Security Considerations This topic describes security considerations for Custom Widget API.</li> <li>Incorporating third-party libraries This topic describes incorporating third-party libraries.</li> <li> <p>Known limitations </p> </li> <li> <p>Examples </p> </li> </ul> <p>Parent topic: Reference</p>"},{"location":"da_controlling_data_available_for_export.html","title":"Controlling data available for export","text":"<p>Use Filters to set rules, and select which data you want to export.</p> <p>You can set rules about which search results you see, as well as what is exported to an XML file or spreadsheet.</p> <ol> <li> <p>Click the Manage tab.</p> </li> <li> <p>Select the application and click View Data for the application you want to manage.</p> </li> <li> <p>Click Create Filters.</p> <p>The Search window opens.</p> </li> <li> <p>Create a rule to search for the results you want to see using the menu.</p> <p>For example, select Created By from the Select Item menu. Select Equals from the Choose Operator menu and enter text in the field, such as Frank Adams. The rule searches for all records created by Frank Adams.</p> </li> <li> <p>To add another rule, click Add search filter.</p> <p>This time, select Last Updated by from the Select Items menu. Select Equals from the Choose Operator menu, and enter text in the field, such as Amadou\u00a0Alain. Select the And radio button.</p> </li> <li> <p>Click Search. Leap searches the records for any that were created by Frank Adams and last updated by Amadou Alain.</p> </li> <li> <p>To return to your full result set, click Clear Filters.</p> </li> </ol> <p>Parent topic: Exporting data from your application</p>"},{"location":"da_data_analysis_and_exporting_data.html","title":"Working with application data","text":"<p>You can add labels to data elements in your application that become the label in the export file.</p> <p>After capturing data from users, you can label data elements to help analyze the data when it is exported to a spreadsheet, or database. You can also set which data points other users see with security rules. For example, you can restrict managers from seeing the time sheets of employees who are not on their team. Or, you can choose to hide all forms that are in an end state and do not need attention. You can also export tables. In the spreadsheet, Leap creates one row for each header and one row for each table.</p> <p>With these topics, learn how to label data, how to export data, and how labels affect the exported data.</p> <ul> <li>Changing the saved value of a form item You can add \u201cSaved Value\u201d labels for any form items that have a constant value so they reflect different data during export.</li> <li>Adding data labels to form items Data labels added to form items provide descriptive column names when data is exported to a spreadsheet. If no data label is assigned, the Display Value is used.</li> <li> <p>Exporting data from your application After users complete and submit forms, you can export the data to a spreadsheet.</p> </li> <li> <p>Importing data in View Data </p> </li> </ul> <p>Application Owners can use an Import Data operation on the View Data page to import spreadsheet data into their application. This can provide a quick start method for adding many records/rows of data into an application from an existing spreadsheet.</p> <p>Parent topic: Building Apps</p>"},{"location":"da_exporting_data_from_your_application.html","title":"Exporting data from your application","text":"<p>After users complete and submit forms, you can export the data to a spreadsheet.</p> <p>HCL Leap exports the data from your application to an Atom feed in XML format, JSON, or Microsoft\u2122 Excel. By default, all data for a specific application to which you have access is exported, unless you restrict the data set using Search.</p> <ol> <li> <p>From the Manage tab, click View Data under the application you want to export.</p> </li> <li> <p>Click the Responses tab and select Export Data.</p> </li> <li> <p>Click the Export To to button and select the format of the file you want.</p> </li> <li> <p>Controlling data available for export Use Filters to set rules, and select which data you want to export.</p> </li> </ol> <p>Parent topic: Working with application data</p>"},{"location":"da_labeling_fields_in_a_form.html","title":"Adding data labels to form items","text":"<p>Data labels added to form items provide descriptive column names when data is exported to a spreadsheet. If no data label is assigned, the Display Value is used.</p> <p>Display Values are shown to users when they view forms. While informative, Display Values may not make the best column headings. When analyzing an exported spreadsheet, a descriptive Data Label provides a column name, and gives context to the data viewed outside of the form. The following instructions describe how to add Data Labels to form items:</p> <ol> <li> <p>Select the form item to reveal the properties side panel.</p> </li> <li> <p>Add text in the Data Label field. When you export the data, the text you entered in the data label becomes the name of the column.</p> </li> </ol> <p>Parent topic: Working with application data</p>"},{"location":"da_labeling_saved_values_in_forms.html","title":"Changing the saved value of a form item","text":"<p>You can add \u201cSaved Value\u201d labels for any form items that have a constant value so they reflect different data during export.</p> <p>Display Values are shown to users when they view forms. By default, the Display Value is the Saved Value. Altering Saved Values is useful when exporting data to a spreadsheet. For example, in a Drop Down, Select One, Select Many, or Survey, users are presented with a list of options. Changing the Saved Value of a form item is useful if you want to quantify, or rank the choices users make without presenting such ranks to the users. If the Saved Value of the data is shorter and more descriptive than the Displayed Value, it is easier for reviewers to understand when viewing the exported data in a spreadsheet.</p> <ol> <li> <p>Select the form item with predefined choices, such as a Drop Down, or Select One, the Properties side panel appears.</p> </li> <li> <p>Enter a value in the Displayed Value field.</p> <p>The Displayed Value is what the user sees when viewing the form. What you type in the Displayed Value field is automatically used as the Saved Value.</p> </li> <li> <p>Enter a value in the Saved Value field.</p> <p>The Saved Value is displayed when you view the responses during an export.</p> </li> <li> <p>Click the green plus sign next to the Saved Value field to add another row to the list.</p> </li> <li> <p>If you want to have one option display to the users as a preselected default, click the radio button for the Saved Value field.</p> </li> </ol> <p>Parent topic: Working with application data</p>"},{"location":"datatypes_widgets.html","title":"Data Types","text":"<p>Data widgets can declare one of the listed data types, each with additional optional constraints.</p> <p>Constraints on the data type goes beyond the UI. These constraints will be enforced when data is submitted to the server.</p> <p><code>string</code></p> <ul> <li>A piece of text.</li> <li>Constraints:<ul> <li><code>length</code> : the max number of characters allowed, including multi-byte charaters. Note, if this length is greater than <code>255</code> the submitted value will be stored as <code>CLOB</code> in the database and will not be sortable. Default value: <code>50</code></li> <li><code>subType</code><ul> <li>Email</li> <li>URL</li> </ul> </li> <li><code>format</code> : limit user's input to specific format, use # for numbers 0-9, @ for letters A-Z and ? for number or letter<ul> <li><code>simplePattern</code></li> <li><code>invalidMessage</code></li> </ul> </li> <li><code>multiValue</code> - <code>true</code> or <code>false</code>. If <code>true</code>, the value returned by the widget is an array of strings, otherwise it is a single string. The default value is <code>false</code>.</li> </ul> </li> </ul> <pre><code>const myWidgetDefinition = {\n   ...\n   datatype: {\n     type: 'string',\n     length: 50,\n     format: {\n        simplePattern: '#####,#####-####' // US zip code\n        invalidMessage: 'Please enter a valid US zip code'\n     }\n   }\n   ...\n};\n</code></pre> <p><code>'boolean'</code></p> <ul> <li>A <code>true</code> or <code>false</code> value. A <code>null</code> value is not supported. The default value is <code>false</code></li> <li>Constraints:<ul> <li>None.</li> </ul> </li> </ul> <p><code>'number'</code></p> <ul> <li>A number.</li> <li>Contraints:<ul> <li><code>numberType</code> : one of <code>'decimal'</code> or <code>'integer'</code>. Default: <code>'decimal'</code></li> <li><code>decimalPlaces</code> : if number is a <code>'decimal'</code>, will round to the given number of decimal places. Default: <code>2</code></li> <li><code>minValue</code> : minimum value of number expected. Can be omitted or set to <code>null</code> if no minimum</li> <li><code>maxValue</code> : maximum value of number expected. Can be omitted or set to <code>null</code> if no maximum</li> </ul> </li> </ul> <pre><code>const myWidgetDefinition = {\n   ...\n   datatype: {\n     type: 'number',\n     numberType: 'decimal',\n     decimalPlaces: 2\n   }\n   ...\n};\n</code></pre> <p><code>'date'</code></p> <ul> <li>A date-only value in <code>'YYYY-MM-DD'</code> string format.</li> <li>Custom widgets are expected to handle the setting of the date in a <code>'YYYY-MM-DD'</code> string format, or as a <code>Date</code> object.</li> <li>Contraints:<ul> <li><code>minValue</code> : minimum value of date expected. Can be omitted or set to <code>null</code> if no minimum</li> <li><code>maxValue</code> : maximum value of date expected. Can be omitted or set to <code>null</code> if no maximum</li> </ul> </li> </ul> <p><code>'time'</code></p> <ul> <li>A time-only value in <code>'hh:mm'</code> string format (24-hour clock).</li> <li>Contraints:<ul> <li><code>minValue</code> : minimum value of time expected. Can be omitted or set to <code>null</code> if no minimum</li> <li><code>maxValue</code> : maximum value of time expected. Can be omitted or set to <code>null</code> if no maximum</li> </ul> </li> </ul> <p><code>'timestamp'</code></p> <ul> <li>A date-time value in ISO 8601 <code>'YYYY-MM-DDThh:mmZ'</code> string format, normalized to the UTC timezone (denoted by <code>Z</code>)</li> <li>Custom widgets are expected to handle the setting of the date ISO 8601 <code>'YYYY-MM-DDThh:mmZ'</code> format, or as a <code>Date</code> object.</li> <li>Constraints:<ul> <li><code>minValue</code> : minimum value of time stamp expected. Can be omitted or set to <code>null</code> if no minimum</li> <li><code>maxValue</code> : maximum value of time stamp expected. Can be omitted or set to <code>null</code> if no maximum</li> </ul> </li> </ul> <p><code>aggregation</code></p> <ul> <li>Denotes that the widget will capture an array of data</li> <li>See Repeating Sections for full details.</li> </ul> <p>Parent topic: Custom Widget API</p>"},{"location":"datawidgets_displaywidgets.html","title":"Data Widgets vs Display Widgets","text":"<p>Some widgets are for collecting data (ie. \"data widgets\") and others are presentational in nature (ie. \"display widgets\").</p> <p>A data widget is required to:</p> <ul> <li>Declare a <code>datatype</code> property (described below).</li> <li>Provide <code>setValue()</code> and <code>getValue()</code> functions.</li> <li>Publish an <code>onChange</code> event when its value is changed by the user. This will trigger a call to the widget's <code>getValue()</code> function, and <code>validateValue()</code> function if supplied.</li> </ul> <p>Some display widgets are still expected to trigger events (for example, <code>onClick</code>), which can be used by the app author to invoke an action, by custom JavaScript or other techniques.</p> <p>Parent topic: Custom Widget API</p>"},{"location":"deploy_container_kubernetes_openliberty.html","title":"Deploying to a Container (Kubernetes) Platform - Open Liberty","text":"<p>The following sections describe how to deploy Leap to a Kubernetes-friendly container platform.</p> <p>All of the possible configuration parameters may be found in the values.yaml which is part of the deployment package.</p>"},{"location":"deploy_container_kubernetes_openliberty.html#section_f4f_24s_gxb","title":"Prerequisite - Specifying persistant volumes","text":"<p>Kubernetes must have:</p> <ul> <li> <p>A volume specified as \u201cReadWriteMany\u201d. This will be used to pass database drivers or LTPA key files to be used by Leap. When the container is started, any files in this directory are copied into /opt/openliberty/wlp/usr/servers/defaultServer/misc. To reference files in this directory within your configuration snippets, use ${SERVER_CONFIG_DIR}/misc.</p> <p>Note: If files are added to these volumes while the system is running then it will need to be restarted.</p> </li> <li> <p>A volume specified as \u201cReadWriteOnce\u201d. This will be used for log storage.</p> </li> <li>A volume specified as \u201cReadWriteOnce\u201d. This will be used for the derby database.\u00a0 If not using derby, this volume is optional.</li> </ul> <p>These volumes can be directories in your Kubernetes operating system or a location supplied by a cloud provider.</p>"},{"location":"deploytraditional_leap.html","title":"Deploying to a traditional platform","text":"<p>The following topics describe how to deploy Leap to a traditional platform.</p> <ul> <li>Basic Architecture Leap relies on two central components: the application server and the database.</li> <li>Manually deploying to WebSphere Application Server The following instructions describe how to manually deploy HCL Leap to WebSphere\u00ae Application Server.</li> </ul> <p>Parent topic: Deploying Leap</p>"},{"location":"di_adding_pdf_to.html","title":"Adding a PDF to Leap","text":"<p>The following instructions describe how to add a PDF to Leap.</p> <ol> <li> <p>Go to Settings &gt; Files.</p> </li> <li> <p>Click Add.</p> <p>The Add File or URL Link window opens.</p> </li> <li> <p>Select your PDF:</p> <ul> <li>Add a file from your computer \u2013 Browse to the file location on your computer. The name of the file is automatically entered into the Name field. You can change the name of the file, but ensure the .pdf file extension remains. You can also enter a description of the file, which is useful if you have several similarly named PDFs.</li> </ul> <p>Note: The name of the file is displayed to users when they populate the PDF.</p> </li> <li> <p>Click OK to save changes and close the window.</p> </li> <li> <p>Save the application.</p> <p>Note: You must save the application after the PDF is loaded. Without saving the application, the PDF is not available when you attempt to create a Service Configuration.</p> </li> </ol> <p>Parent topic: Leap document integration</p>"},{"location":"di_creating_the_pdf_trigger.html","title":"Creating the PDF trigger","text":"<p>The following instructions describe how to create a trigger that calls the PDF service, and triggers the service when the user clicks the button.</p> <p>When the user clicks the button, the service that maps information from the form to the PDF is triggered. The PDF is displayed, or stored as an attachment, with user supplied information in the PDF fields.</p> <ol> <li> <p>Add a Button to your form from the Palette.</p> </li> <li> <p>Change the Caption of the button so users know that clicking it populates a PDF.</p> <p>For example, change the caption of the button to Create PDF.</p> </li> <li> <p>In the Properties side panel, select Call a service when clicked. Select the Service Configuration you created from the menu.</p> </li> <li> <p>Save your application.</p> </li> </ol> <p>When the application is deployed, you can click the Create PDF button and a PDF is populated containing the values that are entered in the Leap application.</p> <p>Note: You can use other common form events as triggers, including validateButtonPressed. Stage action buttons cannot be used as triggers.</p> <p>Parent topic: Leap document integration</p>"},{"location":"di_mapping_form_items_to_pdf_fields.html","title":"Mapping form items to PDF fields","text":"<p>The following instructions describe how to create a Service Configuration to map Leap fields to fields in an existing PDF and, when triggered, returns the filled PDF to the user.</p> <ul> <li>You must have your PDF uploaded in the Settings &gt; Files section.</li> <li>If you did not save your application after you uploaded the PDF, click Save before you use the following instructions.</li> <li> <p>You must create a Leap form containing fields that are similar to the fields in the PDF.</p> </li> <li> <p>Go to the Settings tab.</p> <ul> <li>If you only have one form, click Services from the menu on the left side of the page.</li> <li>If there are multiple forms, click Services &gt; &lt;form_name &gt;.</li> <li>Click Add Service Configuration.</li> </ul> <p>The Service Configuration window opens.</p> </li> <li> <p>From the Service Catalog menu, select Documents.</p> <p>A list of available documents is displayed.</p> </li> <li> <p>Select the PDF from the list and click Next.</p> <p>The Inputs tab is activated.</p> </li> <li> <p>Select a form item from the Select source window, and a corresponding item from the Select target window.</p> <p>For example, you would map your Leap First Name form item to the First Name field in the PDF.</p> </li> <li> <p>Click the Assign input button that is located between the two windows.</p> <p>When valid mapping is done, a check mark appears to the right of the item name in the Select source, and Select target windows. The mapped value also appears in the list of Assigned Inputs.</p> </li> <li> <p>When all inputs are mapped, click OK.</p> </li> </ul> <p>Parent topic: Leap document integration</p>"},{"location":"di_mapping_form_items_to_pdf_fields_and_attaching.html","title":"Mapping form items to PDF fields and storing the filled PDF","text":"<p>NEW - The following instructions describe how to create a Service Configuration to map Leap fields to fields in an existing PDF and, when triggered, stores the filled PDF as an attachment to the record.</p> <ul> <li>You must have your PDF uploaded in the Settings &gt; Files section.</li> <li>If you did not save your application after you uploaded the PDF, click Save before you use the following instructions.</li> <li>You must create a Leap form containing fields that are similar to the fields in the PDF.</li> <li> <p>You must have added an attachment item to your application.</p> </li> <li> <p>Go to the Settings tab.</p> <ul> <li>If you only have one form, click Services from the menu on the left side of the page.</li> <li>If there are multiple forms, click Services &gt; &lt;form_name &gt;.</li> <li>Click Add Service Configuration.</li> </ul> <p>The Service Configuration window opens.</p> </li> <li> <p>From the Service Catalog menu, select Documents.</p> <p>A list of available documents is displayed.</p> </li> <li> <p>Select the PDF from the list and click Next.</p> <p>The Inputs tab is activated.</p> </li> <li> <p>Select a form item from the Select source window, and a corresponding item from the Select target window.</p> <p>For example, you would map your Leap First Name form item to the First Name field in the PDF.</p> </li> <li> <p>Click the Assign input button that is located between the two windows.</p> <p>When valid mapping is done, a check mark appears to the right of the item name in the Select source, and Select target windows. The mapped value also appears in the list of Assigned Inputs.</p> </li> <li> <p>In the Select Source window, switch from Basic view to Constant view.</p> </li> <li> <p>In the Event Value field type True. In the Select target window, select Create As Attachment and click the assign input button located between the two windows. The mapped value will appear in the list of Assigned Input.</p> </li> <li> <p>Click Next. The Outputs tab is active.</p> </li> <li> <p>Select Filled PDF from the Select Source window and select an attachment form item from the Select Target window.</p> </li> <li> <p>Click Assign Outputs button that is located between the two windows. The mapped value will appear in the list of Assigned Outputs.</p> </li> <li> <p>Click Ok.</p> </li> </ul> <p>Parent topic: Leap document integration</p>"},{"location":"di_pop_doc_with_app_data.html","title":"Leap document integration","text":"<p>Leap's document integration feature lets you use previously built PDF files and populate them with data captured by Leap.</p> <p>Where compliance or regulatory requirements mandate it, integrating Leap captured data with existing documents can be an important part of the overall Leap solution. These output documents can be provided for precise printing, document signing or archiving.</p> <p>You can now use a Leap form to collect user data, and display the information in a PDF. This process requires four steps:</p> <ol> <li>Load an existing PDF into Leap.</li> <li>Create a form that contains information fields that align with fields in the PDF.</li> <li>Create a service description by mapping fields from your form to fields in the PDF.</li> <li>Add a button that the user can click to populate and display a PDF.</li> </ol> <p>Note: For the Leap document integration, PDFs must allow the input of information to be populated by data that is collected in a Leap application.</p> <ul> <li>Adding a PDF to Leap The following instructions describe how to add a PDF to Leap.</li> <li>Mapping form items to PDF fields The following instructions describe how to create a Service Configuration to map Leap fields to fields in an existing PDF and, when triggered, returns the filled PDF to the user.</li> <li>Mapping form items to PDF fields and storing the filled PDF NEW - The following instructions describe how to create a Service Configuration to map Leap fields to fields in an existing PDF and, when triggered, stores the filled PDF as an attachment to the record.</li> <li>Creating the PDF trigger The following instructions describe how to create a trigger that calls the PDF service, and triggers the service when the user clicks the button.</li> <li>Document integration usage details The following usage details describe the best practices and limitations for integrating your Leap application with a PDF.</li> </ul> <p>Parent topic: Building Apps</p>"},{"location":"di_usage_details.html","title":"Document integration usage details","text":"<p>The following usage details describe the best practices and limitations for integrating your Leap application with a PDF.</p> <ul> <li>Selecting PDF types:<ul> <li>PDFs must allow the input of information to be populated by data that is collected in a Leap application. Adobe\u2122 Acrobat Pro is the primary tool that is used for creating PDFs where you can complete fields, and can be used to reliably create or modify existing PDFs to make them compatible with the Leap document integration feature.</li> <li>In some cases, Adobe Acrobat Reader extensions are removed by Reader after the document is populated.</li> <li>XFA PDFs have partial support when they have \u201ccompatibility mode\u201d enabled.</li> <li>Encrypted PDFs cannot be populated.</li> <li>Some PDF documents are intended only for printing and have no data entry fields. These PDFs cannot be populated.</li> <li>A number of freely available PDF authoring tools on the web do not create compatible PDFs. Some PDF documents that are created or modified with these tools might appear to have direct text entry support but do not allow completion of fields.</li> <li>If a PDF has limitations that make it unusable for populating with data from Leap, you can still attach the PDF to the form and it is returned unmodified. This is useful if you want to return a static PDF containing detailed instructions.</li> <li>Populating fields in a signed PDF document results in a validation warning message that is displayed by the PDF Reader. The warning message tells users unsigned changes were added after the document was signed.</li> <li>When you work with languages that contain extended character sets, be sure to match the language of the Leap form with the Language/Font of the PDF item. Any character or glyph that is missing from a font is omitted from the value that is passed.</li> <li>The built-in PDF viewer on iOS/Safari does not properly render values of filled PDF's. This is an iOS/Safari limitation.</li> </ul> </li> <li>Mapping information:<ul> <li>Values can be mapped to PDF Text Fields that are marked as readonly. You can populate a PDF from values that are collected in the Leap form, while the PDF remains unmodifiable through direct entry.</li> <li>The design time exercise of creating a map to indicate how data moves from application to the PDF are made much easier when items on both sides are properly named. When you use the Leap mapping dialog, if items in the PDF do not have recognizable names, Adobe Acrobat Pro can be used to modify the PDF.</li> <li>Take care to understand the format and constraints of the item you are mapping to and from. In some cases, a poorly matched map results in a blank item in the PDF because no value is mapped. For example, mapping a Number into a PDF Date Text Field, or mapping multiple selections from a Select Many choice item into a PDF Radio Group. In other cases, a value appears in the PDF but might result in constraint violations within the PDF. For example, mapping an unconstrained Single-Line Entryinto a PDF Field.</li> <li>Multi-lined values cannot be mapped to single lined text fields in a PDF.</li> <li>The Export Values for PDF choice type items can be determined by inspecting the PDF with an editing tool. The Export Values are also displayed as part of the Description property in the extra information hover text within the Leap mapping dialog. To see the Export Values, hover over the information icon next to any PDF item in the list to be mapped. For a successful map, the Saved Value for the Leap item should be adjusted to match the Export Value.</li> <li>To map choice items, the Saved Value for the selected choice must match the Export Value for the available choice in the PDF item. The Export Value is used as an indicator of whether a particular choice in the item is marked as selected, or turned \u201con\u201d. This note is applicable to Leap choice items such as Select One, Select Many, Drop Down, Survey, and Choice Slider.</li> <li>When you map a Check Box to a PDF Check Box, the Export Value is automatically determined so no special consideration needs to be made around matching the Export Value.</li> <li>Select Many<ul> <li>A Select Many can be mapped into a PDF Radio Group. However, configure theSelect Many with a constraint that allows only one choice selection so the constraints of the PDF Radio Group are not violated</li> <li>A Select Many should not be mapped to a cluster of PDF Check Boxes if the PDF Check Boxes do not have unique Export Values. In this case, the Leap form might need to be altered to replace the Select Many item with a cluster of individual Checkboxes.</li> <li>A Select Many maps well to a PDFList Box Multi-Select but can also be mapped to a cluster of PDF Check Boxes by creating multiple maps. One map from the Select Many to each Check Box in the cluster. When mapping from a Select Many to a PDF Check Box, the Saved Value of a selected choice must match the Export Value of the PDF Check Box for the PDF check box to be turned on.</li> </ul> </li> <li>Each question in a Survey must be mapped separately, and must use the same rules for mapping as a Select One or Select Many.</li> <li>Leap tables are repeating rows of data and cannot be mapped directly into a PDF.</li> <li>Some Leap items that cannot be mapped are Image, HTML Fragments, Text, Button, Line, Media, Web Link, Attachment, Page Navigation, Section, and Tabbed Folder.</li> <li>Some PDF items that cannot be mapped are Button, Digital Signature, Image, and Text.</li> </ul> </li> </ul> <p>Parent topic: Leap document integration</p>"},{"location":"ex_adding_ccs.html","title":"Adding customized CSS to your application","text":"<p>You can add custom cascading style sheet (CSS) themes to your HCL Leap application.</p> <p>Adding custom cascading style sheet (CSS) themes personalizes applications with the branding of your organization.</p> <ol> <li> <p>Click the Style tab.</p> </li> <li> <p>Click Add file.</p> <p>The Add File or URL Link window opens.</p> </li> <li> <p>Select your custom style sheet:</p> <ul> <li>Add a file from your computer \u2013 Browse to the file location on your computer.</li> <li>Use a file on the internet \u2013 insert the URL of file location. Select whether you want toImport the file from the internet or Maintain a link to the file only. The name of the file is automatically entered into the Name field. You can change the name of the file, but ensure the .css file extension remains. You can also enter a description of the file, which is useful if you have several similarly named style sheets.</li> </ul> </li> <li> <p>Click OK to save changes and close the window.</p> </li> <li> <p>To replace the built-in theme, select Replace built-in theme.</p> <p>You can use the built-in style sheets to complement your CSS, or you can replace them entirely with your CSS file with this option.</p> </li> </ol> <p>After a style sheet is uploaded, you can select it from the drop-down menu. While you can upload many custom style sheets, you can select only one per application.</p> <p>Note: To see the style sheet that is applied to your application, either preview, or save and deploy the application.</p> <p>See Creating customized Cascading Style Sheets for information about creating your own custom CSS.</p> <p>Parent topic: Using custom style sheets</p>"},{"location":"ex_css_toc.html","title":"Using CSS files","text":"<p>HCL Leap allows the use of custom CSS themes that can be uploaded into an application to style the user interface to meet customer needs.</p> <p>See Creating customized Cascading Style Sheets for information on how to create your own custom CSS.</p> <ul> <li>Adding customized CSS to your application You can add custom cascading style sheet (CSS) themes to your HCL Leap application.</li> <li>Removing a custom style sheet The following instructions describe how to remove a custom style sheet from the drop-down menu of available options.</li> </ul> <p>Parent topic: Styling your application</p>"},{"location":"ex_removing_a_css.html","title":"Removing a custom style sheet","text":"<p>The following instructions describe how to remove a custom style sheet from the drop-down menu of available options.</p> <ol> <li> <p>Click the Settings tab, then click Files from the menu.</p> <p>A list of all uploaded files is shown.</p> </li> <li> <p>Locate the file that you want to delete and click Delete.</p> <p>A confirmation window is shown.</p> </li> <li> <p>Click Yes to delete the file.</p> <p>The file is removed from the list.</p> </li> </ol> <p>Parent topic: Using custom style sheets</p>"},{"location":"ex_soa_service_transport.html","title":"Service Oriented Architecture \u2013 Service Transport","text":"<p>HCL Leap has a powerful, and extensible, Service Oriented Architecture (SOA) integration feature. The foundation of this feature is the Service Transport.</p> <p>Each Service Transport represents a single communication process. Leap provides a REST transport. Additional transports can be developed and integrated into Leap to allow you to access other Services than ones expressed as REST. Each transport is written in Java\u2122 as an OSGI bundle.</p> <ul> <li>Creating your own custom Service Transport By creating a custom Service Transport, you can allow HCL Leap applications to use services from any external system, or access any data source. Alternatively, the transport can implement a custom service itself without communicating with any external system or data source.</li> </ul> <p>Parent topic: Adding services</p>"},{"location":"extending_toc.html","title":"Extending","text":"<p>You can extend the functionality of HCL Leap through the use of customized cascading style sheets, Javascript APIs, and REST APIs, and Service Oriented Architecture modifications.</p> <p>Service Description: Leap has a powerful, and extensible, Service Oriented Architecture (SOA) integration feature. The Service Description provides a human-readable view on a service that uses a Service Transport. Service Descriptions are files stored on the server that make a service available toLeap when designing an application. For more information about creating a Service Description, see Service Oriented Architecture.</p> <p>JavaScript API: HCL Leap provides a JavaScript\u2122 API allowing designers to extend the customization provided by formulas, stages, rules, and services. The JavaScript is triggered on events tied to the user interface items in an application. The API has full access to the \u201cBusiness Object\u201d of the application. All JavaScript is covered by the security sandbox model. See the JavaScript API Reference document for full details on the available API methods, business object, security model, and event model.</p> <p>Data Access REST API:  The data captured by an HCL Leap application is stored in a relational database. Leap provides secure access to that data through the View Data function, which allows filters and searches, and also allows data to be exported for analysis. You might want to access the data directly for analysis and reporting. To allow this access, we provide a REST API that allows you access the data programmatically. When accessing the data using the API, all security permissions as defined in the Access rules for the application are enforced. For full details on this API, see Data access REST API.</p> <ul> <li>Using custom style sheets HCL Leap allows the use of custom CSS themes that can be uploaded into an application to style the user interface to meet customer needs.</li> <li>Adding services The following topics describe how to add services to your Leap applications.</li> </ul>"},{"location":"get_overview.html","title":"What is HCL Leap, and how is it used?","text":"<p>This document provides an overview of the three main activities that are involved in using Leap.</p> <p>There are three main activities that are involved in using Leap:</p> <ul> <li>Building forms</li> <li>Publishing applications</li> <li>Reviewing submissions</li> </ul>"},{"location":"get_overview.html#forms-and-applications","title":"Forms and Applications","text":"<p>Throughout the Leap documentation, the words form and application are both used to describe the output that is created by Leap. Forms are a single page, or collection of pages, that create the user interface with which people interact. When a form is combined with workflow, presentation logic and other elements of the Leap technology, it becomes an application. Applications gather the submitted input and automatically store the submissions in a database.</p>"},{"location":"get_overview.html#building-forms","title":"Building forms","text":"<p>When you start Leap, you are shown a screen with two tabs on the Forms toolbar: Use and Manage. The Use tab shows a list of all applications that are created by other users to which you have access. The Manage tab is where you create and manage applications. When Leap opens, you are shown the Manage tab, which displays any applications you created, or for which you have edit permissions.</p> <p>To create an application, click New Application, enter a descriptive application name, and select Create. A blank form is displayed.</p> <p>Drag items from the Palette and drop them onto the form. As you add items, you can change the default name of each item directly on the form. Click the name of the widget on the canvas to edit the name.</p> <p>A built-in grid automatically aligns items on the form, and expands vertically when you add items to the form. The default layout is two columns and two rows. However, you have flexibility when you build your form. You can stretch one form item to span across all columns, and you can add and delete columns and rows as needed. Click any border of a column or row to access a menu with options for expanding or contracting your form.</p> <p>When you click the Rules icon, you can create rules for form items or for other objects. You can set a rule to show or hide a form item, page, or other object that is based on user input.</p> <p>Some form items must be edited by changing their properties. For example, you can add the survey questions on the form, but the question titles can be edited only in the properties panel.</p> <p>When an item is selected the properties panel appears on the side of the screen. There are many tabs within the properties panel where you can set various functions. For example:</p> <p>Properties tab :   Edit properties such as whether the title of a form item appears on the form. The properties that are displayed vary based on the form item.</p> <p>Event tab :   Define an event that happens based on user input, such as when the user selects a particular option.</p> <p>Formula tab :   Create mathematical expressions to calculate field values and validate form data.</p>"},{"location":"get_overview.html#adding-workflow-elements-to-a-form","title":"Adding workflow elements to a form","text":"<p>There are many cases where adding separate steps and restricting user access to part of a form makes the form more useful. For example, you can create a vacation request form that requires the approval of a supervisor, or an award nomination form that requires the approval of both a supervisor and a nomination committee. In the survey form example, the results from the survey are useful feedback, but by adding workflow elements, the curriculum supervisor can review comments before sending them to the instructor. Adding workflow elements is done with Roles and Stages.</p> <p>Adding or editing Roles is done in the Access or Workflow tab. Adding stages is done in the Workflow tab.</p> <p>Roles \u2013 You can create various roles with different levels of access to different information within an application. For example, you can specify that only an administrator can change an application, managers can review submitted data, and users can complete and submit the form. After roles are defined, you can assign users to the roles. Each role can have as many or as few people assigned to it as needed. You can even assign groups to a role. For example, all supervisors are assigned to one role, and all managers are assigned to another role.</p> <p>In the Access tab, each role can either be Open or Closed. If you have a web service, which pre-populates the role information, select Open. For example, you want to use a web service to scan the company email directory and automatically populate the name of the manager. If you do not plan to use web services in your application, leave the role Closed. The user must enter the name of the manager manually when they complete the form.</p> <p>Stages \u2013 Stages are the steps that a form goes through in its lifecycle. For example, in one stage the user submits data. In the next stage, the manager reviews and approves or rejects the submitted data. An application can have as many stages as needed. Stages are also useful as they allow a submitter to save a draft version of the form. For example, on a census form that has multiple pages, the submitter might not have time to complete the whole form in one session. With the Draft button, the user can complete part of the census, save a draft, then return to complete the census later. A stage can hide or display information that is necessary for one user, but not required for another. For example, in our survey form, the curriculum supervisor must see the name of who submitted the feedback. However, to allow for anonymous feedback, the user's name is hidden when the feedback is forwarded from the curriculum supervisor to the course instructor.</p> <p>By default, every form has a Start and Submitted stage. The Start stage is the first stage of every form. The Submitted stage can be modified and other stages added.</p> <p>To create a workflow, add stages in the Workflow tab. You may hover over the stage and click the plus icon, or click on \u201c+ Add Stage\u201d in the properties pane.</p> <p></p> <p>When a new stage is added, you can modify its properties to build the form workflow as needed. For example, you can add a stage to a survey that thanks the user for submitting feedback and sends the curriculum supervisor an email that indicates that new feedback is available. After the feedback is reviewed by the supervisor, another stage can be added to block the user's name and company information and then forward the feedback to the course instructor.</p> <p>At any time during the form building process, you can save and preview your work in a web browser by clicking Preview.</p> <p></p> <p>Ensure that your browser does not block pop-up windows because the preview form opens in a new window. The Submit and Cancel buttons are automatically added to your form, and are displayed when you preview the form.</p>"},{"location":"get_overview.html#deploying-your-application","title":"Deploying your application","text":"<p>When you complete building your form and adding workflow elements, you must deploy your application to make it available to users. Deploying applications is done in the Manage tab.</p> <p>To deploy your application, click Deploy. A menu of deployment options is available. You can set your application to have a specific start and end date, and provide a custom message to instruct users when the application is unavailable.</p> <p>After an application is deployed, you can provide the URL link to your users.</p> <p></p> <p>You can also get the URL to the application by clicking Launch and copying the address in the web browser. If you must change a form after it is deployed, you can do so at any time. However, you must deploy the form again after you complete your changes.</p>"},{"location":"get_overview.html#reviewing-submitted-data-responses","title":"Reviewing submitted data responses","text":"<p>When users access the application and submit results, the form author, administrator, or other roles with appropriate access can view the submitted results. In the Manage tab, each application has a View Data link. When the View Data link is clicked, you can choose to analyze submitted responses by viewing summary charts or response records.</p> <p>The Summary screen displays the survey results in customizable charts. The View Data screen displays all submitted responses in a table. You can sort the submitted results by clicking any of the column titles. Selecting a response displays the submitted data in a new window.</p> <p>Forms that have extra stages have extra buttons in the View Data screen. For example, the curriculum supervisor has a button to accept the feedback, which forwards the feedback to the course instructor. In another example, such as a vacation request form, the manager can either accept or reject the vacation request. If the manager accepts the request, the request is forwarded to Human Resources to log against the available vacation days. In all cases, an email with the decision of the supervisor is sent to the employee.</p> <p>You also can export all data to a spreadsheet program, such as Open Office, or Microsoft\u2122 Excel.</p>"},{"location":"get_overview.html#conclusion","title":"Conclusion","text":"<p>This overview described the three high-level steps for creating Leap applications: building the form and adding workflow elements, deploying your completed application, and reviewing the submission results. For more Leap information, see:</p> <ul> <li>Building a Survey application \u2013 Use Leap to design and publish a basic survey application.</li> <li>Building Apps for more specific instructions on various parts of creating a Leap application.</li> <li>HCL Software U: Application development \u2013 a 7-minute video that walks you through the activities that are described in this overview. The video describes how to open a new application, add items to a form, publish an application, and review submitted results.</li> <li>Leap Starter Packs \u2013 a series of prebuilt forms you can import into Leap and modify for your own use.</li> </ul>"},{"location":"gl_forms_experience_builder_globalization.html","title":"Globalization features","text":"<p>The following information describes the languages formatting features supported by HCL Leap.</p>"},{"location":"gl_forms_experience_builder_globalization.html#supported-languages","title":"Supported languages","text":"<p>Leap supports the following languages:</p> <ul> <li>Arabic</li> <li>Catalan</li> <li>Chinese (Simplified)</li> <li>Chinese (Traditional)</li> <li>Croatian (Croatia)</li> <li>Czech (Czech Republic)</li> <li>Danish (Denmark)</li> <li>Dutch</li> <li>English</li> <li>Finnish (Finland)</li> <li>French</li> <li>German</li> <li>Greek</li> <li>Hebrew</li> <li>Hungarian (Hungary)</li> <li>Italian</li> <li>Japanese (Japan)</li> <li>Kazakh</li> <li>Korean (South Korea)</li> <li>Norwegian Bokm\u00e5l (Norway)</li> <li>Polish</li> <li>Portuguese (Brazil)</li> <li>Portuguese (Portugal)</li> <li>Romanian (Romania)</li> <li>Russian (Russian)</li> <li>Slovak</li> <li>Slovenian (Slovenia)</li> <li>Spanish</li> <li>Swedish (Sweden)</li> <li>Thai</li> <li>Turkish (Turkey)</li> </ul> <p>The default language for designing applications is based on your web browser locale, or WebSphere\u00ae Portal container. If you do not want to use your default language, you can change to a specific language, or select \u201cUser\u2019s Language\u201d so the application applies the user\u2019s web browser language settings when the application is opened.</p>"},{"location":"gl_forms_experience_builder_globalization.html#formatting","title":"Formatting","text":"<p>Form items, such as currency, date, and time, are based on the locale of the form. For example, if a currency item is set on a form with a locale of Germany, the currency is shown as Euros. It is important to note that no monetary conversion is done if the locale of the form changes. The format of the currency symbol on the form changes, but the amount entered is shown as entered. For example, if a user enters $100 into a currency field with a locale of United States, the currency is shown as $100 US on a form with a locale of Germany. You can edit the currency type, with the Currency field selected, in the Properties side panel.</p> <p>Locale settings can also affect dates. Countries can have specific requirements for how dates are written. For example, one country might want a date written month/day/year: 06/29/2012. While another country has a standard of day/month/date/year: Friday June 29, 2012. How the date is shown is determined by the locale of the form. You can manually change the date format, with the date field selected, in the Properties side panel.</p> <ul> <li>Setting a language The default language for an application is based on the web browser locale. You can change the language of your HCL Leap application in the Settings tab.</li> </ul> <p>Parent topic: Building Apps</p>"},{"location":"gl_setting_a_language.html","title":"Setting a language","text":"<p>The default language for an application is based on the web browser locale. You can change the language of your HCL Leap application in the Settings tab.</p> <p>To set a language for an application other than your default locale:</p> <ol> <li> <p>Go to the Settings tab.</p> </li> <li> <p>Expand the Application Language menu and select either:</p> <ul> <li>a specific language from the list</li> <li>\u201cUser\u2019s Language\u201d</li> <li>Optional: Specify the language by expanding the Application Regional Options menu, and selecting a country where the language is used.</li> </ul> </li> <li> <p>If you want the language setting to apply to an application other than the one you are currently editing, enter the Application Name in the field.</p> <p>The field is automatically populated with the name of the current application.</p> </li> <li> <p>Click Save to apply the changes.</p> </li> </ol> <p>Parent topic: Globalization features</p>"},{"location":"guide_me.html","title":"Guide Me","text":"<p>The learning materials designed in this section contain instructions to help you perform specific tasks. Some of the how-to guides might may include code samples, which will help you to complete the tasks from end-to-end.</p>"},{"location":"helm_admin_customsecret.html","title":"Using custom secrets","text":"<p>Apart from the admin credentials there can be use cases where credentials, secrets or additional key files are required. To pass them to the deployment, the\u202fconfiguration.leap.customSecrets\u202fvalue can be used to reference additional\u202fKubernetes Secrets.</p> <p>Secrets are both injected as environment variables and mounted as files in\u202f/mnt/customSecrets\u202fin a subfolder named like the referenced key. From there they can be referenced in the server configuration or the\u202fconfigOverrideFiles.</p> <p>All keys and values under\u202fcustomSecrets\u202fmust consist of lower-case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name', or '123-abc').\u202fhelm install\u202fwill throw one of the following errors if this criterion is not met:</p> <ol> <li>\"configuration.leap.customSecrets: Additional property is not allowed\"</li> <li>\"configuration.leap.customSecrets.: Does not match pattern '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'\"</li> </ol>"},{"location":"helm_admin_customsecret.html#helm_admin_customsecret","title":"Use custom secret for defining the admin user and password","text":"<p>Instead of providing\u202fadminUser\u202fand\u202fadminPassword\u202ffor Leap directly in the custom values, a secret can be used to pass the credentials to the deployments.</p> <ol> <li> <p>Create a secret that will be used to reference credentials, this secret should contain the required credential attributes (e.g. \"username\", \"password\").</p> <pre><code>kubectl create secret generic &lt;secret-name&gt; --from-literal=username=&lt;your-username&gt; --from-\nliteral=password=&lt;your-password&gt; --namespace=&lt;namespace&gt; \n</code></pre> </li> <li> <p>Reference the secret in the custom Helm values. When a secret is used, the\u202fadminUser\u202fand\u202fadminPassword\u202fvalues must be set to an empty string (\"\") or\u202fnull. Example configuration:</p> <pre><code>security: \n  leap: \n    adminUser: \"\" \n    adminPassword: \"\" \n    customAdminSecret: \"my-custom-admin-secret\"\n</code></pre> </li> </ol>"},{"location":"helm_admin_customsecret.html#section_nc2_1l4_hzb","title":"Using custom secrets for credentials","text":"<p>The following is an example of creating a secret\u202f<code>my-custom-db-credentials</code>, which contains two entries\u202fDB_USERNAME\u202fand\u202fDB_PASSWORD:</p> <pre><code>kubectl create secret generic my-custom-db-credentials --from-literal=DB_USERNAME=&lt;your-username&gt; --from-\nliteral=DB_PASSWORD=&lt;your-password&gt; --namespace=&lt;namespace&gt; \n</code></pre> <p>The secret is referenced as\u202f<code>db-credentials</code>\u202fin the custom Helm values:</p> <pre><code>configuration: \n  leap:\n    . . . \n    customSecrets: \n      db-credentials: \"my-custom-db-credentials\"\n</code></pre> <p>This will result in:</p> <ol> <li>The environment variables\u202fDB_USERNAME\u202fand\u202fDB_PASSWORD\u202fbeing injected into the Pod.</li> <li>The files\u202fDB_USERNAME\u202fand\u202fDB_PASSWORD\u202fbeing mounted in\u202f<code>/mnt/customSecrets/db-credentials</code>\u202finside the Pod each containing the values specified in the secret.</li> </ol> <p>The environment variables can then be referenced in any of the server configurations. For example, to extend the DB2 configuration:</p> <pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles:\n      . . .\n      db2Override: | \n        &lt;server description=\"leapServer\"&gt;  \n          &lt;authData id=\"db2AuthAlias\" user=\"${DB_USERNAME}\" password=\"${DB_PASSWORD}\" /&gt;  \n          &lt;library id=\"jdbcDB2\" &gt;  \n            ... \n          &lt;/library&gt;  \n          &lt;dataSource id=\"febDataSource\" jndiName=\"jdbc/BuilderDataSource\" statementCacheSize=\"30\" containerAuthDataRef=\"db2AuthAlias\"&gt;  \n            ... \n          &lt;/dataSource&gt;  \n        &lt;/server&gt; \n</code></pre>"},{"location":"helm_admin_customsecret.html#section_wc2_kl4_hzb","title":"Using custom secrets as key file","text":"<p>Below is an example of creating a secret\u202f<code>my-custom-ltpa-key</code>\u202f from an LTPA key file including the entry\u202fLTPA_KEY:</p> <pre><code>kubectl create secret generic my-custom-ltpa-key --from-file=./ltpa.keys --namespace=&lt;namespace&gt; \n</code></pre> <p>The secret is referenced as\u202f<code>ltpa-key</code>\u202fin the custom Helm values:</p> <pre><code>configuration: \n  leap:\n    . . . \n    customSecrets: \n      ltpa-key: \"my-custom-ltpa-key\"\n</code></pre> <p>This will result in:</p> <ol> <li>The environment variables\u202f<code>ltpa.keys</code>\u202fbeing injected into the Pod.</li> <li>The file\u202f<code>ltpa.keys</code>\u202fbeing mounted in\u202f<code>/mnt/customSecrets/ltpa-key</code>\u202finside the Pod containing the same content as the input file.</li> </ol> <p>The file can then be referenced in any of the server configurations. For example, to use the LTPA key for the server:</p> <pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles: \n      . . .\n      ltpaOverride: | \n        &lt;server description=\"leapServer\"&gt;  \n          &lt;ltpa keysFileName=\"/mnt/customSecrets/ltpa-key/ltpa.keys\" keysPassword=\"myLtpaKeyPassword\" /&gt; \n        &lt;/server&gt; \n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_certificates.html","title":"Certificates","text":"<p>The customCertificateSecrets parameter can be used to reference certificates or keys that might be required for SSL communication to the Leap server, the LDAP server, the database, or other services.</p> <p>Changes to the keystores require a restart of the container.</p> <p>The following is an example of creating a new Secret from TLS Key and Certificate files:</p> <pre><code>kubectl create secret tls myTlsCertSecret --key=\"certificate.key\" --cert=\"certificate.crt\"\n</code></pre> <p>The following is an example of adding a DB2 SSL certificate to another Secret:</p> <pre><code>kubectl create secret generic myDb2SslSecret --from-file=mydbservercert.arm \nconfiguration: \n  leap: \n    . . .\n    customCertificateSecrets: \n      myTlsCertSecret: \"myTlsCertSecret\" \n      myDb2SslSecret: \"myDb2SslSecret\"\n</code></pre> <p>This adds the certificates and key to the keystore with the id\u202fdefaultKeyStore\u202fwhich can then be referenced in the\u202fserver.xml\u202for any overrides. The\u202fdefaultKeyStore\u202fis also used as the default by many configuration elements in Open Liberty that require a keystore.</p> <p>Parent topic: Preparation</p>"},{"location":"helm_changing_log_level.html","title":"Changing the log level","text":"<p>Sometimes you may need to increase the log level to troubleshoot unexpected behavior.</p> <p>Below is an example of how to change the log level.</p> <p><pre><code>logging:\n\u00a0 leap:\n\u00a0 \u00a0 level: Leap:*=detail,Leap:com.ibm.form.nitro.*=finest\n</code></pre> The general format is <code>Leap:[packageName1].*=[level1],Leap:[packageName2].*=[level2],...</code></p> <p>The default log configuration is <code>*=info</code>.</p> <p>See logging levels for more details.</p> <p>Parent topic: Preparation</p>"},{"location":"helm_configure_db.html","title":"Connecting to a Database","text":"<p>To connect Leap with a database you must use the configOverrideFiles parameter. Sample snippets have been provided, which will need to be updated with your specific details.</p> <p>Note: All user names and passwords should be managed using custom secrets.</p>"},{"location":"helm_configure_db.html#section_z4t_ckh_jzb","title":"Connecting to a DB2 database","text":"<p>The DB2 jdbc driver has been included and can be found at ${server.config.dir}/lib.</p> <pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles: \n      . . .\n      db2Override: |  \n        &lt;server&gt; \n          &lt;!-- Disable the hard-coded derby datasource --&gt;\n          &lt;dataSource id=\"leapDerbyDatasource\" jndiName=\"disabled\" /&gt;\n          &lt;!-- Adds the DB2 JDBC library to the Leap application classpath --&gt;\n          &lt;library id=\"jdbcDB2\" &gt; \n            &lt;fileset dir =\"${server.config.dir}/lib\" includes=\"db2jcc4.jar\" /&gt; \n          &lt;/library&gt; \n          &lt;application id=\"leap\"&gt;\n            &lt;classloader id=\"leapClassloader\" commonLibraryRef=\"jdbcDB2\"/&gt;\n          &lt;/application&gt;          \n          &lt;authData id=\"db2AuthAlias\" user=\"${DB_USERNAME}\" password=\"${DB_PASSWORD}\" /&gt; \n          &lt;dataSource id=\"leapDB2DataSource\" jndiName=\"jdbc/BuilderDataSource\" statementCacheSize=\"30\" containerAuthDataRef=\"db2AuthAlias\"&gt; \n            &lt;properties.db2.jcc  \n                databaseName=\"LEAPDB\"  \n                driverType=\"4\" \n                serverName=\"db2server.acme.com\"  \n                portNumber=\"50000\" \n                fullyMaterializeLobData=\"false\"  \n                progressiveStreaming=\"2\" \n                sslConnection=\"true\" \n                streamBufferSize=\"2097152\"\n                isolationLevel=\"2\"\n            /&gt; \n            &lt;jdbcDriver libraryRef=\"jdbcDB2\"/&gt; \n            &lt;connectionManager connectionTimeout=\"180\" maxPoolSize=\"10\" minPoolSize=\"1\" reapTime=\"180\" maxIdleTime=\"1800\" agedTimeout=\"7200\" purgePolicy=\"EntirePool\"/&gt; \n          &lt;/dataSource&gt; \n        &lt;/server&gt;\n</code></pre>"},{"location":"helm_configure_db.html#section_p2d_3kh_jzb","title":"Connecting to an Oracle database","text":"<p>The oracle jdbc driver has been included and can be found at ${server.config.dir}/lib.</p> <p>Note: To connect over SSL, complete the following steps:</p> <ol> <li> <p>change the URL to:</p> <pre><code>jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCPS)(PORT=2484)(HOST=leap-oracle-db.example.com))(CONNECT_DATA=(SERVICE_NAME=orclpdb1)))\n</code></pre> <p>You will need to update the host and service name for your database instance.</p> </li> <li> <p>Create a secret for the SSL certificate used by the Oracle instance.</p> </li> <li>Specify the connection properties that point to the trust or key store that contain the certificate used by your Oracle instance <code>${shared.resource.dir}/security/key.p12</code></li> </ol> <p>Below is an example snippet for configuring the Leap application to use an Oracle database.</p> <pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles: \n      . . .\n      oracleOverride: | \n        &lt;server&gt; \n            &lt;!-- Disable the hard-coded derby datasource --&gt;\n            &lt;dataSource id=\"leapDerbyDatasource\" jndiName=\"disabled\" /&gt;\n            &lt;!-- Adds the jdbc library to the Leap application classpath --&gt;\n            &lt;library id=\"jdbcOracle\" &gt;\n                &lt;fileset dir=\"${server.config.dir}/lib\" includes='ojdbc8.jar' /&gt;\n            &lt;/library&gt;\n            &lt;application id=\"leap\"&gt;\n                &lt;classloader id=\"leapClassloader\" commonLibraryRef=\"jdbcOracle\"/&gt;\n            &lt;/application&gt;            \n            &lt;authData id=\"oracleAuthAlias\" user=\"${DB_USERNAME}\" password=\"${DB_PASSWORD}\" /&gt; \n            &lt;dataSource id=\"leapOracleDataSource\" jndiName=\"jdbc/BuilderDataSource\" containerAuthDataRef=\"oracleAuthAlias\"&gt; \n                &lt;jdbcDriver libraryRef=\"jdbcOracle\"/&gt; \n                &lt;properties.oracle URL=\"jdbc:oracle:thin:@leap-oracle-db.example.com:1521/orclpdb1\"/&gt; \n                &lt;connectionManager  \n                    minPoolSize=\"0\" maxPoolSize=\"10\" maxIdleTime=\"10m\" \n                    purgePolicy=\"ValidateAllConnections\" \n                /&gt; \n            &lt;/dataSource&gt; \n        &lt;/server&gt;\n</code></pre>"},{"location":"helm_configure_db.html#section_cll_jkh_jzb","title":"Connecting to a PostgreSQL database","text":"<p>The PostgreSQL jdbc driver has been included and can be found at ${server.config.dir}/lib.</p> <pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles: \n      . . .\n      postgreSQLOverride: |  \n        &lt;server&gt; \n          &lt;!-- Disable the hard-coded derby datasource --&gt;\n          &lt;dataSource id=\"leapDerbyDatasource\" jndiName=\"disabled\" /&gt;\n          &lt;!-- Adds the jdbc library to the Leap application classpath --&gt;        \n          &lt;library id=\"jdbcPostgreSQL\" &gt; \n            &lt;fileset dir =\"${server.config.dir}/lib\" includes=\"postgresql.jar\" /&gt; \n          &lt;/library&gt; \n          &lt;application id=\"leap\"&gt;\n            &lt;classloader id=\"leapClassloader\" commonLibraryRef=\"jdbcPostgreSQL\"/&gt;\n          &lt;/application&gt;        \n          &lt;authData id=\"postgresAuthAlias\" user=\"${DB_USERNAME}\" password=\"${DB_PASSWORD}\" /&gt;  \n          &lt;dataSource id=\"leapPostgresDataSource\" jndiName=\"jdbc/BuilderDataSource\" containerAuthDataRef=\"postgresAuthAlias\"&gt; \n            &lt;properties.postgresql  \n                serverName=\"postgresql.acme.com\"  \n                databaseName=\"leapDB\"\n                portNumber=\"5432\"\n            /&gt;\n            &lt;jdbcDriver libraryRef=\"jdbcPostgreSQL\"/&gt; \n            &lt;connectionManager connectionTimeout=\"180\" maxPoolSize=\"100\" minPoolSize=\"1\" numConnectionsPerThreadLocal=\"1\" /&gt; \n          &lt;/dataSource&gt; \n        &lt;/server&gt;\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_configure_ldap.html","title":"Connect Leap to LDAP","text":"<p>To connect Leap with an LDAP you must use the configOverrideFiles parameter. A sample snippet has been provided, which will need to be updated with your specific details.</p> <p>Below is an example snippet of configuring Leap to use an LDAP server as part of a federated repository. The baseDN, bindDN and bindPassword will need to be replaced with the proper values. The searchBase for the ldap entity types will also need to be updated. The participatingBaseEntry will need to match the baseDN defined in the LDAP server snippet.</p> <p>Valid values for the \"ldapType\" are:</p> <ul> <li>Custom</li> <li>IBM Lotus Domino</li> <li>IBM SecureWay Directory Server</li> <li>IBM Tivoli Directory Server</li> <li>Microsoft Active Directory</li> <li>Netscape Directory Server</li> <li>Novell eDirectory</li> <li>Sun Java System Directory Server</li> </ul> <p>It is recommended to specify a \"realmName\" as it makes it easier to reference entries from this LDAP configuration, specifically in the Leap role assignments.</p> <p>For more specific details on what is supported by OpenLiberty, refer to their ldap registry documentation.</p> <p>Note: The userSecurityNameMapping and groupSecurityNameMapping are required. These properties control how users and groups are displayed while using Leap.</p> <p>Note: For Leap to be able to send mail the loginProperty must be set to mail.</p>"},{"location":"helm_configure_ldap.html#example-connecting-to-openldap","title":"Example connecting to OpenLdap","text":"<pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles: \n      . . .\n      ldapOverride: | \n        &lt;server description=\"leapServer\"&gt; \n           &lt;federatedRepository id=\"leapRepo\"&gt; \n             &lt;primaryRealm name=\"FEDREALM\"&gt; \n               &lt;participatingBaseEntry name=\"dc=Acme\"/&gt; \n               &lt;userSecurityNameMapping outputProperty=\"mail\" /&gt; \n               &lt;groupSecurityNameMapping outputProperty=\"cn\" /&gt; \n             &lt;/primaryRealm&gt; \n           &lt;/federatedRepository&gt;\n           &lt;ldapRegistry id=\"OpenLdap\" \n              name=\"dc=Acme\" \n              ldapType=\"Custom\" \n              host=\"ldaphost.acme.com\" port=\"389\" \n              baseDN=\"dc=Acme\" \n              searchTimeout=\"8m\" \n              ignoreCase=\"true\" \n              bindDN=\"cn=Manager,dc=Acme\" \n              bindPassword=\"secret\" \n              sslEnabled=\"false\" \n              derefAliases=\"never\"&gt; \n                &lt;loginProperty name=\"mail\"&gt;&lt;/loginProperty&gt; \n                &lt;ldapEntityType name=\"PersonAccount\"&gt; \n                  &lt;objectClass&gt;inetOrgPerson&lt;/objectClass&gt; \n                  &lt;searchBase&gt;ou=People,dc=Acme&lt;/searchBase&gt; \n                &lt;/ldapEntityType&gt; \n                &lt;ldapEntityType name=\"Group\"&gt; \n                  &lt;objectClass&gt;groupOfUniqueNames&lt;/objectClass&gt; \n                  &lt;searchBase&gt;ou=Groups,dc=Acme&lt;/searchBase&gt; \n                &lt;/ldapEntityType&gt; \n                &lt;customFilters userIdMap=\"*:mail\" groupIdMap=\"*:cn\" groupMemberIdMap=\"*:uniqueMember\" userFilter=\"(&amp;amp;(mail=%v)(objectclass=inetOrgPerson))\" groupFilter=\"(&amp;amp;(cn=%v)(objectclass=groupOfUniqueNames))\"/&gt; \n           &lt;/ldapRegistry&gt; \n        &lt;/server&gt;\n</code></pre>"},{"location":"helm_configure_ldap.html#example-connecting-to-domino-ldap","title":"Example Connecting to Domino LDAP","text":"<pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles: \n      . . .\n      ldapOverride: | \n        &lt;server description=\"leapServer\"&gt; \n           &lt;federatedRepository id=\"leapRepo\"&gt; \n             &lt;primaryRealm name=\"FEDREALM\"&gt; \n               &lt;participatingBaseEntry name=\"o=Acme\"/&gt; \n               &lt;userSecurityNameMapping outputProperty=\"mail\" /&gt; \n               &lt;groupSecurityNameMapping outputProperty=\"cn\" /&gt; \n             &lt;/primaryRealm&gt; \n           &lt;/federatedRepository&gt;\n           &lt;ldapRegistry id=\"DominoLdap\" \n              name=\"o=Acme\" \n              ldapType=\"IBM Lotus Domino\" \n              host=\"ldaphost.acme.com\" port=\"389\" \n              baseDN=\"o=Acme\" \n              searchTimeout=\"8m\" \n              ignoreCase=\"true\" \n              bindDN=\"cn=Manager/o=Acme\" \n              bindPassword=\"secret\"\n              realmName=\"acmeRealm\" \n              sslEnabled=\"false\" \n              derefAliases=\"never\"&gt; \n                &lt;loginProperty name=\"mail\"&gt;&lt;/loginProperty&gt; \n                &lt;ldapEntityType name=\"PersonAccount\"&gt; \n                  &lt;objectClass&gt;dominoPerson&lt;/objectClass&gt;\n                &lt;/ldapEntityType&gt; \n                &lt;ldapEntityType name=\"Group\"&gt; \n                  &lt;objectClass&gt;dominoGroup&lt;/objectClass&gt; \n                &lt;/ldapEntityType&gt; \n                &lt;customFilters userIdMap=\"*:mail\" groupIdMap=\"*:cn\" groupMemberIdMap=\"dominoGroup:member\" userFilter=\"(&amp;amp;(mail=%v)(objectclass=dominoPerson))\" groupFilter=\"(&amp;amp;(cn=%v)(objectclass=dominoGroup))\"/&gt; \n           &lt;/ldapRegistry&gt; \n        &lt;/server&gt;\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_configure_roleMapping.html","title":"Configure Leap Role Mapping","text":"<p>There are 3 roles that must be configured for proper access to Leap: \"Administrative Users\", \"EditApplicationUsers\", and \"UseApplicationUsers\".</p> <ul> <li>AdministrativeUsers can access the admin configuration page, admin dashboard, edit existing applications, create and use applications.</li> <li>SuperAdminUsers can access the admin dashboard, and edit all Leap applications. They do not have access to application data. To access the data, a user must be added to a role within the application and the application must be redeployed.</li> <li>EditApplicationUsers can create and use application.</li> <li>UseApplicationUsers can use applications.</li> </ul> <p>The Edit and Use roles support an extra property that adds all authenticated users to the role. Valid values are true and false.</p> <p>These properties are defined in the .yaml file.  Below is a basic example of mapping users to the roles.</p> <pre><code>configuration:\n  leap:\n    . . .\n    roleMapping:\n       AdministrativeUsers:\n         MappedUsers:\n          - leapadmin\n       SuperAdminUsers:\n         MappedUsers:\n          - appsuper\n       EditApplicationsUsers:\n         AllAuthenticated: false\n         MappedUsers:\n          - leapadmin\n       UseApplicationsUsers:\n         AllAuthenticated: true\n</code></pre>"},{"location":"helm_configure_roleMapping.html#ref_usergroup_ldap","title":"Reference a User/Group from LDAP","text":"<p>To reference a specific user or group from a connected LDAP requires specific syntax, \"realmName/userOrGroupId\".  The realmName referenced here is the property from the ldapRegistry object, refer to Connect Leap to LDAP.</p>"},{"location":"helm_configure_roleMapping.html#map_user_ldap","title":"Mapping a user from LDAP","text":"<pre><code>configuration:\n  leap:\n    . . .\n    roleMapping:\n       AdministrativeUsers:\n         MappedUsersAccessIDs:\n          - acmeRealm/cn=Admin,o=Acme\n</code></pre>"},{"location":"helm_configure_roleMapping.html#map_group_ldap","title":"Mapping a group from LDAP","text":"<pre><code>configuration:\n  leap:\n    . . .\n    roleMapping:\n       AdministrativeUsers:\n         MappedGroupsAccessIDs:\n          - acmeRealm/cn=Sales,o=Acme\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_configure_smtp.html","title":"Connecting to an SMTP Server","text":"<p>To connect Leap with an SMTP server you must use the configOverrideFiles parameter. </p> <p>Below is an example snippet of configuring Leap to use a mail server. The smtp host will need to be replaced with the proper hostname of the mail server. If authentication is required to communicate with the mail server then replace smtpUser and smtpPassword with the correct values, otherwise remove those likes from the snippet.</p> <p>{#codeblock_xhw_l5s_gxb} <pre><code>configuration: \n  leap: \n    . . .\n    configOverrideFiles: \n      . . .\n      mailOverride: | \n        &lt;server description=\"leapServer\"&gt; \n            &lt;mailSession  \n                id=\"leapMail\"\n                host=\"smtphost.com\"  \n                from=\"no-reply@smtphost.com\"  \n                jndiName=\"mail/BuilderMailSession\"  \n                description=\"Leap MailSession\"  \n                mailSessionID=\"leapMail\" \n                user=\"smtpUser\" \n                password=\"smtpPassword\"&gt; \n                &lt;property name=\"mail.smtp.auth\" value=\"false\" /&gt; \n                &lt;property name=\"mail.smtp.port\" value=\"25\" /&gt; \n            &lt;/mailSession&gt; \n        &lt;/server&gt;\n</code></pre></p> <p>Parent topic: Preparation</p>"},{"location":"helm_configure_ssl.html","title":"Configure SSL behavior","text":"<p>The default behavior of Open Liberty is that it will not trust any default certificates, which are typically included in all mainstream browsers. By providing this config setting, the default certificates will be trusted enabling communication with third-party services.</p> <pre><code>configuration:\n\u00a0 leap:\n\u00a0 \u00a0 configOverrideFiles:\n      . . .\n\u00a0 \u00a0 \u00a0 sslOverride: |\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_container_registry_secret.html","title":"Creating a container registry secret","text":""},{"location":"helm_container_registry_secret.html#about-this-task","title":"About this task","text":"<p>This is an optional task for environments that require authentication with your container registry.</p> <p>The steps to create the secret will vary depending on the type of authentication used. It is recommended to refer to your cloud provider\u2019s documentation for complete steps on creating the Kubernetes secret. </p> <p>Some general guidance: - The secret type is <code>docker-registry</code> - You must know the name of the registry. - You must include the namespace argument -n, followed by the namespace where you are installing Leap.</p> <p>There are several methods of authenticating, this guidance will provide some examples in different scenarios.</p>"},{"location":"helm_container_registry_secret.html#scenario-1-you-are-authenticating-with-a-service-key-file","title":"Scenario 1: You are authenticating with a service key file","text":"<p>In this example a service account has been created that contains the required permissions to access your container registry. In this example, the following names are used:</p> <ul> <li>secret_name: the name of the secret you are creating. For example <code>registry-secret</code></li> <li>namespace: the Leap namespace. For example, \u201cleap\u201d.</li> <li>repo_name: the repository you are authenticating with. For example us-docker.pkg.dev</li> <li>_json_key: If you are using a key file, leave this at _json_key.</li> <li>example_key.json: Enter the full path to your key file.</li> <li>example@example.com: Enter an email address for your Kubernetes administrator.</li> </ul> <p>Run the command to create the secret: <pre><code>kubectl create secret docker-registry &lt;secret_name&gt; -n &lt;namespace&gt; --docker-server=repo_name --docker-username=_json_key \u2013docker-password=$(cat example_key.json) --docker-email=example@example.com\n</code></pre></p> <p>For example: <pre><code>kubectl create secret docker-registry registry-secret -n leap --docker-server=us-docker.pkg.dev --docker-username=_json_key --docker-password=\"$(cat  example_key.json)\" --docker-email=example.admin@hcl-software.com\n</code></pre></p>"},{"location":"helm_container_registry_secret.html#scenario-2-you-are-authenticating-with-user-name-and-password","title":"Scenario 2: You are authenticating with user name and password","text":"<p>This is a less secure method of authenticating. In this example you have a user name and a password for the container repository. Execute the commands and ensure to replace the following elements with your environment details.</p> <ul> <li>secret_name: the name of the secret you are creating. For example <code>registry-secret</code></li> <li>namespace: the Leap namespace. For example, \u201cleap\u201d.</li> <li>repo_name: the repository you are authenticating with. For example us-docker.pkg.dev</li> <li>the_username: User name used to authenticate.</li> <li>the_password: The password used to authenticate.</li> <li>example@example.com: Enter an email address for your Kubernetes administrator.</li> </ul> <pre><code>kubectl create secret docker-registry &lt;secret_name&gt; -n &lt;namespace&gt; --docker-server=repo_name --docker-username=the_username \u2013docker-password=the_password --docker-email=example@example.com\n</code></pre> <p>For example: <pre><code>kubectl create secret docker-registry registry_secret -n leap --docker-server= us-docker.pkg.dev --docker-username=exampleuser \u2013docker-password=thepassword --docker-email=admin.example@example.com\n</code></pre></p> <p>Define the secret name in the custom-values.yaml file.</p> <ol> <li>Open the <code>custom-values.yaml</code> file.</li> <li>Locate the <code>images:</code> section of the file.</li> <li>Add these new lines to the <code>images:</code> section. The first two lines should be indented with two spaces. The last line should be indented with 4 spaces. Substitute the secret name you created for this purpose where you see <code>registry_secret</code>.</li> </ol> <pre><code>  #secret used for container registry\n  imagePullSecrets:\n    - name: registry_secret\n</code></pre> <ol> <li>Save and close the values.yaml file.</li> </ol> <p>Parent topic: Helm load images</p>"},{"location":"helm_creating_custom_values_file.html","title":"Creating and formatting the custom-values.yaml","text":""},{"location":"helm_creating_custom_values_file.html#about-this-task","title":"About this task","text":"<p>The Leap deployment requires a custom-values.yaml file that defines the settings for your deployment. When working with yaml files in Kubernetes it is important to understand and remember the following guidelines:</p> <ul> <li>The file has section names, some of which have nested section names. Values must be placed in the correct section using the correct indentation in order for them to be valid.</li> <li>Do not duplicate top-level section names. If you are configuring a setting that belongs in a certain section, check your file for the section name first, then add the value to the existing section. If no such section exists, you can create a new section with the required section name.</li> <li>Indentation is always done in increments of two spaces, never a tab key.</li> <li>Variable names always begin with a lower case letter, and words are typically \u201ccamelCase\u201d.</li> <li>Comments can be used in the file, and should begin with a single hash followed by a space (# ). As a best practice each variable should be documented.</li> <li>The file consists of key pairs separated by a colon (:) never an equals sign. Values can contain an equals sign or a colon but they must be in double-quotes.</li> </ul>"},{"location":"helm_creating_custom_values_file.html#procedure","title":"Procedure","text":"<ol> <li>Create a new file <code>custom-values.yaml</code> using a text editor on the machine where you will run helm. </li> </ol> <p>For example using vi:  <code>vi custom-values.yaml</code></p> <ol> <li>Create a new section name by adding a single line to the beginning of the file:</li> </ol> <p><code>configuration:</code></p> <ol> <li>Save and close the file.</li> </ol>"},{"location":"helm_creating_custom_values_file.html#what-to-do-next","title":"What to do next","text":"<p>Load images</p> <p>Parent topic: Prepare a custom configuration file</p>"},{"location":"helm_deploy_custom_extension.html","title":"Deploy custom extension","text":"<p>A custom extension, which historically was a .jar file located in the .../Leap/extensions directory, may also be deployed into your Leap Kubernetes deployment.</p> <ol> <li> <p>The container must have a RWX persistent volume, see Persistent Volume Claims.</p> </li> <li> <p>Create an 'extensions' directory in the RWX persistent volume.</p> </li> <li> <p>Copy your custom extensions into the 'extensions' directory in the persistent volume.  When the pod is started, any files in this directory will be copied into the 'customerExtensions' directory (within the pod).  Leap will automatically register any extension in the 'customerExtensions' directory.</p> </li> </ol> <p>Note: If files are added to this directory while the system is running then it will need to be restarted.</p>"},{"location":"helm_deploy_custom_extension.html#verify-the-custom-extension-deployment","title":"Verify the custom extension deployment","text":"<ol> <li>On pod startup there will be a message to indicate the status. Check the logs to locate this message:</li> </ol> <pre><code>[...]$ kubectl -n dxns logs leap-deployment-leap-0\n\n...\nFound mounted extension files in '/mnt/rwx/extensions'. Copying files to '/opt/openliberty/wlp/usr/servers/defaultServer/customerExtensions'\n...\n</code></pre> <ol> <li>You can also open a shell to the Leap server to verify that the files were copied.</li> </ol> <pre><code>[...]$ kubectl -n dxns exec --stdin --tty leap-deployment-leap-0 -- /bin/bash\n[...]$ ls -al /opt/openliberty/wlp/usr/servers/defaultServer/customerExtensions/\n</code></pre> <ol> <li>Leap will also show, in the logs, that the extension was registered successfully.</li> </ol> <pre><code>[4/18/24 16:33:29:454 PDT] 000000c2 id=00000000 com.ibm.form.platform.service.framework.DirectoryWatcher     I processArtifact FSPDI5: The Bundle, sampleExtension.jar loaded successfully.\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_extending_image.html","title":"Enabling additional Open Liberty features","text":"<p>Learn how to install additional Open Liberty server features by extending the Leap image.</p> <p>The Leap image is shipped with the following server features:</p> <ul> <li>adminCenter-1.0</li> <li>appSecurity-3.0</li> <li>federatedRegistry-1.0</li> <li>javaMail-1.6</li> <li>jdbc-4.2</li> <li>jndi-1.0</li> <li>jpa-2.2</li> <li>jwtSso-1.0</li> <li>ldapRegistry-3.0</li> <li>localConnector-1.0</li> <li>mpJwt-2.1</li> <li>openidConnectClient-1.0</li> <li>passwordUtilities-1.0</li> <li>restConnector-2.0</li> <li>servlet-4.0</li> <li>transportSecurity-1.0</li> </ul> <p>Open Liberty has many features that can be enabled. Some features have dependencies on other features, which will be installed automatically. For more information, see the Open Liberty documentation.</p> <p>If you require a different feature to be installed, you may extend our image. This can be accomplished by creating a Dockerfile. See the following example:</p> <pre><code>FROM &lt;image-repo&gt;\n\nRUN /opt/openliberty/wlp/bin/featureUtility installFeature &lt;feature-to-install&gt;\n</code></pre> <p>After creating a Dockerfile, build the new docker image:</p> <ol> <li>With docker engine running, open command prompt.</li> <li>Execute the following command: <code>cd &lt;to-path-of-docker-file&gt;</code></li> <li>Execute the following command: <code>docker build .</code></li> </ol> <p>A new image with the specified feature is installed. Use this extended image when running helm.</p> <p>Note: This is the only supported mechanism for enabling Open Liberty features. There are many features that can be added that have not been tested by HCL and you do so at your own risk. HCL will provide best-effort support for added features as it pertains to Leap.</p> <p>Parent topic: Preparation</p>"},{"location":"helm_install_commands.html","title":"Install commands to deploy","text":"<p>This topic details install commands that are used to deploy HCL Leap Helm Charts.</p>"},{"location":"helm_install_commands.html#section_ogm_n44_hzb","title":"Install commands","text":"<p>Important: Modification to any files (chart.yaml, templates, etc) in hcl-leap-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz is not supported.</p> <p>To run the installation of your prepared configurations using Helm, use the following command:</p> <pre><code># Helm install command \nhelm install -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-leap-\ndeployment-vX.X.X_XXXXXXXX-XXXX.tar.gz \n</code></pre> <ul> <li> <p>The <code>my-namespace</code> is the namespace where your HCL Leap deployment is installed to.</p> </li> <li> <p>The <code>-f path/to/your/custom-values.yaml</code> must point to the custom-values.yaml you have created, which contains all deployment configuration.</p> </li> <li> <p><code>your-release-name</code> is the Helm release name and prefixes all resources created in that installation, such as Pods, Services, and others.</p> </li> <li> <p><code>path/to/hcl-leap-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz</code> is the HCL Leap Helm Chart that you have extracted as described earlier in the planning and preparation steps.</p> </li> </ul> <p>After a successful deployment, Helm responds with the following message:</p> <pre><code>NAME: leap \n    LAST DEPLOYED: Thu Jun 17 14:27:58 2023 \n    NAMESPACE: my-namespace \n    STATUS: deployed \n    REVISION: 1 \n    TEST SUITE: None \n</code></pre>"},{"location":"helm_install_commands.html#section_hyj_w44_hzb","title":"Default URLs post installation","text":"<p>During the configuration process, you might need the following URLs to access different user interfaces.</p> <p>Use the following default URLs to access HCL Leap and OpenLiberty Console:</p> <p>HCL Leap</p> <pre><code>http://yourserver/apps\n</code></pre> <p>HCL Leap Rest API</p> <pre><code>http://yourserver/apps-basic\n</code></pre> <p>There are a few endpoints that can be helpful for identifying and debugging datasource connections:</p> <p>View DataSource Configuration</p> <pre><code>https://yourserver/ibm/api/config/dataSource/&lt;datasourceId&gt;\n</code></pre> <p>The result is an html page that shows a json output of the configuration that is known by the server.</p> <p>Validate DataSource Connection</p> <pre><code>https://yourserver/ibm/api/validation/dataSource/&lt;dataSourceId&gt;\n</code></pre> <p>Endpoint attempts to make a database connection, the result is a json output that shows the result. If the connection fails, the output may contain more detail to assist in the troubleshooting.</p> <p>Parent topic: Kubernetes Helm deployment</p>"},{"location":"helm_jvm_options.html","title":"JVM options","text":"<p>JVM options can be specified by passing them as environment variables.</p> <p>The snippet below sets the maximum jvm memory usage to 2GB.</p> <pre><code>environment:\n   pod:\n     leap:\n       name:  JVM_ARGS\n       value: \"-Xmx2048m\"\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_leap_properties.html","title":"Leap properties","text":"<p>The leapProperties parameter can be used to add or modify properties to Leap.</p> <p>Note: The property ibm.nitro.NitroConfig.loginIdIsEmail must be added and set to true.</p> <p>Below is an example snippet of setting leap-specific properties:</p> <pre><code>configuration:\n   leap:\n      . . .\n     leapProperties: | \n        ibm.nitro.InfoEntryPoint.dailyInfo = &lt;div&gt;Welcome to &lt;b&gt;HCL Leap 9.3.2&lt;/b&gt; in Kubernetes!&lt;/div&gt; \n        ibm.nitro.NitroConfig.serverURI=http://myleapserver.example.com\n        ibm.nitro.NitroConfig.loginIdIsEmail = true\n</code></pre> <p>For more information, see Configuration properties.</p> <p>Parent topic:Preparation</p>"},{"location":"helm_load_images.html","title":"Load images","text":""},{"location":"helm_load_images.html#about-this-task","title":"About this task","text":"<p>The Leap image must be in a container registry or repository that can be accessed by the Kubernetes or OpenShift cluster. </p>"},{"location":"helm_load_images.html#before-you-begin","title":"Before you begin","text":"<p>Depending on your cloud provider, there may be different types of default container image repositories already configured. Refer to the documentation of your cloud provider for setup and use of such platform container image repository.</p> <p>It is assumed that you have a repository configured and running, and is reachable from all your Kubernetes or OpenShift cluster nodes. You must know the name of the repository in order to complete this task. If you are unsure what the name of the repository is, consult with your cloud provider documentation.</p> <p>In the following guidance, the Docker CLI is used as a command reference. Tools like Podman may also be used, but are not described in this documentation. The procedure for the use of such tools are the same.</p> <p>Authentication</p> <p>If your container registry requires authentication, you must configure the Docker CLI to authenticate prior to completing the procedure. If you are uncertain if you have configured authentication you can type in the command: <pre><code>cat ~/.docker/config.json\n</code></pre></p> <p>If the docker CLI not authenticated, follow the instructions from your cloud provider to authenticate. The steps vary depending on the type of authentication used.</p>"},{"location":"helm_load_images.html#procedure","title":"Procedure","text":"<ol> <li> <p>Download the Leap installation file labeled for Kubernetes from the My HCLSoftware portal. </p> </li> <li> <p>Extract the downloaded zip file. The compressed file contains the Leap image as well as the helm chart that is used for the installation. The file labeled image is the container image that will be pushed to your container registry. (Do not further extract either of these two files).</p> </li> <li> <p>Run the <code>docker load</code> command and reference the image file. For example, if the image file name is hcl-leap-image-v1.0.0_20240507-2050-9.3.6.31.tar.gz then use the command: <pre><code>docker load --input hcl-leap-image-v1.0.0_20240507-2050-9.3.6.31.tar.gz\n</code></pre></p> </li> <li> <p>Review the output from the screen, where you see \u201cLoaded image\u201d the part before the colon is the name of the source image. The version number is listed after. Note the source image name and version for a later step.</p> </li> <li> <p>Run the <code>docker tag</code> command. You will need 3 pieces of information to run this command:   a. Source image name:  This was retrieved from step 4.   b. Target image path: The target image path is the hostname and port (if it is not 443) of your repository.   c. Tag name: You can use the version of your Leap deployment, for example 9.3.7.15, or you can simply use the word \u201clatest\u201d. You will need to use this tag name in the custom-values.yaml file later.</p> </li> </ol> <p>Now run the command: <pre><code>docker tag &lt;source_image_name&gt; &lt;target_image_path&gt;:&lt;tag_name&gt;\n</code></pre></p> <p>For example: <pre><code>docker tag leap/hcl-leap:v1.0.0_20240507-2050 us-docker.pkg.dev/hclexample:latest\n</code></pre></p> <ol> <li>Run the <code>docker push</code> command to push the image into the repository. For this step you will need the target image path from step 5b and the tab name from step 5c. <pre><code>docker push &lt;target_image_path&gt;:&lt;tag_name&gt;.\n</code></pre></li> </ol> <p>For example: <pre><code>docker push us-docker.pkg.dev/hclexample:latest\n</code></pre></p> <ol> <li>Open your custom-values.yaml file.  You will need the hostname and port of your repository and the tag that was selected in step 5c. Substitute your values and modify the below lines to fit your environment.</li> </ol> <pre><code>images: \n  # repository name\n  repository: \u201cdocker.pkg.dev/hclexample\u201d\n  # Image tag for each application \n  tags: \n    leap: latest\n</code></pre> <ol> <li>Save and close the custom_values.yaml.</li> </ol>"},{"location":"helm_load_images.html#what-to-do-next","title":"What to do next","text":"<p>If your container registry requires authentication, complete the topic Creating a Container Registry Secret.</p> <p>Proceed to Persistent Volume Claims.</p>"},{"location":"helm_load_images.html#additional-topics","title":"Additional Topics","text":"<ul> <li>Creating a Container Registry Secret</li> </ul> <p>Parent topic: Preparation</p>"},{"location":"helm_oidc_config.html","title":"Configuring Leap with OIDC","text":"<p>This topic describes how to configure an HCL Leap server that was deployed using Helm with an OpenID Connect identity provider.</p>"},{"location":"helm_oidc_config.html#section_lmm_5mt_b1c","title":"Configuring Leap with OIDC","text":"<p>Leap can be configured to leverage OpenID Connect (OIDC) as the primary authentication mechanism. This means that Leap will be turned into a Relying Party (RP) to the specified identify provider (IDP). When OIDC is used, the user and group lookup feature of Leap is not available and must be disabled as part of the configuration.</p> <p>The following tasks must be completed to establish this configuration:</p> <ol> <li>Configure the OIDC identity provider.</li> <li>Create a secret in Kubernetes container from the IDP server certificate.</li> <li>Add an OIDC definition as a server customization.</li> <li>Add configuration properties related to the OIDC configuration.</li> <li>Restart the pod.</li> </ol>"},{"location":"helm_oidc_config.html#section_zj4_xmt_b1c","title":"Configure OIDC identity Provider","text":"<p>Many different identity providers offer OIDC capability. Refer to your chosen identity provider's documentation for more details on configuration.</p>"},{"location":"helm_oidc_config.html#section_cch_1nt_b1c","title":"Create a secret in Kubernetes container from the IDP certificate","text":"<p>As part of the configuration process for your identify provider, you will have created or obtained a digital certificate for configuring HTTPS. This certificate will also need to be deployed to Leap so that the two servers can communicate with each other.</p> <p>Note: The SSL certificate (.crt) and public key (.key) should be in PKCS12 format.</p> <p>After copying the <code>.key</code> and <code>.crt</code> to the kubernetes image, create a secret using the following command:</p> <pre><code>kubectl -n myns create secret tls oidccert --key=\"/tmp/oidc.key\" --cert=\"/tmp/oidc.crt\"\n</code></pre> <p>Next, this secret can be referenced in the yaml file:</p> <pre><code>configuration:\n  leap:\n    . . .\n    customCertificateSecrets:\n      keycloakCert: \"keycloakcert\"\n</code></pre> <p>For more information, see to Provide admin user a custom secret.</p>"},{"location":"helm_oidc_config.html#section_vxv_fnt_b1c","title":"Add OIDC definition as a server customization","text":"<p>The properties that you need to specify may differ based on your identify provider. For additional information, see the Open Liberty documentation on OpenID Connect.</p> <p>Before moving on from this step:</p> <ul> <li>Verify that the discoveryEndpointURL is valid by opening it in a browser prior to entering it in the yaml file.</li> <li>Update the clientSecret with the proper value obtained from your IDP</li> </ul> <p>The following snippet is an example of an OIDC definition:</p> <p><pre><code>configOverrideFiles:\n  . . .\n  openIdConnect: |\n    &lt;server description=\"leapServer\"&gt;\n      &lt;openidConnectClient id=\"oidc\"\n        clientId=\"hcl-leap-oidc-client\"\n        clientSecret=\"clientSecretHash\"\n        signatureAlgorithm=\"RS256\"\n        authFilterRef=\"interceptedAuthFilter\"\n        mapIdentityToRegistryUser=\"false\"\n        httpsRequired=\"true\"\n        scope=\"openid\"\n        realmName=\"LeapOidc\"\n        groupIdentifier=\"group_membership\"\n        userIdentityToCreateSubject=\"preferred_username\"\n        discoveryEndpointUrl=\"https://myoidcserver:8443/realms/Leapdev/.well-known/openid-configuration\"&gt;\n      &lt;/openidConnectClient&gt;\n      &lt;authFilter id=\"interceptedAuthFilter\"&gt;\n        &lt;requestUrl id=\"authRequestUrl\" matchType=\"contains\" urlPattern=\"/apps/secure\"/&gt;\n      &lt;/authFilter&gt;\n    &lt;/server&gt; \n</code></pre> General Notes:  </p> <ul> <li><code>realmName</code>: Defines a qualify that can be used to refer to users and groups from this OIDC config</li> <li><code>groupIdentifier</code>: The property of the token that contains the user's group assignments</li> </ul> <p>Microsoft Azure AD Notes:  </p> <ul> <li><code>scope</code>: A value of <code>\"openid profile\"</code> is required to get the <code>preferred_username</code> claim, which is a reasonable claim to use for <code>userIdentityToCreateSubject</code>. The application registration in Azure AD is required to have the \"openid\" and \"profile\" permissions.</li> <li><code>groupIdentifier</code>: Recommended value is <code>\"groups\"</code>; however, this might depend on the Azure AD environment</li> <li><code>discoveryEndpointUrl</code>: Is likely to be <code>https://login.microsoftonline.com/[tenant id]/v2.0/.well-known/openid-configuration</code></li> </ul> <p>For more details on defining a server customization, see Open Liberty server customizations.</p>"},{"location":"helm_oidc_config.html#section_r3z_knt_b1c","title":"Add config properties related to OIDC config","text":"<p>The following properties must be set to complete the OIDC configuration:</p> <ul> <li>userLookups - By setting this to false it will disable user lookups, which is not available when configured with OIDC.</li> <li>userGroups - By setting this to false it will disable group lookups, which is not available when configured with OIDC.</li> <li>postLogoutRedirectURL - This is the URL to which Leap will redirect the browser after a user chooses to log out. This is necessary to complete the loop with the OIDC IDP.</li> <li>reauthOnFailedRequest, reauthInNewWindow - When the user's session expires, these settings enable the user to reauthenticate in a pop-up window and not lose any unsaved work</li> </ul> <pre><code>configuration:\n  leap:\n    . . .\n    leapProperties: |\n      ibm.nitro.NitroConfig.userLookup=false\n      ibm.nitro.NitroConfig.userGroups=false \n      ibm.nitro.NitroConfig.reauthOnFailedRequest=true \n      ibm.nitro.NitroConfig.reauthInNewWindow=true \n      ibm.nitro.LogoutServlet.postLogoutRedirectURL=https://myoidcServer.com/realms/Leap/protocol/openid-connect/logout?client_id=hcl-leap-oidc-client&amp;post_logout_redirect_uri=https://myLeapServer.com/apps/secure/org/ide/manager.html\n</code></pre> <p>For more details on setting Leap properties, see Leap properties.</p>"},{"location":"helm_oidc_config.html#referencing-users-and-groups-in-security-role-mapping","title":"Referencing Users and Groups in Security Role Mapping","text":"<p>To assign a user or group from OIDC to one of the Leap roles (AdministrativeUsers, EditApplicationUsers, UseApplicationUsers) you must use their access id.  The access id is made up of the realmName (defined in the 'openidConnectClient' definition) and the user or group name.  </p> <p>To assign a user from OIDC to a Leap security role you would use {realmName}/{userName}: <pre><code>configuration:\n  leap:\n    ...\n    roleMapping:\n      ...\n      EditApplicationsUsers:\n        MappedUsersAccessIDs:\n        - LeapOidc/john.oidc\n</code></pre></p> <p>To assign a group from OIDC to a Leap security role you would use {realmName}/{groupName}: <pre><code>configuration:\n  leap:\n    ...\n    roleMapping:\n      ...\n      EditApplicationsUsers:\n        MappedGroupsAccessIDs:\n        - LeapOidc//Group1\n</code></pre> Note: there is an extra slash in the group name because that is part of the definition in the IDP used for this example. Other IDPs may differ in how they define the group name, if in doubt leverage the logging trace string to identify the correct value.</p>"},{"location":"helm_oidc_config.html#troubleshooting","title":"Troubleshooting","text":"<p>To get more information about how Liberty perceives the logged in user, add the trace string 'com.ibm.ws.security.authentication.*=all'.  This will provide useful information for understanding the user and group values.  An example output in the trace.log, after logging in, looks like:</p> <p><pre><code>    Principal: WSPrincipal:john.oidc\n    Public Credential: com.ibm.ws.security.credentials.wscred.WSCredentialImpl@cb847b2d,realmName=LeapOidc,securityName=john.oidc,realmSecurityName=LeapOidc/john.oidc,uniqueSecurityName=john.oidc,primaryGroupId=null,accessId=user:LeapOidc/john.oidc,groupIds=[group:LeapOidc//Group2]\n    Private Credential: IDToken:{\"exp\":1710363581,\"iat\":1710363281,\"auth_time\":1710363280,\"jti\":\"f343b1fe-6a9a-482f-a85e-1cf46f4eb1b8\",\"iss\":\"https://myoidcserver:8443/realms/Leapdev\",\"aud\":\"hcl-leap-oidc-client\",\"sub\":\"9b8cd571-5d09-4de2-ba2d-22b985424831\",\"typ\":\"ID\",\"azp\":\"hcl-leap-oidc-client\",\"session_state\":\"fff63a5e-8269-4e69-b4c3-9d4135c028da\",\"at_hash\":\"ePO9yDI6IGdX1iDG17CNWQ\",\"acr\":\"1\",\"sid\":\"fff63a5e-8269-4e69-b4c3-9d4135c028da\",\"group_membership\":[\"/Group2\"],\"email_verified\":false,\"realmName\":\"Leapdev\",\"name\":\"John Oidc\",\"groups\":[\"default-roles-leapdev\",\"offline_access\",\"uma_authorization\"],\"preferred_username\":\"john.oidc\",\"given_name\":\"John\",\"family_name\":\"Oidc\",\"email\":\"john.oidc@acme.com\"} \n</code></pre> Note: If the groupIds array is empty then the 'openidConnectClient' is not configured properly; the group claim may be missing from the token or the 'groupIdentifier' may not be set to the correct value.</p>"},{"location":"helm_oidc_config.html#section_zq2_vmt_b1c","title":"Restart the pod","text":"<p>After restarting the Leap pod, accessing Leap should redirect you to authenticate using your OIDC IDP.</p> <p>Parent topic: Kubernetes Helm deployment</p>"},{"location":"helm_open_liberty_custom.html","title":"Open Liberty server customizations","text":"<p>The configOverrideFiles parameter allows configuration snippets to be passed to the Leap server.</p> <p>The snippets are merged into the Open Liberty server.xml. After making changes to the .yaml, apply them using the <code>helm upgrade ...</code> command. Changes are picked up by Open Liberty and applied at runtime - this does not require a restart.</p> <p>Note: The name of the customization (myCustomOverride1 in the following snippet) can be any string, but you may want it to be descriptive of what is being provided.</p> <p><pre><code>configuration: \n  leap:\n    . . . \n    configOverrideFiles: \n      myCustomOverride1: | \n        &lt;server description=\"leapServer\"&gt; \n          &lt;basicregistry id=\"leapRegistry\" realm=\"basicRealm\"&gt; \n            &lt;user name=\"newuser1\" password=\"passw0rd\" \n          &lt;/basicRegistry&gt; \n        &lt;/server&gt;\n</code></pre> There are several configuration changes that leverage this mechanism: </p> <ul> <li>Configure Database</li> <li>Configure LDAP</li> <li>Configure SMTP</li> <li>Configure SSL</li> <li>Configure LTPA</li> </ul> <p>Parent topic: Preparation</p>"},{"location":"helm_persistent_volume.html","title":"Persistent Volume Claims","text":"<p>Defining persistent volumes (PVs) for Leap is optional and dependent on your needs.</p> <p>The 3 volumes that may be required to operate Leap:</p> <ul> <li> <p>A volume specified as \u201cReadWriteMany\u201d. This will be used to pass database drivers or LTPA key files to be used by Leap. When the container is started, any files in this directory are copied into /opt/openliberty/wlp/usr/servers/defaultServer/misc. To reference files in this directory within your configuration snippets, use ${SERVER_CONFIG_DIR}/misc.</p> <p>In order to pass custom extensions to Leap, create an \"extensions\" directory in this volume. For more information see Deploy custom extension.</p> <p>Note: If files are added to this volume while the system is running then it will need to be restarted.</p> </li> <li> <p>A volume specified as \u201cReadWriteOnce\u201d. This will be used for log storage and is labeled \u201clog\u201d in the .yaml file.</p> </li> <li>A volume specified as \u201cReadWriteOnce\u201d. This will be used for the derby database and is labelled \u201crwo\u201d in the .yaml file. If not using derby, this volume is optional.</li> </ul> <p>These volumes can be directories in your Kubernetes operating system, or a location supplied by a cloud provider.</p>"},{"location":"helm_persistent_volume.html#section_bbh_5j4_hzb","title":"Persistent volume types","text":"<p>Important: Ensure that your PersistentVolumes (PVs) are created with the Reclaim Policy set to RETAIN. This allows for the reuse of PVs after a PersistentVolumeClaim (PVC) is deleted. This is important to keep data persisted, for example, between deployments or tests. Refrain from using the Reclaim Policy DELETE unless you have the experience in managing these operations successfully, to avoid unpredictable results. This is not recommended in production use, as deleting PVCs causes the Kubernetes or OpenShift cluster to delete the bound PV as well, thus, deleting all the data on it.</p> <p>ReadWriteOnce (RWO)</p> <p>ReadWriteOnce PVs allow only one pod per volume to perform reading and writing transactions. This means that the data on that PV cannot be shared with other pods and is linked to one pod at a time.</p> <p>ReadWriteMany (RWX)</p> <p>ReadWriteMany PVs support read and write operations by multiple pods. This means the data on that PV can be shared with other pods and can be linked to multiple pods at a time.</p>"},{"location":"helm_persistent_volume.html#section_hpf_xj4_hzb","title":"Configuration parameters","text":"<p>To access the PersistentVolumes (PVs) on your cluster, the HCL Leap Kubernetes or OpenShift deployment using Helm creates PersistentVolumeClaims (PVCs) that binds the PVs to the corresponding pods.</p> <p>Each PVC that Leap requires allows you to configure the following parameters, as shown below. For a PVC of the Leap application:</p> <pre><code># Persistent Volume Setup \nvolumes: \n  # Persistent Volumes for Leap \n  leap: \n    # RWX PVC shared by all Leap pods - RWX. Used to pass auxiliary binary files to all Pods on startup \n    rwx: \n      storageClassName: \"manual\" \n      requests: \n        storage: \"50Mi\" \n      # Optional volume name to specifically map to \n      volumeName: \n</code></pre> <p>StorageClassName</p> <p>Depending on your Cluster configuration, you may have configured a specific StorageClass that should be used for your PVs and the PVCs of HCL Leap.</p> <p>This property allows you to enter the name of the StorageClass you want the deployment to use. PVCs then only accepts PVs that match the StorageClassName you have defined in the configuration. If there are no PVs that match, the pods remain pending and do not start until a fitting PV is provided by the cluster.</p> <p>If you enter an empty StorageClassName, Kubernetes falls back to the default StorageClass configured in your Cluster. Refer to your cloud provider for additional information about your default StorageClass, since this depends on your Kubernetes or OpenShift environment.</p> <p>Reference the original values.yaml file you have extracted as outlined in the Prepare configuration topic for all configurable PVCs.</p> <p>Requests</p> <p>Storage. Storage allows you to define the amount of space that is required by the PVC. Once defined, it only accepts PVs that have the same or more storage capacity as requested. If there are no PVs matching the definitions, the pods remain pending and do not start until a properly-sized PV is provided by the cluster.</p> <p>Selector</p> <p>If you want your deployment to pick up specific PVs that you have created, the selector option can be used to match PVs by their labels.</p> <p>A detailed description on how to use the selector can be found in the official Kubernetes documentation.</p> <p>A PVC will only match with a PV satisfying the selector and all the other requirements such as type (RWO/RWX, as defined by the deployment itself), storage capacity, and StorageClassName.</p> <p>VolumeName</p> <p>If you want your deployment to pick up a specific PV that you have created, use of the VolumeName can define that instruction. Ensure that the PV you created has a unique name. Then, add that name as a configuration parameter for the PVC.</p> <p>The PVCs only matches with a PV of that name, matching the other requirements-like type (RWO/RWX, as defined by the deployment itself), storage capacity, and StorageClassName.</p> <p>As a single persistent Volume is assigned using the volumeName, this should only be used for RWX claims or for Pods that are only ever scaled to one replica.</p> <p>If a second PersistentVolumeClaim is created with the same volumeName, it can never be fulfilled as the names for Volumes are unique. Please refer to the Selector section to select specific PersistentVolumes for multiple claims.</p>"},{"location":"helm_persistent_volume.html#section_i4t_hk4_hzb","title":"Sample PVC configurations","text":"<p>The following are some examples for configuration of the PersistentVolumeClaims (PVCs) using your custom-values.yaml:</p> <p>Specific volume names</p> <p>Specifying a name ensures that Kubernetes or OpenShift only assigns PVs with the matching name to the PVCs created for the applications:</p> <pre><code># Persistent Volume Setup \nvolumes: \n  leap: \n    rwx: \n      volumeName: \u201cleap-binaries\u201d \n</code></pre> <p>Adjusted volume size for PVCs</p> <p>You may override the default sizes for PVCs by adjusting the storage requests:</p> <pre><code>volumes: \n  leap: \n    rwx: \n      requests: \n        storage: \"500Mi\" \n   rwo: \n      requests: \n        storage: \"50Mi\" \n    log: \n      requests: \n        storage: \"250Mi\" \n</code></pre>"},{"location":"helm_persistent_volume.html#section_helm_pv_trsht","title":"Troubleshooting","text":"<p>If the persistent volume is not working as expected, then verify that it is connected properly.</p> <ol> <li>Execute the following command to list out all the volumes registered with the pod</li> </ol> <pre><code>[...]$ kubectl -n dxns get pv\nNAME                   CAPACITY  ACCESS MODES RECLAIM POLICY STATUS CLAIM                         STORAGECLASS REASON AGE\nrwxvol-core-profile-1  100Gi     RWX          Retain         Bound  dxns/leap-deployment-leap-rwx manual              153d\n</code></pre> <ol> <li>Location the 'leap-deployment-leap-rwx' claim and verify that the directory listed in the 'name' exists and has the necessary r-w-x permissions.  For example, this may be located in a directory like '/home/centos/native-kube/volumes/rwxvol-core-profile-1'</li> </ol> <p>Parent topic: Preparation</p>"},{"location":"helm_preparation.html","title":"Preparation","text":"<p>This section outlines mandatory and optional tasks that need to be done before installation of the HCL Leap Container and later releases using Helm.</p> <p>Note: Deploying the Leap image without using our provided Helm chart is not recommended and not currently supported.</p>"},{"location":"helm_preparation.html#section_rkz_1h4_hzb","title":"Mandatory","text":"<ul> <li>Prepare a namespace</li> <li>Prepare configuration</li> <li>Load images</li> <li>Persistent Volume Claims</li> <li>Using custom secrets</li> </ul>"},{"location":"helm_preparation.html#section_bwh_bh4_hzb","title":"Optional","text":"<ul> <li>Probes configuration in values.yaml file</li> <li>SAML configuration</li> <li>Certificates</li> <li>Configure Database</li> <li>Configure SMTP</li> <li>Configure LDAP</li> <li>Configure SSL</li> <li>Configure Role Mapping</li> <li>Open Liberty server customizations</li> <li>Service Catalog</li> <li>Deploy custom extensions</li> <li>Leap properties</li> <li>JVM options</li> <li>Changing the log level</li> <li>Enabling additional Open Liberty features</li> </ul> <p>Parent topic: Kubernetes Helm deployment</p>"},{"location":"helm_prepare_namespace.html","title":"Prepare a namespace","text":"<p>Namespaces are used to group and isolate resources in the Kubernetes cluster. Leap is a deployment in the cluster, and it is recommended to create a namespace, then scope related resources to the namespace. </p> <p>Once you have created your namespace, you must append the namespace argument (-n namespace)  in helm and kubectl commands to ensure the command is scoped to the namespace that was created for the Leap deployment.</p> <p>For information about namespaces, see https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ </p> <p>Identify a name for your namespace and create it using the following syntax:</p> <p>On Kubernetes platforms:</p> <p>Kubectl</p> <pre><code># Command to create a namespace using kubectl \n# This example creates a namespace called \"my-namespace\" \nkubectl create ns my-namespace \n</code></pre> <p>OpenShift:</p> <p>For OpenShift, you must create a namespace with specific settings.</p> <p>Use the following namespace definition and save it as namespace.yaml. You must replace my-namespace in the template with the name of the namespace you are using:</p> <pre><code>apiVersion: v1 \nkind: Namespace \nmetadata: \n  name: my-namespace \n  annotations: \n    openshift.io/sa.scc.mcs: \"s0:c24,c4\" \n    openshift.io/sa.scc.supplemental-groups: \"1001/10000\" \n    openshift.io/sa.scc.uid-range: \"1000/10000\" \n</code></pre> <p>OpenShift client:</p> <pre><code># Command to create namespace from template file \noc apply -f namespace.yaml \n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_probes_config_valuesfile.html","title":"Probes configuration in values.yaml file","text":"<p>The <code>liveness</code> and <code>readiness</code> probes such as the status thresholds and time values can be modified.</p> <pre><code># Liveness probe using the applications HTTP probe endpoint  \n    livenessProbe: \n      failureThreshold: 4 \n      initialDelaySeconds: 30 \n      periodSeconds: 30 \n      successThreshold: 1 \n      timeoutSeconds: 30 \n# Readiness probe using the applications HTTP probe endpoint \n    readinessProbe: \n      failureThreshold: 2 \n      initialDelaySeconds: 30 \n      periodSeconds: 30 \n      successThreshold: 1 \n      timeoutSeconds: 30 \n</code></pre> <p>Information about the configuration options can be found in the Kubernetes documentation.</p> <p>Parent topic: Preparation</p>"},{"location":"helm_saml_config.html","title":"SAML configuration","text":"<p>The Leap Helm chart and container offer a basic SAML configuration through the Helm values. To enable SAML you must pass the IdP Metadata of the identity provider.</p> <p>The idpMetadata accepts IdP Metadata in xml format. Please use the multiline string feature of Helm to pass this value.</p> <p>Example:</p> <pre><code>security:\n  leap:\n    . . .\n    saml:\n      idpMetadata: |\n        &lt;EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" ID=\"SAMLtestIdP\" entityID=\"https://samltest.id/saml/idp\"&gt;\n            &lt;IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.1:protocol urn:mace:shibboleth:1.0\"&gt;\n              ...\n            &lt;/IDPSSODescriptor&gt;\n        &lt;/EntityDescriptor&gt;\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_service_catalog.html","title":"Service Catalog","text":"<p>The serviceCatalog parameter can be used to pass service descriptions to Leap, which will be picked up by Leap automatically.</p> <p>Each service definition in the .yaml is made up of a label and the xml content of the service description. The XML content will be copied into a file and placed in the service catalog.</p> <p>For more information on creating service descriptions, see Service Description.</p> <p>Example:</p> <pre><code>configuration:\n  leap:\n    . . .\n    serviceCatalog:\n      . . .\n      sampleServiceDescription.xml: |\n        &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n        &lt;serviceDescription&gt;\n        &lt;id&gt;sample-service-description&lt;/id&gt;\n        &lt;defaultLocale&gt;en&lt;/defaultLocale&gt;\n        &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n        &lt;name xml:lang=\"en\"&gt;Sample service Description&lt;/name&gt;\n        &lt;description xml:lang=\"en\"&gt;&lt;/description&gt;\n          . . . \n        &lt;/serviceDescription&gt;\n</code></pre> <p>Parent topic: Preparation</p>"},{"location":"helm_uninstall.html","title":"Uninstall Helm deployment","text":"<p>To remove your HCL Leap deployment from your server deployed using Helm, it is recommended that you use Helm uninstall.</p>"},{"location":"helm_uninstall.html#section_m4v_cp4_hzb","title":"Uninstall command","text":"<p>To run the uninstall, use the following command as shown in this example:</p> <pre><code># Helm uninstall command \n    helm uninstall your-release-name -n my-namespace \n</code></pre> <p>Where <code>my-namespace</code> is the namespace where your HCL Leap deployment is installed to and your-release-name is the Helm release name you selected during installation.</p> <p>After a successful deployment, Helm responds with the following message:</p> <pre><code>release \"your-release-name\" uninstalled\n</code></pre> <p>Parent topic: Kubernetes Helm deployment</p>"},{"location":"helm_update_install.html","title":"Update the settings of an existing installation","text":"<p>This section describes how to update the configuration of an HCL Leap or later deployment to Kubernetes or OpenShift installed using Helm.</p> <p>This section assumes that you prepared your cluster and your custom-values.yaml file, using guidance provided in the Preparation before installing Leap and using Helm topic, and then installed your deployment using the instructions in the Install topic.</p>"},{"location":"helm_update_install.html#section_vrr_mp4_hzb","title":"Overview of Helm configuration updates","text":"<p>Once an HCL Leap deployment is installed, it is possible to update its configuration directly using the standard Kubernetes or OpenShift commands (for example, by updating values in the various config maps). However, this is NOT the recommended approach. Some of the configuration parameters have interdependencies, as outlined in the Preparation before installing Leap using Helm topic. These require knowledgeable management to make changes that are compatible with interdependency requirements.</p> <p>The recommended approach for configuration changes is to update the custom-values.yaml file used to install the deployment, and then run a Helm upgrade. This has the added benefit that your custom-values.yaml file remains an up-to-date description of the configuration of your environment.</p>"},{"location":"helm_update_install.html#section_ixp_4p4_hzb","title":"Helm upgrade configuration command","text":"<p>After making the needed changes to your custom-values.yaml file, use the following command:</p> <pre><code># Helm upgrade command \nhelm upgrade -n your-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl\n-leap-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz \n</code></pre> <p>The <code>your-namespace</code> is the namespace in which your HCL Leap deployment is installed and <code>your-release-name</code> is the Helm release name you used when installing.</p> <p>The <code>-f path/to/your/custom-values.yaml</code> parameter must point to the custom-values.yaml you have updated.</p> <p>The <code>path/to/hcl-leap-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz</code> is the HCL Leap Helm Chart that you extracted in the preparation steps.</p> <p>Parent topic: Kubernetes Helm deployment</p>"},{"location":"in_basic_architecture.html","title":"Basic Architecture","text":"<p>Leap relies on two central components: the application server and the database.</p> <p>Leap relies on two central components: the application server and the database. The following diagram shows how these components are set up in a typical installation:</p> <p></p> <p>The components perform the following functions:</p> <ul> <li>Leap: The environment in which you create, deploy and launch applications.</li> <li>IBM HTTP Server: A standard component of WebSphere\u00ae Application Server that interacts with the application server.</li> <li>Leap Database: The Leap database which contains all applications and data that exist within the Leap environment.</li> </ul> <p>If you plan to use Leap with WebSphere Portal, the following diagram describes the basic architecture:</p> <p></p> <p>The components perform the following functions:</p> <ul> <li>Leap: The environment in which you create, deploy and launch applications.</li> <li>IBM HTTP Server: A standard component of WebSphere Application Server that interacts with the application server.</li> <li>Leap Database: The Leap database which contains all applications and data that exist within the Leap environment.</li> <li>Leap Portlet: When installed and configured to point at the Leap server, it enables content to be rendered within a WebSphere Portal environment.</li> <li> <p>User registry: Leap relies on a user registry, such as an LDAP, to manage access to the system. This is connected to the Leap application server. For more information on supported user registries, see Leap system requirements.</p> <p>Note: The detailed system requirements page displays Leap 8.6.0 requirements. In the upper left corner of the page, there is a menu from which you can select version 9.3.</p> </li> <li> <p>Email server: Leap can optionally send emails when configured with a proper email relay.</p> </li> </ul> <p>Parent topic: Deploying to a traditional platform</p> <p>Related information </p> <p>Manually deploying to WebSphere Application Server</p>"},{"location":"in_create_db.html","title":"Create a database","text":"<p>This section describes how to prepare a database for Leap.</p> <p>Leap is compatible with a DB2, Oracle, or PostgreSQL database.</p> <p>Note</p> <p>Keeping the Leap application and database servers co-located is essential.  Leap's frequent database calls necessitate rapid communication between the servers.  Co-location minimizes latency, resulting in faster data retrieval, quicker response times, and improved overall system efficiency.  Separating the servers introduces network latency, slowing performance.  Co-location supports smooth, real-time operations, especially for database-intensive tasks like querying, updating records, and transaction processing.</p> <ul> <li>Creating a DB2 database The following instructions describe how to manually create the DB2\u00ae database for Leap.</li> <li>Creating an Oracle database The following steps describe how to manually create an Oracle database for use with Leap.</li> <li>Creating a PostgreSQL database The following instructions describe how to manually create the PostgreSQL database for Leap.</li> </ul> <p>Parent topic: Preparing to deploy</p>"},{"location":"in_create_db2.html","title":"Creating a DB2 database","text":"<p>The following instructions describe how to manually create the DB2\u00ae database for Leap.</p> <p>In a production environment, you must create DB2 database before you install HCL Leap to WebSphere\u00ae Application Server.</p> <p>Note: Do not create a database if you want to continue using the same database with the existing user content.</p> <ol> <li> <p>To set up the DB2 database:</p> <ol> <li> <p>Create an empty DB2 database with a maximum database name of 8 characters, and a maximum page size of 32768.</p> </li> <li> <p>Connect to the database and create a User Temporary table space.</p> <p>Use the following settings for the temporary table space:</p> <ul> <li>Large_usertemp pagesize 32K</li> <li>Managed by automatic storage extentsize 16</li> <li>&lt;bufferpool-name&gt; is the name of your DB2 large buffer pool. Each DB2 server can have a different name. <pre><code>db2 \"CREATE DB LEAPDB using codeset UTF-8 territory us PAGESIZE 32768\"\n db2 connect to LEAPDB\ndb2 \"CREATE BUFFERPOOL bufferpool-name IMMEDIATE SIZE 250 PAGESIZE 32K\"\ndb2 \"CREATE USER TEMPORARY TABLESPACE LARGE_USERTEMP PAGESIZE 32k MANAGED BY AUTOMATIC STORAGE EXTENTSIZE 16 PREFETCHSIZE 16 BUFFERPOOL bufferpool-name\"\n</code></pre></li> </ul> </li> </ol> </li> </ol>"},{"location":"in_create_db2.html#minimum-permissions","title":"Minimum Permissions","text":"<p>If you do not want to give the DB2 user DBADM then you will need to assign the following permissions otherwise Leap will fail.</p> <ul> <li>CONNECT</li> <li>SELECT</li> <li>INSERT</li> <li>UPDATE</li> <li>DELETE</li> <li>CREATETAB</li> <li>IMPLICIT_SCHEMA</li> <li>USE of tablespace</li> </ul> <p>Parent topic: Create a Database</p>"},{"location":"in_deploying_was.html","title":"Manually deploying to WebSphere Application Server","text":"<p>The following instructions describe how to manually deploy HCL Leap to WebSphere\u00ae Application Server.</p> <p>Prior to deploying HCL Leap to WebSphere Application Server, you must create a new DB2\u00ae , or Oracle 12c database.</p> <ol> <li> <p>Set up your database.</p> <ul> <li>To set up the DB2 database, see Creating a DB2 database.</li> <li>To set up an Oracle database, see Creating an Oracle database</li> <li>To set up a PostgreSQL database, see Creating a PostgreSQL database.</li> <li>To deploy Leap to WebSphere Application Server, open the WebSphere Application Server Administrative console.</li> </ul> </li> <li> <p>Configure the data sources. Depending on your version of WebSphere Application Server, go to either:</p> <ul> <li>Resources or</li> <li>Application server</li> <li> <p>Expand the JDBC tree, and go to Data sources.</p> <ul> <li>Create a new data source</li> <li>Provide the host name, port, database name (PDB database service name must be used for Oracle 12c), connection ID, and password. The connection ID must have dbadmin access granted for the database.</li> <li>If you are connecting to a DB2 database with WebSphere Application Server 8.0 Connection pool data source, ensure that you select a non-XA DB2 JDBC provider, and use a Type 4 driver when configuring the data source.</li> <li> <p>Click Test connection to ensure that the connection is made.</p> <ol> <li>You must set additional properties for the created data source.</li> </ol> </li> <li> <p>Click the name link for the created data source, then click Custom Properties.</p> </li> <li>DB2 only - Locate fullyMaterializeLobData, and change the value to false.</li> <li>DB2 only - Add a property called progressiveStreaming, and set the value to 2.</li> <li>DB2 only - Set streamBufferSize to 2097152 (2MB). Add this property if it doesn't exist.</li> <li>Set the webSphereDefaultIsolationLevel to 2</li> <li>Go to Mail &gt; Mail sessions.</li> </ul> </li> <li> <p>Select the correct scope and choose New.</p> </li> <li>Choose Built-in Mail Provider.</li> <li>Provide a name, and a JNDI Name.</li> <li>Depending on your version of WebSphere Application Server, you might need to click Apply before setting the following properties.</li> <li>Complete the Outgoing Mail Properties.</li> <li>Set the Server, and Return email address fields.</li> <li>Click OK</li> <li>Go to Application Servers &gt; server1 &gt; Java and Process Management &gt; Process definition &gt; Java Virtual Machine, and set the default maximum heap size to at least 1024 MB.</li> </ul> </li> <li> <p>Deploy the Leap EAR:</p> <ol> <li> <p>Go to Applications &gt; Application Types &gt; WebSphere Enterprise Applications.</p> </li> <li> <p>Select Install.</p> </li> <li> <p>Select Local file system, provide the location of the EAR file, and click Next.</p> <p>For example: &lt;Installation Directory&gt;/deploy/hcl-leap.ear.</p> </li> <li> <p>From the \u201cHow do you want to install the application?\u201d options, select Detailed, then click Next.</p> </li> <li> <p>Accept the defaults presented by clicking Next for all steps until Map resource references to resource.</p> </li> <li> <p>On Map resource references to resource:</p> <ul> <li>In the javax.mail.Session section, go to Target Resource JNDI Name, and select the mail source.</li> <li>In the javax.sql.DataSource section, go to Target Resource JNDI Name, and select the data source.<ol> <li>Click Next.</li> </ol> </li> </ul> </li> <li> <p>Accept the defaults for the next step and click Next.</p> </li> <li> <p>On Map context roots for web modules use the default context roots, and click Next.</p> </li> <li> <p>On Map security roles to users or groups:</p> <ul> <li>Select the SuperAdminUsers role, and click Map Users... or Map Groups.... Select the super administrative users or groups to map to the role.</li> <li>Select the EditApplicationUsers role, and click Map Special Subjects. Select either All authenticated in Application's Realms, or All authenticated in Trusted Realms to map the value to the role. If both options are available, select All authenticated in Trusted Realms.</li> <li>Select the AdministrativeUsers role, and click Map Users... or Map Groups.... Select the administrative users or groups to map to the role.</li> <li> <p>Select the UseApplicationUsers role, and click Map Special Subjects. Select either All authenticated in Application's Realms, or All authenticated in Trusted Realms to map the value to the role. If both options are available, select All authenticated in Trusted Realms. Additional information about available roles:</p> </li> <li> <p>AdministrativeUsers - Administrative users are able to set up the Leap server. You must have an Administrative User to complete the installation process as described in Completing the installation. A sample setting is: \u201cSpecial subject: None, Mapped users, admin_user_name \u201d. Users in this role, automatically inherit the abilities of all other roles. Users in this role have access to the Admin configuration page.</p> </li> <li>SuperAdminUsers - Super Administrative Users are users, or groups, that may edit all Leap applications without explicit security settings. They do not have access to application data. To access the data, a user must be added to a role within the application and the application must be redeployed.  Users in this role also have access to the Admin dashboard.</li> <li>EditApplicationUsers - Authenticated users that can design, deploy, and use Leap applications. A sample setting is: \u201cSpecial subject: All authenticated in Application's Realms\u201d.</li> <li>UseApplicationsUsers - Authenticated users that can use deployed Leap applications. All users in the AdministrativeUsers, SuperAdminUsers, and EditApplicationUsers automatically have access to use deployed applications. Only adjust this setting if you want to allow a broader set of users than those listed in the AdministrativeUsers, SuperAdminUsers, and EditApplicationUsers roles. Otherwise, leave this role unmapped. A sample setting, if you must map the role, is: \u201cSpecial subject: All authenticated in Trusted Realms\u201d. You must map Administrative users and Edit Application users to an appropriate realm.</li> </ul> </li> <li> <p>Continue to the summary page.</p> </li> <li> <p>Click Finish to deploy the ear file.</p> </li> </ol> </li> <li> <p>Set the class loading and update detection:</p> <ol> <li> <p>Go to Enterprise Applications &gt; Leap &gt; Class loader.</p> </li> <li> <p>Go to Class loader order and select \u201cClasses loaded with local class loader first (parent last)\u201d.</p> </li> <li> <p>Go to Enterprise Applications &gt; Leap &gt; Manage Modules &gt; HCL Leap xxx.war.</p> </li> <li> <p>Go to Class loader order and select \u201cClasses loaded with local class loader first (parent last)\u201d</p> </li> <li> <p>Click Apply to apply changes.</p> </li> </ol> </li> <li> <p>Enabling security:</p> <ol> <li> <p>Expand the Security tree and select Global security.</p> </li> <li> <p>In the Administrative security section, select the check box beside Enable administrative security.</p> </li> <li> <p>In the Application security section, select the check box beside Enable application security.</p> </li> <li> <p>In the User Account Repository, ensure Current Realm Definition is set to Federated repositories.</p> </li> <li> <p>Click Apply to apply your changes.</p> </li> </ol> </li> <li> <p>Configure user accounts:</p> <ol> <li> <p>Go to Users and Groups &gt; Manage Users.</p> <p>For more information about configuring accounts, see the WebSphere Application Server documentation.</p> </li> </ol> </li> <li> <p>Configure VMM J2C Alias:</p> <ol> <li> <p>Go to Security &gt; Global Security &gt; Authentication &gt; Java Authentication and Authorization Service &gt; J2C authentication data.</p> </li> <li> <p>Click New...</p> </li> <li> <p>Enter the following information</p> <ul> <li>Alias: vmmAdmin</li> <li>User Id: websphere_admin_user_id</li> <li>Password: websphere_admin_user_password<ol> <li>Click Apply to apply your changes.</li> </ol> </li> </ul> </li> </ol> </li> </ol> <p>Parent topic: Deploying to a traditional platform</p> <p>Related information </p> <p>Basic Architecture</p>"},{"location":"in_migrating_feb.html","title":"Migrating from IBM Forms Experience Builder","text":"<p>The following instructions describe how to upgrade from IBM Forms Experience Builder to HCL Leap.</p> <p>The process of upgrading from IBM Forms Experience Builder to HCL Leap is very similar to the instructions given in Upgrading Leap on a traditional platform. However, the default web module context roots have changed from <code>/forms</code> and <code>/forms-basic</code> to <code>/apps</code> and <code>/apps-basic</code> respectively. When upgrading to Leap you will want to ensure that you retain the same URLs used with IBM Forms Experience Builder.</p> <p>When upgrading the EAR in the WebSphere Application Server Administrative console, choose the Detailed option for \u201cHow do you want to install the application?\u201d. When you reach the Map context roots for Web modules step, ensure the Context Root values are the same as what you had previously.</p> <p>Parent topic: Deploying Leap</p>"},{"location":"in_oracle_creating_db.html","title":"Creating an Oracle database","text":"<p>The following steps describe how to manually create an Oracle database for use with Leap.</p> <p>To set up an Oracle database:</p> <ol> <li> <p>Log into Oracle SQLPlus using the SYS DBA role.</p> <p>For example, sqlplus / as sysdba.</p> </li> <li> <p>Create three users.</p> <p>Each user is mapped to a schema, where Leap will create tables.</p> <pre><code>ALTER SESSION SET CONTAINER = &lt;Pluggable Database Name&gt;;\n\nCREATE USER FREEDOM IDENTIFIED BY &lt;password&gt;;\nCREATE USER IF\\_CMIS IDENTIFIED BY &lt;password&gt;;\nCREATE USER APP\\_DATA IDENTIFIED BY &lt;password&gt;;\n</code></pre> <p>Where &lt;password&gt; is an Oracle accepted password you create.</p> </li> <li> <p>Create the administrator role.</p> <p>Leap accesses the Oracle database through a data source. An administrator is required to establish the connection to the database.</p> <pre><code>CREATE USER &lt;admin&gt; IDENTIFIED BY &lt;password&gt;;\n</code></pre> <p>Where &lt;admin&gt; is an administrator's user name, and &lt;password&gt; is the administrator's password you create.</p> </li> <li> <p>Set the permissions for the administrative user.</p> <p>The following commands grant all permissions and privileges so the administrative user can access the database.</p> <pre><code>GRANT ALL PRIVILEGES TO &lt;admin&gt;;\nGRANT EXECUTE ANY PROCEDURE TO &lt;admin&gt;;\n</code></pre> </li> <li> <p>Set table space quotas for the three users of the schemas.</p> <pre><code>GRANT UNLIMITED TABLESPACE TO FREEDOM;\nGRANT UNLIMITED TABLESPACE TO IF\\_CMIS;\nGRANT UNLIMITED TABLESPACE TO APP\\_DATA;\nGRANT UNLIMITED TABLESPACE TO &lt;admin\\&gt;;\n</code></pre> </li> </ol> <p>The Oracle database is created.</p> <p>Parent topic: Create a Database</p>"},{"location":"in_overview.html","title":"Deploying Leap","text":"<p>This section describes the steps required to upgrade HCL Leap, and the Leap Portlet for use with WebSphere\u00ae Portal.</p> <ul> <li>Preparing to deploy This section describes how to prepare to deploy Leap.</li> <li>Kubernetes Helm deployment The Kubernetes container platform allows orchestration features for the automated deployment, coordination, scaling, and management of containerized applications. This deployment mechanism leverages Helm to establish a reliable and repeatable containerized solution.</li> <li>Deploying to a traditional platform The following topics describe how to deploy Leap to a traditional platform.</li> <li>Completing the post-deployment tasks After you run the HCL Leap installer for WebSphere Application Server, you must complete the deployment by setting up the Leap environment.</li> <li>Upgrading The following topics describe how to upgrade Leap.</li> <li>Migrating from IBM Forms Experience Builder  The following instructions describe how to upgrade from IBM Forms Experience Builder to HCL Leap.</li> </ul>"},{"location":"in_portlet_selecting_application_using_edit_shared_setting.html","title":"Selecting an application using Edit Shared Setting","text":"<p>You can add an HCL Leap application to a WebSphere\u00ae Portal page with the Edit Shared Settings menu option.</p> <p>To permanently set which application is displayed in the Leap Portlet, use the following instructions.</p> <p>To select an application for a WebSphere Portal page, you must have Edit privileges for both the WebSphere Portal page, and the Leap Portlet. Ensure the WebSphere Portal page is in Edit mode.</p> <ol> <li> <p>Click the menu icon for the portlet name, and select Edit Shared Settings.</p> <p>The Shared Settings page opens.</p> </li> <li> <p>Update the values on the Edit Shared Settings page:</p> <ul> <li>Application URL: Enter the full URL to the application either by typing in the URL, or by clicking Browse and selecting the URL from a list of deployed applications.</li> <li>Preferred Security Mode: The preferred authentication mode to use for applications that support both anonymous and authenticated users. Anonymous only or Authenticated only applications are not affected, and use the authentication mechanism that is supported by the application.<ul> <li>The default is to open the application anonymously. The page shows a selected check box for \u201cUse anonymous access when supported by the application\u201d.</li> <li>To open an application with the authentication credential of the current WebSphere Portal user, clear the check box for \u201cUse anonymous access when supported by the application\u201d.</li> </ul> </li> <li>Page refesh setting: This setting determines whether the portal page is refreshed when the form is submitted. If your portal page depends on portlet wires, then you must have the page refresh upon form submission.<ul> <li>The default is to not refresh the portal page when the form is submitted.</li> </ul> </li> <li>Click OK to save your changes.</li> </ul> </li> </ol>"},{"location":"in_prep.html","title":"Preparing to deploy","text":"<p>This section describes how to prepare to deploy Leap.</p> <p>A database will have to be created and connected to Leap for data storage.</p> <ul> <li>Create a Database This section describes how to prepare a database for Leap.</li> </ul> <p>Parent topic: Deploying Leap</p>"},{"location":"in_setting_up_environment.html","title":"Completing the post-deployment tasks","text":"<p>After you run the HCL Leap installer for WebSphere\u00ae Application Server, you must complete the deployment by setting up the Leap environment.</p> <p>Ensure that you have the Administrative user ID and password for deployment.</p> <ul> <li>WebSphere Application Server installations: The Administrative user ID and Password of your WebSphere Application Server.</li> </ul> <p>When you attempt to log in to Leap for the first time, you are shown a setup screen. Following the steps on the setup screen completes the Leap installation.</p> <p>There are two phases to set up the Leap environment:</p> <ul> <li>Phase 1 - Basic Environment Setup</li> <li> <p>Phase 2 - Secured Environment Setup</p> <p>Note: To disable this setup page and required admin interaction, add the following property to the Leap_config.properties:</p> <pre><code>ibm.nitro.SetupAll.setupStatus = start\n</code></pre> </li> <li> <p>Go to the location of your Leap installation. Open a web browser and enter http://hostname:port/apps/</p> <p>The web browser shows the following message: \u201c HCL Leap is not set up. Until that occurs, all normal requests are disabled. Click Setup to start the setup process.\u201d</p> </li> <li> <p>Click Setup.</p> <p>The Leap setup window opens and automatically runs Phase 1: Basic Environment Setup.</p> </li> <li> <p>To begin Phase 2- Secured Environment Setup, click Continue to Secured Setup.</p> <p>You are shown the Leap log in screen.</p> </li> <li> <p>Log in using the Administrative user ID and Password for WebSphere Application Server</p> <p>After you log in, you are returned to the Leap setup page, and the Secured Setup continues automatically.</p> </li> <li> <p>When the Secured Setup is complete, click Continue to Manager.</p> <p>Leap is now ready to use.</p> <ol> <li> <p>If there are any upgrades that must be done, a Fix button is shown. ClickFix to run the required upgrades.</p> <p>Once the upgrades have started, read the on-screen instructions and click Continue to Manager to begin working with Leap.</p> </li> </ol> </li> <li> <p>After you have verified that Leap is working, create the these extra table spaces to minimize the database size as applications are created. Connect to the Leap DB2\u00ae as a DB2 administrator. Enter the following commands:</p> <pre><code>CREATE BUFFERPOOL FEB4KBP IMMEDIATE SIZE 250 AUTOMATIC PAGESIZE 4 K\n\nCREATE LARGE TABLESPACE USERSPACE4K PAGESIZE 4 K MANAGED BY AUTOMATIC STORAGE BUFFERPOOL FEB4KBP\n\nCREATE BUFFERPOOL FEB8KBP IMMEDIATE SIZE 250 AUTOMATIC PAGESIZE 8 K\n\nCREATE LARGE TABLESPACE USERSPACE8K PAGESIZE 8 K MANAGED BY AUTOMATIC STORAGE BUFFERPOOL FEB8KBP\n\nCREATE BUFFERPOOL FEB16KBP IMMEDIATE SIZE 250 AUTOMATIC PAGESIZE 16 K\n\nCREATE LARGE TABLESPACE USERSPACE16K PAGESIZE 16 K MANAGED BY AUTOMATIC STORAGE BUFFERPOOL FEB16KBP\n</code></pre> <p>Note: This is for DB2 databases only.</p> </li> </ul> <p>Parent topic: Deploying Leap</p> <p>Related information </p> <p>Configuring the properties file</p>"},{"location":"in_upgrading.html","title":"Upgrading Leap on a traditional platform","text":"<p>The following instructions describe how to upgrade Leap by using the WebSphere\u00ae Application Server Administrative console.</p> <ul> <li>Download the upgrade package from HCL License Portal.</li> <li>Back up your existing installation prior to installing the update.</li> <li>Back up your DB2\u00ae or Oracle database before you install the update.</li> </ul> <p>To back up your current Leap installation: 1.  Export the Leap EAR file.</p> <pre><code>1.  Open the WebSphere Application Server Administrative console.\n\n2.  Go to **Applications** \\&gt; **Application Types** \\&gt; **WebSphere enterprise applications**.\n\n3.  Select Leap.\n\n4.  Click **Export**.\n\n5.  Click Leap.ear to download the installation file as a backup.\n</code></pre> <ol> <li> <p>After the backup is complete, use the following instructions to install the upgrade file.</p> </li> <li> <p>Stop the Leap server.</p> <ol> <li> <p>Go to Applications &gt; Application Types &gt; WebSphere enterprise applications</p> </li> <li> <p>Select Leap, and click Stop.</p> </li> </ol> </li> <li> <p>Check the version of your currently installed Leap.</p> <p>You need the version number in step 4c.</p> <ol> <li> <p>Go to Modules &gt; Display module build Ids.</p> </li> <li> <p>Check the version for the HCL Leap WAR. An example module version is \u00a0\u201cLeap 9.0.0.0 GA\u201d.</p> </li> </ol> </li> <li> <p>Update the Leap installation.</p> <ol> <li> <p>Return to Applications &gt; Application Types &gt; WebSphere enterprise applications &gt; Leap, and click Update.</p> </li> <li> <p>In the Application update options, select Replace the entire application.</p> </li> <li> <p>In Specify the path to the replacement ear file, select Local file system, and provide the location of the EAR file you downloaded from HCL License Portal.</p> </li> <li> <p>Click Next.</p> </li> <li> <p>In Preparing for the application update, click Next.</p> <p>Do not change the default settings on the page.</p> </li> <li> <p>On the Install New Application page, go to Step 3: Map resource references to resources.</p> <ul> <li>In the javax.mail.Session table, set the Target Resource JDMI Name. Click Browse and select &lt;Leap Mail Session&gt;.</li> <li>In the javax.sql.DataSource table, set the Target Resource JDMI Name. Click Browse and select &lt;Leap Data Source&gt;.<ol> <li>Click Next.</li> </ol> </li> </ul> </li> <li> <p>Go to Step 4: Map virtual hosts for Web modules to validate that both Virtual host names are identical and correct, then click Next.</p> </li> <li> <p>Click Finish to save the update.</p> </li> </ol> </li> <li> <p>If Leap is running on nodes that are managed by Deployment Manager, you must synchronize all nodes where Leap is installed.</p> </li> <li> <p>Open the WebSphere Application Server Administrative console.</p> </li> <li> <p>Go to System Administration &gt; Nodes.</p> </li> <li> <p>Select all nodes where Leap is installed.</p> </li> <li> <p>Click Synchronize.</p> </li> <li> <p>When the upgrade is complete, restart the Leap server.</p> </li> <li> <p>Go to Applications &gt; Application Types &gt; WebSphere enterprise applications</p> </li> <li> <p>Select Leap.</p> </li> <li> <p>Click Start.</p> </li> <li> <p>If you use Leap with WebSphere Portal, you must update the Leap Portlet.</p> </li> <li> <p>Log in to WebSphere Portal as an administrative user.</p> </li> <li> <p>Go to Portlet Management &gt; Web Modules and locate LeapPortlet.war.</p> </li> <li> <p>Click the Update Web module icon.</p> <p>The Update Web module icon is located to the right of the Web module properties icon.</p> </li> <li> <p>Click Browse to select the updated version of the Leap Portlet, and click Next.</p> </li> <li> <p>Review your changes and click Finish.</p> </li> </ol> <p>Parent topic: Upgrading</p>"},{"location":"js_adding_javascript.html","title":"Adding JavaScript","text":"<p>You can also further customize your form's behavior by adding custom javaScript.  Leap provides a javaScript API that provides objects and functions to modify the form programmatically.  JavaScript is triggered in the browser by an event, there are many events that can be used for this purpose.  For more details on the events available, refer to Running Custom JavaScript - Events.</p>"},{"location":"js_adding_javascript.html#form-item-events","title":"Form item events","text":"<p>Every item within a Leap form has a set of events that can be used for applying custom javaScript.  You can access the events by clicking on the form item and then clicking the 'Events' tab in the properties pane.</p> <p></p>"},{"location":"js_adding_javascript.html#events-page","title":"Events Page","text":"<p>You can also use the 'Events' page by clicking on the '' icon in the left vertical navigation bar.</p> <p></p> <ol> <li> <p>Filters the javascript based on the selected form or appPage.</p> </li> <li> <p>Click 'Add' to add an event to the view pane so that javaScript may be added.</p> </li> <li> <p>Click 'Find' to filter what is shown in the 'view pane' by code that contains the specified text.</p> </li> <li> <p>The 'view pane' where the events that contain javascript or predefined actions will appear, grouped by page.</p> </li> <li> <p>Change the color scheme of the page.</p> </li> <li> <p>Code editor.  The editor has code coloring, line numbers, and indenting.  You can access our 2 auto-complete menus by pressing ctrl+space; the first menu shows the forms and their fields and the second shows common javaScript functions or code templates.</p> </li> <li> <p>Apply a predefined action to the event.</p> </li> <li> <p>A drag handle to change the size of the code editor window.</p> </li> <li> <p>Press the 'Check Syntax' button to validate any code that you write.  The form will not save properly if you have invalid javaScript code.</p> </li> </ol>"},{"location":"js_adding_javascript.html#debugging","title":"Debugging","text":"<p>If you are looking to investigate/debug code you can add \"debugger;\" to any line of the code to create a break-point.  If you view the page with the browser developer tools enabled then the code will stop executing at that point and you can then step through the code one line at a time.</p> <p>One the breakpoint has been triggered, you can step one line at a time and also into or out of functions.  This is a great tool for helping you figure out what might be broken in a function that you write.  You may also add expressions or variables to the \"Watch Expressions\" section to show you the value of code statements as you progress through your function(s).</p> <p>Note: Be sure to remove any breakpoints (\"debugger;\") in your code before publishing your application for final consumption.</p> <ul> <li>Sample Functions</li> </ul> <p>Parent topic: Adding dynamic behavior</p>"},{"location":"js_sample_functions.html","title":"Sample Functions","text":"<p>This page is a collection of sample javascript functions that could be used in your Leap applications.</p> <p>Note: these functions were collected from the community and you may need to modify them when implementing in your Leap application.</p>"},{"location":"js_sample_functions.html#date-field-functions","title":"Date Field Functions","text":""},{"location":"js_sample_functions.html#add-hours-to-timestamp","title":"Add hours to timestamp","text":"<p>Add number of hours to a timestamp</p> <p>Function: <pre><code>// dateObj1 - The date field (i.e. BO.F_Date)\n// numOfHours - The number of hours to add\napp.getSharedData().addHoursToDate = function(dateObj1, numOfHours) {\n    var d1 = dateObj1.getValue(); //get first date\n\n    var d1_milli = d1.getTime();\n    return new Date(Math.ceil(d1_milli + (1000 * 60 * 60 * numOfHours)));\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#add-days-to-date","title":"Add days to date","text":"<p>Add number of days to a date. </p> <p>Usage:</p> <p>Place the function in the Settings...Events...Custom actions.  In the field where you enter the date or the number of days to add you place: </p> <pre><code>app.getSharedData().addDaysToDate(BO.F_Date, 90);\n</code></pre> <p>You can either hard-code the number of days to add or have the value come from a field.</p> <p>Function: <pre><code>// dateObj1 - The date field (i.e. BO.F_Date)\n// numOfDays - The number of days to add\napp.getSharedData().addDaysToDate = function(dateObj1, numOfDays) {\n    var d1 = dateObj1.getValue(); //get first date\n\n    var d1_milli = d1.getTime();\n    return new Date(Math.ceil(d1_milli + (1000 * 60 * 60 * 24 * numOfDays)));\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#add-working-days-to-date","title":"Add working days to date","text":"<p>This function will return a new date with the number of specified working days added, it will not include weekends when determining the final date.  You will need to set that returned date into your desired field.</p> <p>A n additional function was added to determine if a day was a registered holiday.</p> <p>Usage:</p> <p>Place the function in the Settings...Events...Custom actions.  In the field where you enter the date or the number of days to add.</p> <p>You can either hard-code the number of days to add:</p> <pre><code>app.getSharedData().addWorkingDaysToDate(BO.F_Date, 90);\n</code></pre> <p>or have the value come from a field.</p> <pre><code>app.getSharedData().addWorkingDaysToDate(BO.F_Date, BO.F_Number.getValue());\n</code></pre> <p>To set another field with the result:</p> <pre><code>BO.F_newDate.setValue(app.getSharedData().addWorkingDaysToDate(BO.F_Date, 90));\n</code></pre> <p>Function:</p> <pre><code>app.getSharedData().isHoliday = function(d) {\n  var r = false;\n  var holidays = [\"01-01\",\"02-18\",\"04-19\",\"05-20\",\"08-05\",\"09-02\"]; //set your holidays\n\n  //check if any of the days is a holiday\n  for(var holiday in holidays) {\n    var h = new Date(get(holidays, holiday)+\"-2020\");\n\n    if(d.getMonth() == h.getMonth() &amp;&amp; d.getDay() == h.getDay()) {\n      r = true;\n    }\n  }\n  return r;\n}\n\n// dateObj1 - The date field (i.e. BO.F_Date)\n// numOfDays - The number of working days to add\napp.getSharedData().addWorkingDaysToDate = function(dateObj1, numOfDays) {\n\n  var sd = dateObj1.getValue(); //get first date\n  var ed = dateObj1.getValue();\n  var counter = numOfDays;\n  var millisecondsPerDay = 86400 * 1000;\n  while (counter &gt; 0) {\n    ed = new Date(Math.ceil(ed.getTime() + millisecondsPerDay));\n    var theDay = ed.getDay();\n\n    // don't count sat and sunday and holidays\n    if(theDay !== 0 &amp;&amp; theDay !==6 &amp;&amp; !app.getSharedData().isHoliday(ed)) {\n        counter--;\n    }   \n  }\n\n  return ed;   \n}\n</code></pre>"},{"location":"js_sample_functions.html#calculate-age-from-birth-date","title":"Calculate age from birth date","text":"<p>Calculates the age from a specified birth date.</p> <p>Usage:</p> <p>Place function in Settings...Events...Custom Actions <pre><code>BO.F_Number.setValue(app.getSharedData().getAgeFromBirthDate(BOA.getValue(), true)); \nBO.F_SingleLine.setValue(app.getSharedData().getAgeFromBirthDate(BOA.getValue(), false));\n</code></pre></p> <p>Function: <pre><code>// birthDay - the date to calculate the age from\napp.getSharedData().getAgeFromBirthDate = function(birthDay) {   \n  // 1557600000 is 24 * 3600 * 365.25 * 1000 Which is the length of a year\n  // the length of a year is 365 days and 6 hours which is 0.25 day.\n  // double tilde converts float to integer\n  return ~~((Date.now() - birthDay) / (31557600000));\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#calculate-working-days-between-days","title":"Calculate working days between days","text":"<p>Returns the number of calendar days between the two dates specified.  The function expects to receive date objects, not strings.</p> <p>Usage:</p> <p>Copy the function to the Settings...Events...onStart section of your application.</p> <pre><code>const holidays = [\"01-01-2024\",\"02-18-2024\",\"04-19-2024\",\"05-20-2024\",\"08-05-2024\",\"09-02-2024\", \"12-25-2024\"];\napp.getSharedData().includesHoliday = function (startDt, endDt, holidays) {\n\n  var r = false;\n\n  for(var holiday in holidays) {\n    var h = new Date(get(holidays, holiday));\n\n    if(h.getTime() &gt;= startDt.getTime() &amp;&amp; h.getTime() &lt;= endDt.getTime()) {\n      r = true;\n    }\n  }\n  return r;\n}\n\n// includeWeekends - Pass true if you want to include weekends otherwise false.\napp.getSharedData().workingDaysBetweenDates = function(startDt, endDt, includeWeekends) {\n  // Validate input\n  if (endDt &lt; startDt)\n    return 0;\n\n  // Calculate days between dates\n  var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\n  startDt.setHours(0,0,0,1);  // Start just after midnight\n  endDt.setHours(23,59,59,999);  // End just before midnight\n  var diff = endDt.getTime() - startDt.getTime();  // Milliseconds between datetime objects    \n  var days = Math.ceil(diff / millisecondsPerDay);   \n\n  if(!includeWeekends) {\n    // Subtract two weekend days for every week in between\n    var weeks = Math.floor(days / 7);\n    var days = days - (weeks * 2);\n\n    // Handle special cases\n    var startDay = startDt.getDay();\n    var endDay = endDt.getDay();\n\n    // Remove weekend not previously removed.   \n    if (startDay - endDay &gt; 1) {       \n      days = days - 2;     \n    }\n\n    // Remove start day if span starts on Sunday but ends before Saturday\n    if (startDay === 0 &amp;&amp; endDay !== 6) {\n      days = days - 1;\n    }\n\n    // Remove end day if span ends on Saturday but starts after Sunday\n    if (endDay === 6 &amp;&amp; startDay !== 0) {\n      days = days - 1; \n    }\n\n    //subtract for any holiday included in the span\n    if(app.getSharedData().includesHoliday(startDt, endDt)) {\n      days = days - 1;\n    }\n  }\n  return days;\n}\n</code></pre>"},{"location":"js_sample_functions.html#compare-date-fields","title":"Compare date fields","text":"<p>Given two dates the function will validate that they are numOfDays days apart.  If the dateObj2 is not numOfDays days greater than dateObj1 then dateObj2 will be set invalid with the specified errorMsg.</p> <p>Usage:</p> <p>Copy the function to the Settings...Events...onStart section of your application.</p> <pre><code>// dateObj1 - the first date field (e.g. BO.F_Date1)\n// dateObj2 - the second date field (e.g. BO.F_Date2)\n// numOfDays - the number of days that D2 must be grater than D1\n// errorMsg - The error message to display for D2 when invalid\napp.getSharedData().compareDatesByDays = function(dateObj1, dateObj2, numOfDays, errorMsg) {\n\nvar d1 = dateObj1.getValue(); //get first date\nvar d2 = dateObj2.getValue(); //get sec date\nvar diff = 0;\n\n//convert to milliseconds\nvar d1_milli = d1.getTime();\nvar d2_milli = d2.getTime();\n\n//get difference and convert back to days\nvar diff_milli = d2_milli - d1_milli;\nvar nDays = Math.ceil(diff_milli / 1000 / 60 / 60 / 24);\n\n //if the diff is less then numOfDays set the d2 field invalid\n if(nDays &lt; numOfDays) {\n    dateObj2.setValid(false, errorMsg);\n  } else {\n    dateObj2.setValid(true, \"\");\n  }\n}\n</code></pre> <p>Then in both of your date fields place this in the onItemChange event to call the function (make sure you replace F_Date2 and F_Date3 with the IDs of your date fields):</p> <pre><code>app.getSharedData().compareDatesByDays(BO.F_Date2, BO.F_Date3, 14, \"The date must be 14 days past D1.\");\n</code></pre>"},{"location":"js_sample_functions.html#convert-ad-date-to-buddhist-date","title":"Convert AD date to Buddhist date","text":"<p>Convert a standard AD date into a Buddhist Date</p> <p>Usage:</p> <p>Place in onLoad or beforeSubmit event to convert a date.  The code would be something like:</p> <pre><code>BO.F_DATETIME.setValue(app.getSharedData().convertToBuddhistDate(new Date()));\n</code></pre> <p>Function: <pre><code>// dateAD: the date to convert\napp.getSharedData().convertToBuddhistDate = function(dateAD){\n    var dateBE = new Date(dateAD);\n    dateBE.setFullYear(dateAD.getFullYear() + 543);\n    return dateBE;\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#get-days-in-month","title":"Get Days in Month","text":"<p>Given a date it will return the number of days in that month.</p> <p>Function: <pre><code>app.getSharedData().daysInThisMonth = function( date ) {\n\n  var calendarObj = new Array();\n\n  calendarObj.push({month: 0, days: 31});\n  calendarObj.push({month: 1, days: 28});\n  calendarObj.push({month: 2, days: 31});\n  calendarObj.push({month: 3, days: 30});\n  calendarObj.push({month: 4, days: 31});\n  calendarObj.push({month: 5, days: 30});\n  calendarObj.push({month: 6, days: 31});\n  calendarObj.push({month: 7, days: 31});\n  calendarObj.push({month: 8, days: 30});\n  calendarObj.push({month: 9, days: 31});\n  calendarObj.push({month: 10, days: 30});\n  calendarObj.push({month: 11, days: 31});\n\n  // Get the \"non-Leap Year\" number of days in the current month.\n  var month = date.getMonth(); // Returns [0-11]\n  var days = get( calendarObj, month ).days;\n\n  // Add one day to February, if this is a Leap Year.\n  if( month === \"1\" &amp;&amp; app.getSharedData().isLeapYear( date ) ) {\n    days++;\n  }\n\n  return days;\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#get-week-number-from-date","title":"Get week number from date","text":"<p>Given the BO of a date field this function will return the week number the specified date is part of.</p> <p>Usage:</p> <p>Place the function in the onLoad event of the form where you want to use it.  Then in the onItemChange event of the date field where you want to get the week number.</p> <pre><code>BO.F_weekNumber.setValue(app.getSharedData().getWeekNumberFromDate(BOA.getValue()));\n</code></pre> <p>Function: <pre><code>// theDt - the business object of the date field (i.e. BOA, BO.F_Date1)\napp.getSharedData().getWeekNumberFromDate = function(theDt) {\n  if(theDt !== \"\") {\n\n    // Create a copy of this date object\n    var t = new Date(theDt);\n\n    // ISO week date weeks start on monday so correct the day number\n    var dayNr = (t.getDay() + 6) % 7;\n\n    // Set the target to the thursday of this week so the target date is in the right year\n    t.setDate(t.getDate() - dayNr + 3);\n\n    // ISO 8601 states that week 1 is the week with january 4th in it\n    var jan4 = new Date(t.getFullYear(), 0, 4);\n\n    // Number of days between target date and january 4th\n    var dayDiff = (t - jan4) / 86400000;\n\n    // Calculate week number: Week 1 (january 4th) plus the number of weeks between target date and january 4th\n    var weekNr = 1 + Math.ceil(dayDiff / 7);\n    return weekNr;\n  } else {\n    return \"\";\n  }\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#subtract-days-from-date","title":"Subtract days from date","text":"<p>Subtract number of days from a date.</p> <p>Usage:  You might want to calculate a new date based on one that a user has entered by placing this code in the onItemChange event of the date field: <pre><code>BO.F_Date2.setValue(app.getSharedData().subtractDaysFromDate(BO.F_Date1, 15));\n</code></pre></p> <p>Function: <pre><code>// dateObj1 - The date field (i.e. BO.F_Date)\n// numOfDays - The number of days to subtract\napp.getSharedData().subtractDaysFromDate = function(dateObj1, numOfDays) {\n  var d1 = dateObj1.getValue(); //get first date\n  var d1_milli = d1.getTime();\n  return new Date(Math.ceil(d1_milli - (1000 * 60 * 60 * 24 * numOfDays)));\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#subtract-working-days-from-date","title":"Subtract working days from date","text":"<p>Subtract number of working days (not incl Sat or Sun) from a date.</p> <p>Usage:  You might want to calculate a new date based on one that a user has entered by placing this code in the onItemChange event of the date field: <pre><code>BO.F_Date2.setValue(app.getSharedData().subtractWorkingDaysFromDate(BO.F_Date1, 15));\n</code></pre></p> <p>Function: <pre><code>// dateObj1 - The date field (i.e. BO.F_Date)\n// numOfDays - The number of working days to subtract\napp.getSharedData().subtractWorkingDaysFromDate = function(dateObj1, numOfDays) {\n  var d1 = dateObj1.getValue(); //get first date\n  var d2 = dateObj1.getValue();\n  var counter = numOfDays;\n  var millisecondsPerDay = 86400 * 1000;\n  while (counter &gt; 0) {\n    d2 = new Date(Math.ceil(d2.getTime() - millisecondsPerDay));\n    var theDay = d2.getDay();\n    // don't count sat and sunday\n    if(theDay !== 0 &amp;&amp; theDay !==6) {\n      counter--;\n    }\n  }\n  return d2;    \n}\n</code></pre></p>"},{"location":"js_sample_functions.html#verify-entered-date-is-after-today","title":"Verify entered date is after today","text":"<p>This function will set the date field to invalid if the entered date is not after today.</p> <p>Usage: </p> <p>Copy the code to the Settings...Events...onStart section of your application. <pre><code>// dateObj1 - the business object of the date field (i.e. BOA, BO.F_Date1)\n// errorMsg - The message to display to the user when the field is set to invalid\napp.getSharedData().isDateAfterToday = function(dateObj1, errorMsg) {\n\n  //get todays date, including the current time\n  var today = new Date();       \n  var d = dateObj1.getValue(); //get date from passed object\n\n  //set the time of the date to just before midnight\n  d.setSeconds(59);\n  d.setMinutes(59);\n  d.setHours(23);\n\n  //D1 MUST be less then today\n  if(d &lt; today) {\n    dateObj1.setValid(false, errorMsg);\n  } else {\n    dateObj1.setValid(true, \"\");\n  }\n}\n</code></pre></p> <p>You can use this function in the date field itself or elsewhere.  You could use this in the onItemChange event of the date field by:  <pre><code>app.getSharedData().isDateAfterToday(BOA, \"The date must be after today.\");\n</code></pre></p> <p>Or you could use this in a different event within a different item <pre><code>app.getSharedData().isDateAfterToday(BO.F_Date1, \"The date must be after today.\");\n</code></pre></p>"},{"location":"js_sample_functions.html#verify-entered-date-is-before-today","title":"Verify entered date is before today","text":"<p>This function will set the date field to invalid if the entered date is not after today.</p> <p>Usage:</p> <p>Copy the function to the Settings...Events...onStart section of your application. <pre><code>// dateObj1 - the business object of the date field (i.e. BOA, BO.F_Date1)\n// errorMsg - The message to display to the user when the field is set to invalid\napp.getSharedData().isDateAfterToday = function(dateObj1, errorMsg) {\n  //get todays date, including the current time\n  var today = new Date();       \n  var d = dateObj1.getValue(); //get date from passed object\n\n  //set the time of the date to just before midnight\n  d.setSeconds(59);\n  d.setMinutes(59);\n  d.setHours(23);\n\n  //D1 MUST be less then today\n  if(d &lt; today) {\n    dateObj1.setValid(false, errorMsg);\n  } else {\n    dateObj1.setValid(true, \"\");\n  }\n}\n</code></pre></p> <p>You can use this function in the date field itself or elsewhere.  You could use this in the onItemChange event of the date field by: <pre><code>app.getSharedData().isDateAfterToday(BOA, \"The date must be after today.\");\n</code></pre></p> <p>Or you could use this in a different event within a different item:</p> <pre><code> app.getSharedData().isDateAfterToday(BO.F_Date1, \"The date must be after today.\");\n</code></pre>"},{"location":"js_sample_functions.html#list-item-functions","title":"List Item Functions","text":""},{"location":"js_sample_functions.html#get-select-many-item-title","title":"Get select many item title","text":"<p>Returns the displayed title of the select many selection.  You pass it the value.</p> <p>Usage:</p> <p>Then to use it you would call it in the onItemChange of the dropdown: <pre><code>var selectedItemTitle = app.getSharedData().getCheckListItemTitles(item, BOA.getValue());\n</code></pre> Then you can do whatever you want with the selectedItemTitle, like set it into another field: <pre><code>BO.F_SingleLine.setValue(selectedItemTitle);\n</code></pre></p> <p>Function: <pre><code>app.getSharedData().getCheckListItemTitles = function(theList, compareValue) {\n  //split the compareValue into all the selected item\n  var selChecks = compareValue.split(\"__#__\");\n\n  //for each one, get the title from the list and create a new concatenation\n  var opts = theList.getOptions();\n  var retVal = \"\";\n  for(var h=0;h&lt;selChecks.length;h++) {\n    var v = get(selChecks, h);\n\n    //loop all the items and return if you find the compareValue\n    for(var i=0;i&lt;opts.length;i++) {               \n      var theItemTitle = get(get(opts,i), 'title');\n      var theItemValue = get(get(opts,i), 'value');\n\n      if(theItemValue === v) {\n        if (retVal !== \"\") {\n          retVal += \"__#__\";\n        }\n        retVal += theItemTitle;\n          break;\n      }\n    }\n  }\n  return retVal;\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#get-dropdown-title","title":"Get dropdown title","text":"<p>When you are using an ID for the saved value of a drop down and you need to get at the actual title.</p> <p>Usage:</p> <p>Copy the code to the Settings...Events...onStart section of your application.</p> <p>Then to use it you would call it in the onItemChange of the dropdown: <pre><code> var selectedItemTitle = app.getSharedData().getDropdownItemTitle(item, BOA.getValue());\n ```\n\nThen you can do whatever you want with the selectedItemTitle, like set it into another field:\n```javascript\nBO.F_SingleLine.setValue(selectedItemTitle);\n</code></pre></p> <p>Function: <pre><code>app.getSharedData().getDropdownItemTitle = function(theList, compareValue) {\n  var opts = theList.getOptions();\n  var retVal = \"\";\n\n  //loop all the items and return if you find the compareValue\n  for(var i=0;i&lt;opts.length;i++) {\n    var theItemBO = theList.getBOAttr();\n    var theItemTitle = get(get(opts,i), 'title');\n    var theItemValue = get(get(opts,i), 'value');\n\n    if(theItemValue === theItemBO.getValue()) {\n      retVal = theItemTitle;\n      break;\n    }\n  }\n  return retVal;\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#randomize-list-choices","title":"Randomize list choices","text":"<p>Usage:</p> <p>Copy the function in to the Application...onStart event.</p> <p>In the event where you want to trigger the function place the code: <pre><code>app.getSharedData().randomizeList(page.F_DropDown);\napp.getSharedData().randomizeList(form.getPage(\"P_NewPage1\").F_DropDown);\n</code></pre></p> <p>Function: <pre><code>// Returns a random number between the numbers specified. */\napp.getSharedData().randomFromInterval = function(from,to) {\n  return Math.floor(Math.random()*(to-from+1)+from);\n}\n\n// Randomizes the selections of the specified list item.\napp.getSharedData().randomizeList = function(theItem) {\n  //store the current value\n  var value = theItem.getBOAttr().getValue();\n\n  //set up the arrays\n  var arrOptions = theItem.getOptions();\n  var tmpOptions = theItem.getOptions();\n  var newOptions = new Array();\n\n  //Randomize the list\n  if(arrOptions !== null) {\n    for ( var i = 0; i &lt; arrOptions.length; i++ ) {\n      //the random number should be between 0 and the length of the array\n      var j = app.getSharedData().randomFromInterval(0,tmpOptions.length-1);\n      var temp = get(tmpOptions, j);\n\n      //assign the item to the new array\n      newOptions.push(temp);\n\n      //remove the item from the temp array\n      tmpOptions.splice(j, 1);\n    }\n\n    //Set the options back\n    theItem.setOptions(newOptions);\n    //reset back to the current value\n    theItem.getBOAttr().getValue(value);\n  }\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#remove-blank-options-from-list","title":"Remove blank options from list","text":"<p>Returns a new List that does not contain the blank value.  Supports Select One, Select Many and Dropdown objects.</p> <p>Usage:</p> <p>Copy the code to the Settings...Events...onStart section of your application.</p> <p>In the onShow event of the list object that you want to change call the function by doing something like: <pre><code>//get the dropdown options  \nvar c_opts = form.getPage('P_NewPage').F_DropDown.getOptions();\nvar n_opts = app.getSharedData().removeBlankFromList(opts);\nform.getPage('P_NewPage').F_DropDown.setOptions(n_opts);\n</code></pre> This gets the existing list options, passes it to the function which returns a new list.  That new list is then set into the list object.</p> <p>Function: <pre><code>// theList - the List item from which to remove blank options\napp.getSharedData().removeBlankFromList = function(theList) {\n  //check all options for a blank value and remove it...\n  var newList = new Array();\n  //loop through the current list\n  for(var j=0; j&lt;theList.length;j++) {\n      var curItem = get(theList, j);\n      if(curItem !== \"\") {\n          newList.push(curItem);\n      }\n  }\n  return newList;\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#remove-duplicates-from-list","title":"Remove duplicates from list","text":"<p>This function will remove any duplicate options found the current set of options.</p> <p>Usage:</p> <p>Copy the code to the Settings...Events...onStart section of your application.</p> <p>Then you need to decide where and when to call the function.  In the case of a service call you would want to call it when the service completes.  Which might look something like this:</p> <pre><code>var service = form.getServiceConfiguration(\"SC_ServiceThatReturnsList\");\n  service.connectEvent('onCallFinished', function(success)\n   {\n    if(success) {          \n       var cList = form.getPage('P_thePage').F_DropDown2.getOptions();\n       var nList = app.getSharedData().removeDuplicatesFromList(cList);\n       form.getPage('P_thePage').F_DropDown2.setOptions(nList);\n    }\n});\n</code></pre> <p>I would place this listener into the onLoad event of the form.  This technique works for dropdowns, check and radio lists. If you wanted to do this for a table you would have to change the process slightly.</p> <p>Function: <pre><code>app.getSharedData().removeDuplicatesFromList = function(theList) {\n  var newList = new Array();\n\n    //loop through the current list\n  for(var j=0; j&lt;theList.length;j++) {\n    var curItem = get(theList, j);\n    var itemFound = false;\n\n    //loop through the newList checking to see if the item is there\n    for(var k=0; k&lt;newList.length;k++) {\n      if(get(curItem, 'title') === get(get(newList, k), 'title')) {\n        itemFound = true;\n        break;\n      }\n    }\n    if(!itemFound) {\n      newList.push(curItem);\n    }\n  }\n  return newList;\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#remove-item-from-list","title":"Remove item from list","text":"<p>Removes the blank option from the list even if it is not the first, will also remove any duplicate blank options.</p> <p>Function: <pre><code>//   theList - the List item from which to remove blank options\napp.getSharedData().removeItemFromList = function(theList, theVal) {\n\n  //check all options for a blank value and remove it...\n  var newList = new Array();\n\n const validTypes = [\"comboBox\",\"radioGroup\",\"checkGroup\"];\n\n  if(validTypes.indexOf(theList.getType()) !== -1) { \n    //loop through the current list\n    var opts = theList.getOptions();\n    for(var j=0; j&lt;opts.length;j++) {\n      var curItem = get(opts, j);\n      if(get(curItem, 'title') !== theVal) {        \n        newList.push(curItem);        \n      }      \n    }\n  }\n  theList.setOptions(newList);\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#remove-items-from-list","title":"Remove items from list","text":"<p>Removes the options from the list that are found in the omitNames data passed to it.</p> <p>Usage: <pre><code>const omit = [\"red\",\"green\"];\napp.getSharedData().removeItemsFromList(page.F_SelectMany1, omit);\n</code></pre></p> <p>Function:</p> <pre><code>// theList - the List item from which to remove blank options\n// omitNames - string of items to omit from the list\napp.getSharedData().removeItemsFromList = function(theList, omitNames) {\n\n  //check all options for a blank value and remove it...\n  var newList = new Array();\n  const validTypes = [\"comboBox\",\"radioGroup\",\"checkGroup\"];\n\n  if(validTypes.indexOf(theList.getType()) !== -1) { \n    //loop through the current list\n    var opts = theList.getOptions();\n    for(var j=0; j&lt;opts.length;j++) {\n      var curItem = get(opts, j);\n\n      if(typeof omitNames !== \"undefined\" &amp;&amp; omitNames.indexOf(get(curItem, 'title')) === -1) {\n        newList.push(curItem);\n      }         \n    }\n  }\n  theList.setOptions(newList);\n}\n</code></pre>"},{"location":"js_sample_functions.html#table-item-functions","title":"Table Item Functions","text":""},{"location":"js_sample_functions.html#calculate-sum-of-column-a-where-column-b-meets-specified-criteria","title":"Calculate sum of column A where column B meets specified criteria","text":"<p>Returns the sum of columnA for all the rows where columnB matches the specified entry.  For example: Sum all the 'currency fields' in the rows where dropdown = 'approved'.</p> <p>Copy the code to the Settings...Events...onStart section of your application. <pre><code>// table - pass the table object - BO.F_Table\n// columnA - the string ID of the field to be part of the summation\n// columnB - the string ID of the field used to determine if the row should be included\n// entry - the string value to compare against columnB\napp.getSharedData().sumColumnA_searchByColumnB = function(table, columnA, columnB, entry) {  \n  var sum = 0;\n  for(var i = 0; i &lt; table.getLength(); i++) {\n    var r = table.get(i);\n    var fld = get(r,columnB);\n    var val = fld.getValue();\n\n    if(typeof val === \"string\") {\n      if(val.indexOf(entry) !== -1) {\n        sum += parseFloat(get(r,columnA).getValue());\n      }\n    } else {\n      if(val.toString() === entry) {\n        sum += parseFloat(get(r,columnA).getValue());\n      }\n    }\n  }\n  return sum;\n}\n</code></pre></p> <p>Note: This function as written will not all using a date or timestamp field as the search modifier (ColumnB).  If you want to enable it to support dates then it will need to be modified to include the instanceOf logic that may be found in the checkTableForEntry function.</p> <p>This function assumes that you are trying to sum a set of rows of a table where a field in those rows meets a specified criteria.  Copy the function into the Settings...Events section of your application.</p> <p>To use this function you will need to place the following in the onShow event of the field where the sum is being shown, as well as the onAdd and onRemove events of the table:  <pre><code>BO.F_Currency4.setValue(app.getSharedData().sumColumnA_searchByColumnB(BO.F_Table, 'F_Currency', 'F_DropDown4', 'Approved'));\n</code></pre></p>"},{"location":"js_sample_functions.html#check-table-for-entry","title":"Check table for entry","text":"<p>Checks to see if the specified text exists anywhere (any cell, any row) within the table. If the string is found then the function returns true, otherwise false.</p> <p>This is a really helpful function if you want to determine available features based on the existence of an item within a table.  For example, you might want to make sure that a user can only enter text into the table once.</p> <p>Copy the function code to the Settings...Events...onStart section of your application.</p> <pre><code>// table: This is the actual table object, not the string ID (e.g. BO.F_Table)\n// entry: this is the value of what you want to search for, the content of the table column will be converted to a string\n// usage: This is usually called within the onClick of a button that adds rows to a table.  Or you might want to search to see if a record exists in the table.\n\napp.getSharedData().checkTableForEntry = function(table, entry) {\n  var entryFound = false;\n\n  for(var i = 0; i &lt; table.getLength(); i++) {\n      var row = table.get(i);\n      var tmpentry = entry;\n\n      //loop through all the columns of the source table\n      var cols = row.getChildren();\n      for(var j=0;j&lt;cols.getLength();j++) {\n          var fld = cols.get(j);\n          var c = fld.getValue();\n\n          if(typeof c === \"string\") {\n            if(c.indexOf(tmpentry) !== -1) {\n              return true;\n            }\n          } else if(fld.getType() === \"date\" || fld.getType() === \"timeStamp\") {\n            var entryAsDt = new Date(entry);\n            if(entryAsDt.getYear() === c.getYear() &amp;&amp; entryAsDt.getMonth() === c.getMonth() &amp;&amp; entryAsDt.getDay() === c.getDay()) {\n              return true;\n            }   \n          } else {\n\n            //Convert to string for comparison            \n            c = c.toString();           \n\n            if(c === entry) {\n              return true;\n            }\n          }\n        } //inner for\n      } //outer for\n  return entryFound;\n}\n</code></pre> <p>This type of feature is typically called within the onClick event of a button that adds a row to the table. <pre><code>var entryFound = false;\nentryFound = app.getSharedData().checkTableForEntry(BO.F_Table, theSearchValue);\n</code></pre></p> <p>or</p> <pre><code>if(!app.getSharedData().checkTableForEntry(BO.F_Table, theSearchValue)) {\n     //the string was NOT found in the table, so now do something!\n}\n</code></pre>"},{"location":"js_sample_functions.html#check-table-for-entry-by-column","title":"Check table for entry by column","text":"<p>This function checks a specific column of a table for the specified string.  If the string is found then the function returns true, otherwise false. </p> <p>Copy the function code to the Settings...Events...onStart section of your application.</p> <pre><code>// table: This is the actual table object, not the string ID (e.g. BO.F_Table)\n// column: This is the string of the columnID that you want to seach\n// entry: this is the value of what you want to search for, the data type should match that of the column you are searching (i.e. string, int, date)\napp.getSharedData().checkTableForEntryByColumn = function(table, column, entry) {\n  var entryFound = false;\n\n  for(var i = 0; i &lt; table.getLength(); i++) {\n    var row = table.get(i);\n    var tmpfld = get(row,column);\n    var tmpval = tmpfld.getValue();\n    if(typeof tmpval === \"string\") {\n      if(tmpval.indexOf(entry) !== -1) {\n        entryFound = true;\n        break;\n      }\n    } else if(tmpfld.getType() === \"date\" || tmpfld.getType() === \"timeStamp\") {\n      var entryAsDt = new Date(entry);\n      if(entryAsDt.getYear() === tmpval.getYear() &amp;&amp; entryAsDt.getMonth() === tmpval.getMonth() &amp;&amp; entryAsDt.getDay() === tmpval.getDay()) {\n       entryFound = true;\n       break;\n      }   \n    } else {\n      tmpval = tmpval.toString();\n      if(tmpval === entry) {\n        entryFound = true;\n        break;\n      }\n    }\n  }\n  return entryFound;\n}\n</code></pre>"},{"location":"js_sample_functions.html#convert-table-to-javascript-object","title":"Convert table to javaScript object","text":"<p>This function will convert a FEB table into a javaScript object that you can then reference within your javaScript code.</p> <pre><code>app.getSharedData().convertTableToObj = function(table) {\n  //setting the global table properties\n  var tblObj = {rows: new Array(),id: table.getBOAttr().getId(),length: table.getBOAttr().getLength(),type:table.getBOAttr().getType(), active: table.getActive(), title: table.getTitle(), visible: table.getVisible(), hintText: table.getHintText(), hoverText: table.getHoverText(), cssClasses: table.getClasses()};\n\n  //loop through all the table rows to create the rows object\n  for(var i = 0; i &lt; table.getBOAttr().getLength(); i++) {\n    var rowObj = {};\n    var row = table.getBOAttr().get(i); //get the first row\n    var ol = row.getChildren(); //get the list object that contains the row fields\n    for(var j=0;j&lt;ol.getLength();j++) {\n     var f = ol.get(j);\n     var v = f.getValue();\n     set(rowObj,f.getId(), v);\n    }\n    tblObj.rows.push(rowObj);\n  }\n  return tblObj;\n}\n</code></pre> <p>Pass the UI object of the table to the function:</p> <pre><code>var obj = app.getSharedData().convertTableToObj(page.F_Table1);\n</code></pre> <p>The table object has the following structure:</p> <pre><code>{rows:[],\nid:\"F_Table1\",\nlength:0,\ntype:\"BusinessObjectList\",\nactive:true,\ntitle:\"Table\",\nvisible:true,\nhintText:\"\",\ncssClasses:[]}\n</code></pre> <p>rows is an array that will contain all the field ids and their stored values, for example:</p> <pre><code>\"rows\":[{\"F_SingleLine2\":\"Chris\",\"F_Paragraphtext1\":\"This is a multi-line text field\",\n\"F_Date2\":\"2017-02-22T08:00:00.000Z\",\"F_Number1\":12,\"F_DropDown1\":\"red\",\"F_SelectMany1\":\"deer__#__bear\"}]\n</code></pre> <p>You could then convert this object to JSON:</p> <pre><code>toJson(obj)\n</code></pre>"},{"location":"js_sample_functions.html#copy-table-contents-to-another-table","title":"Copy table contents to another table","text":"<p>Copy all the rows from one table to another.  This assumes that the tables have the same number of rows and it will copy the columns in order.  There is no error checking so if you try to copy a datatype that does not match it may throw a run-time error.</p> <pre><code>// sourceTable - The table object you want to copy (e.g. BO.F_Table)\n// targetTable - The table object you want to copy into (e.g. BO.F_Table1)\n// clearTable - true/false - If true will empty the target table before copying.\napp.getSharedData().copyRowsToAnotherTable = function(sourceTable, targetTable, clearTable) {\n  if(clearTable) {\n    targetTable.setValue(new Array());\n  }\n\n  for(var i = 0; i &lt; sourceTable.getLength(); i++) {\n    var row = sourceTable.get(i);\n    var newRow = targetTable.createNew();\n\n    //loop through all the columns of the source table\n    var cols = row.getChildren();\n    for(var j=0;j&lt;cols.getLength();j++) {\n      //get the row object of the target table\n      var newCols = newRow.getChildren();\n\n      //for each row of the source table we set the value into the same row of the target table\n      newCols.get(j).setValue(cols.get(j).getValue());\n    }\n    targetTable.add(newRow);\n  }\n}\n</code></pre> <p>In the event where you want to trigger the function place code like:</p> <pre><code>app.getSharedData().copyRowsToAnotherTable(BO.F_Table, BO.F_Table0, true);\n</code></pre>"},{"location":"js_sample_functions.html#count-table-rows-that-contain-entry-by-column","title":"Count table rows that contain entry by column","text":"<p>Returns the number of rows that contain the specified entry.</p> <p>Copy the code to the Settings...Events...onStart section of your application. <pre><code>// table: This is the actual table object, not the string ID (e.g. BO.F_Table)\n// column: This is the string of the columnID that you want to seach\n// entry: this is the value of what you want to search for,\n// the data type should match that of the column you are searching (i.e. string, int, date)\napp.getSharedData().countTableRowsForEntry = function(table, column, entry) {\n  var entryFoundCount = 0;\n  for(var i = 0; i &lt; table.getLength(); i++) {\n    var r = table.get(i);\n    var fld = get(r,column);\n    var val = fld.getValue();\n\n    if(typeof val === \"string\") {\n      if(val.indexOf(entry) !== -1) {\n        entryFoundCount++;\n      }\n    } else {\n      if(val.toString() === entry) {\n        entryFoundCount++;\n      }\n    }\n  }\n  return entryFoundCount;\n}\n</code></pre></p> <p>Note: This function as written will not all using a date or timestamp field as the search modifier (ColumnB).  If you want to enable it to support dates then it will need to be modified to include the instanceOf logic that may be found in the checkTableForEntry function.</p> <p>To use this function you need to decide where and how you want to check the value that the user might be trying to add. When you call the function you would use the following statement: <pre><code>app.getSharedData().countTableRowsForEntry(BO.F_theTableObj,'F_theColumnToSearch','theValueYouAreSearchingFor');\n</code></pre></p>"},{"location":"js_sample_functions.html#duplicate-selected-row-and-append-to-same-table","title":"Duplicate selected row and append to same table","text":"<p>This function will duplicate the selected row of a table and then append it to the end of the table.</p> <p>Copy the function to the Settings...Events...onStart or Form onLoad section of your application.</p> <pre><code>// theTable - The table object you want to copy (e.g. BO.F_Table)\n// theRow - the row to duplicate\napp.getSharedData().duplicateSelectedRow = function(theTable, theRow) {\n  var newRow = theTable.createNew();\n\n  //loop through all the columns of the source table\n  var cols = theRow.getChildren();\n  for(var j=0;j&lt;cols.getLength();j++) {\n    //get the row object of the target table\n    var newCols = newRow.getChildren();\n\n    //for each row of the source table we set the value into the same row of the target table\n    newCols.get(j).setValue(cols.get(j).getValue());\n  }\n  theTable.add(newRow);\n}\n</code></pre> <p>Call the function by placing the following code in the desired event (i.e. onClick of a button or the table iteself):  </p> <pre><code>app.getSharedData().duplicateSelectedRow(BO.F_Table, page.F_Table.getSelection());\n</code></pre>"},{"location":"js_sample_functions.html#get-first-table-row-that-contains-entry-by-column","title":"Get first table row that contains entry by column","text":"<p>Copy the code to the Settings...Events...onStart section of your application.</p> <pre><code>app.getSharedData().getTableRowThatContainsEntry= function(table, column, entry) {\n  var tblRow = null;\n  for(var i = 0; i &lt; table.getLength(); i++) {\n    if(get(table.get(i),column).getValue() === entry) {\n      tblRow = table.get(i);\n      break;\n    }\n  }\n\n  return tblRow;\n}\n</code></pre> <p>To use this function you need to decide where and how you want to check the value that the user might be trying to add. When you call the function you would use the following statement:</p> <pre><code>var row = app.getSharedData().getTableRowThatContainsEntry(BO.F_theTableObj, 'F_theColumnToSearch','theValueYouAreSearchingFor');\nif(row !== null) {\n //do something with the row\n}\n</code></pre>"},{"location":"js_sample_functions.html#get-index-of-a-row-in-a-table","title":"Get index of a row in a table","text":"<p>This is a function that will allow you to determine the index of a specific row in a table.  Now the intention of this function is to use it in conjunction with the table.getSelection() which returns the \"selected\" row, by passing that into this function you can get back the \"index\" of that row in the table.</p> <pre><code>// theTable: the BO object of the table\n// theRow:   the BO object of the row to be moved\napp.getSharedData().getIndexInTable = function(theTable, theRow) {   \n\n   if(theTable !== null &amp;&amp; theRow !== null) {\n\n       for(var i=0; i&lt;theTable.getLength(); i++) {\n           var tr = theTable.get(i);\n           if(tr === theRow) {\n               return i;\n           }\n       }\n    }\n    return -1; //if we get here then the row was not found in the table\n}\n</code></pre> <p>The use case is that a user wanted to be able to set some table fields to read-only if the selected row was the \"last\" row in the table.  The row business object does not know anything about its position in its parent table, therefore we have to walk the table comparing the selected row against each one that we find.  The code was placed in the onShow event of a field in the table:</p> <pre><code>var inx = app.getSharedData().getIndexInTable(app.getForm('F_Form1').getBO().F_Table1,app.getSharedData().selectedRow);\n\nif(inx === app.getForm('F_Form1').getBO().F_Table1.getLength() - 1) {\n  item.setActive(false);  //this is the current item\n  //this is how you would reference another item in the same table      \n  page.F_SingleLine2.setActive(false);\n}\n</code></pre> <p>Calling the function from within a table (we have to begin the reference from the app level to get the right object):</p> <pre><code>var inx = app.getSharedData().getIndexInTable(app.getForm('F_Form1').getBO().F_Table1,app.getSharedData().selectedRow);\n</code></pre> <p>Calling the function from within a field on the form:</p> <pre><code>var inx = app.getSharedData().getIndexInTable(BO.F_Table1,page.F_Table1.selectedRow);\n</code></pre>"},{"location":"js_sample_functions.html#move-a-table-row-down-one-position","title":"Move a table row down one position","text":"<p>Change the order of the table by moving a row down one position.</p> <p>Function</p> <pre><code>// theTable: the BO object of the table\n// theRow: the BO object of the row to be moved\napp.getSharedData().moveSelectionDown = function(theTable, theRow) {\n    var rowObjs = new Array();\n    var rowMoved = false;\n    //remove all rows from the table\n    //store each row in a separate array\n    while(theTable.getLength() &gt; 0) {\n        rowObjs.push(theTable.get(0));\n        theTable.remove(theTable.get(0));\n    }\n    for(var i = 0; i &lt; rowObjs.length; i++) {\n        var firstRow = get(rowObjs, i);\n\n        // check to make sure we are not the last row, if we are just put the row back in the table\n        if(i &lt; rowObjs.length - 1) {\n          var secondRow = get(rowObjs, i+1);\n          if(!rowMoved) {\n            if(firstRow === theRow) {\n                //add second row, then the current row\n                theTable.add(secondRow);\n                i++; //increment counter again because we just processed two rows in one loop\n                rowMoved = true;\n            }\n          }\n\n        }\n        theTable.add(firstRow);\n    }\n}\n</code></pre> <p>Usage:</p> <p>Place in a button's onClick event. Clearing the selection after moving a row is critical otherwise errors may occur.</p> <pre><code>app.getSharedData().moveSelectionDown(BO.F_InputParameters, page.F_InputParameters.getSelection())\npage.F_InputParameters.setSelection(-1);\n</code></pre>"},{"location":"js_sample_functions.html#move-a-table-row-up-one-position","title":"Move a table row up one position","text":"<p>Change the order of the table by moving a row up one position.</p> <p>Function:</p> <pre><code>// theTable: the BO object of the table\n// theRow: the BO object of the row to be moved\napp.getSharedData().moveSelectionUp = function(theTable, theRow) {\n    var rowObjs = new Array();\n    var rowMoved = false;\n\n    //remove all rows from the table\n    //store each row in a separate array\n    while(theTable.getLength() &gt; 0) {\n        rowObjs.push(theTable.get(0));\n        theTable.remove(theTable.get(0));\n    }\n    for(var i = 0; i &lt; rowObjs.length; i++) {\n        var firstRow = get(rowObjs, i);\n        var secondRow = get(rowObjs, i+1);\n\n        if(!rowMoved) {\n            if(secondRow === theRow) {\n                //add second row first, then the current row\n                theTable.add(secondRow);\n                i++; //increment counter again because we just processed two rows in one loop\n                rowMoved = true;\n            }\n        }\n        theTable.add(firstRow);\n    }\n}\n</code></pre> <p>Usage:</p> <p>Place in a button's onClick event. Clearing the selection after moving a row is critical otherwise errors may occur.</p> <pre><code>app.getSharedData().moveSelectionUp(BO.F_InputParameters, page.F_InputParameters.getSelection())\npage.F_InputParameters.setSelection(-1);\n</code></pre>"},{"location":"js_sample_functions.html#print-the-contents-of-a-table","title":"Print the contents of a table","text":"<p>This function is a quick way to render the content of a table, that comes back from a service call, in a pure text format.  This is an iterative function that walks all the rows and columns of a table and converts its content to a string.  This is just an example of the type of thing that could be accomplished.  Ideally you would take the premise and expand it for your situation.  You may want to add more detailed html or css to really fine-tune what the printed result looks like.</p> <p>Function:</p> <pre><code>app.getSharedData().printTable = function(table) {\n  var s = \"&lt;p&gt;\"; //can change your html properties here\n\n  //loop through all the table rows\n  for(var i = 0; i &lt; table.getLength(); i++) {\n    var row = table.get(i); //get the first row\n    var ol = row.getChildren(); //get the list object that contains the row fields\n    for(var j=0;j&lt;ol.getLength();j++) {\n     var f = ol.get(j);\n     var v = f.getValue();\n     s += \"&lt;b&gt;\" + f.getId() + \":&lt;/b&gt; \" + v + \"&lt;BR /&gt;\"; //this controls the formatting of each column in the table row\n    }\n    s += \"&lt;BR /&gt;&lt;BR /&gt;\"; //this controls what happens when we move to the next row\n  }\n  s += \"&lt;/p&gt;\"; //close the html elements that were started at the beginning\n  return s;\n}\n</code></pre> <p>Usage::</p> <p>The most common use case would use this function to display the table content in an HTML Area so that you can apply your own custom HTML to provide the most detailed formatting.  You could also place the content in a Text item but you would not have any control over the formatting (i.e. applying bold, italic, etc).</p> <p>If you are using this as I did, where a service populates a table then you will want to do the processing after the service completes, something like:</p> <pre><code>var srv = form.getServiceConfiguration('SC_ServiceConfig0');\nsrv.connectEvent(\"onCallFinished\", function(success)\n{\n  if(success) {\n    form.getPage('P_NewPage').F_HTMLArea.setContent(app.getSharedData().printTable(BO.F_Table1));\n  }\n});\n</code></pre>"},{"location":"js_sample_functions.html#miscellaneous-functions","title":"Miscellaneous Functions","text":""},{"location":"js_sample_functions.html#calculate-duration","title":"Calculate duration","text":"<p>This function can be used to calculate the duration between two times.  This function currently supports calculating the duration into hours and minutes.  You could further enhance this function to support months and years, but the output will always be rendered as a string representing the number of hours.</p> <p>Function: <pre><code>// startTime - Can be date, time or dateTime\n// endTime - Can be date, time or dateTime\n// rndHours - Round the result to the highest integer (hour). Values are true or false.\napp.getSharedData().calcDuration = function(startTime, endTime, rndHours) {  \n\n  //convert to milliseconds\n  var d1 = startTime.getTime();\n  var d2 = endTime.getTime();  \n  var diff = d2 - d1;\n  var durHours = diff / 1000 / 60 / 60;\n  if(rndHours) {\n    Math.ceil(durHours);\n  }\n  return durHours;\n}\n</code></pre></p> <p>Usage:</p> <ol> <li> <p>Copy the code to the Settings...Events...onStart section of your application.</p> </li> <li> <p>To call the function, on the onItemChange of your date fields add:</p> </li> </ol> <pre><code>var dur = app.getSharedData().calcDuration(BO.F_Time.getValue(),\nBO.F_Time0.getValue(),true);\nBO.F_SingleLine.setValue(dur);\n</code></pre> <p>This approach takes just the time values, but you could create a different function that took the actual field objects and then you could add validation and error messages if your business case required it. </p> <p>For example, you could make sure the start time did not come after the end time.  You could also force either time to be within a specific window (i.e. 8-5).  By using the field objects as the parameters you could use the item.setValid() functions to set them invalid and show error text if the user entered an invalid value.</p>"},{"location":"js_sample_functions.html#calculate-sum-of-fields","title":"Calculate sum of fields","text":"<p>Returns the sum of all the fields specified</p> <p>Function: <pre><code>// fields - array of field objects - new Array(BO.F_Field1, BO.F_Field2, ...)\napp.getSharedData().sumFields = function(theBO, fields) {  \n  var sum = 0;\n  for(var i = 0; i &lt; fields.length; i++) {\n    var f = get(fields, i);\n    var itm = get(theBO, f);\n    var v = itm.getValue();\n    if(typeof itm !== \"undefined\" &amp;&amp; v !== \"\" &amp;&amp; !isNaN(+v)) {  //!isNaN(+v) is specifically to omit text fields when their value is not numeric\n        sum += parseFloat(v);\n    }\n  }\n  return sum;\n}\n</code></pre></p> <p>Usage:</p> <p>Copy the function to Settings...Events section of your application.  Place this in the onShow event of the field where the sum is shown and then again in the onItemChange event of all the fields included in the summation: <pre><code>BO.F_Sum.setValue(app.getSharedData().sumFields(BO, new Array(\"F_Field1\", \"F_Field2\", \"F_Field3\", \"F_Field4\")));\n</code></pre></p> <p>This function assumes that the fields being provided are simple fields in your form, either String, Number or Currency. </p> <p>Example that uses the code -&gt; Sum Multiple Fields Using JavaScript</p> <p>The example demonstrates how to use the recursive function to dynamically add the summation to the onItemChange event of all the fields defined in the array.</p>"},{"location":"js_sample_functions.html#check-if-field-takes-an-input","title":"Check if Field takes an Input","text":"<p>Function: <pre><code>app.getSharedData().isInputField = function(theItemType) {\n  var r = false;\n  const inputFieldTypes = [\"text\",\"textArea\",\"date\",\"checkGroup\",\"checkBox\",\"radioGroup\",\"number\",\"currency\",\"comboBox\",\"horizontalSlider\",\"choiceSlider\",\"time\",\"webLink\",\"name\",\"surveyQuestion\",\"emailAddress\",\"password\",\"timeStamp\",\"richTextArea\"];\n  if(inputFieldTypes.indexOf(theItemType) !== -1) {\n    r = true;\n  }\n  return r;\n}\n</code></pre></p> <p>Usage:</p> <p>This function is useful for quickly determining if an item takes user input.  This function is commonly used in conjunction with the Recursive function (also on this page), where you may want to take some action for input items in your form in the onLoad event.  For example, when the form loads connect an event listener so that some code will be executed when the event is triggered.</p> <p>Copy the function in to the Application onStart event</p> <p>Execute the function by calling it in the desired event:</p> <ul> <li>if you place this in the mouseover event of an item it will show an alert indicating if the item takes an input or not:</li> </ul> <pre><code>alert(app.getSharedData().isInputField(item.getType()));\n</code></pre> <ul> <li>Perhaps you want to make a decision based on the result <pre><code>if(app.getSharedData().isInputField(item.getType())) {\n  //if true\n} else {\n  //if false\n}\n</code></pre></li> </ul>"},{"location":"js_sample_functions.html#constrain-field-data-length","title":"Constrain field data length","text":"<p>This function will restrict the field length of a field.  It will not allow anymore characters to be entered into the field once the limit is reached. </p> <p>Function: <pre><code>app.getSharedData().restrictFieldLength = function(theField, theLength) {\n  var v = theField.getDisplayValue();\n  if(v.length &gt;= theLength) {\n    theField.setDisplayValue(v.substr(0,theLength));\n  }\n}\n</code></pre></p> <p>Usage:</p> <p>Place this function in the Settings &gt; Events</p> <p>Navigate to the field where you want to constrain the length.  In the onItemLiveChange event place the code below. <pre><code>app.getSharedData().restrictFieldLength(item, 3);\n</code></pre></p> <p>This will limit the length to (3). You can adjust this number according to your needs.</p>"},{"location":"js_sample_functions.html#invalidate-field-based-on-length","title":"Invalidate field based on length","text":"<p>Function that can be used to check the content of a field and set it to invalid if it exceeds a specified length.</p> <p>Function: <pre><code>// theItem - the UI object of the item to validate\n// theLength - the max length of the field, if exceeded the field will be set to invalid\n// theMsg - The text to render if the length is exceeded.\napp.getSharedData().fieldLengthValidation = function (theItem, theLength, theMsg) {\n  var dval = theItem.getDisplayValue();\n  if(dval.length &gt; theLength) {\n    theItem.getBOAttr().setValid(false, theMsg);\n  } else {\n    theItem.getBOAttr().setValid(true, '');\n  }\n}\n</code></pre></p> <p>Usage:</p> <ul> <li> <p>Place the function in the Settings...Events</p> </li> <li> <p>Use the function in the onLiveItemChange event of the field you want to validate and change parameters as desired:</p> </li> </ul> <pre><code>app.getSharedData().fieldLengthValidation(item, 3, 'Field will only accept 3 characters or less');\n</code></pre>"},{"location":"js_sample_functions.html#multiply-multiple-field-values","title":"Multiply multiple field values","text":"<p>Function: <pre><code>app.getSharedData().multiplyFields = function(fields) {   \n  var result = 1;\n  for(var i = 0; i &lt; fields.length; i++) {\n    var f = get(fields, i);\n      if(f.getValue() !== \"\") {\n        result *= parseFloat(f.getValue());\n      }\n     }\n  return result;\n}\n</code></pre></p> <p>Usage:</p> <p>Copy the function to Settings...Events section of your application.  Place this in the onShow event of the field where the sum is shown and then again in the onItemChange event of all the fields included in the summation: <pre><code>BO.F_Result.setValue(app.getSharedData().multiplyFields(new Array(BO.F_Field1, BO.F_Field2, BO.F_Field3, BO.F_Field4)));\n</code></pre></p> <p>This function assumes that the fields being provided are simple fields in your form, either String, Number or Currency. </p>"},{"location":"js_sample_functions.html#pad-field-value","title":"Pad field value","text":"<p>This function can be used to pad a string with a padding character up to a specified length.</p> <p>Function: <pre><code>// theVal - the string you want to pad\n// padChar - the character you want to use to pad the string\n// desiredLength - the total length the resulting string should be\napp.getSharedData.padValue = function(theVal, padChar, desiredLength) {\n  while(theVal.length &lt; desiredLength) {\n    theVal = padChar + theVal;              \n  }\n  return theVal;\n}\n</code></pre></p> <p>Usage Notes:</p> <p>Place this function in the onLoad event of the form.  Then in the onItemChange event of the field you wish to pad place: <pre><code>BOA.setValue(app.getSharedData.padValue(BOA.getValue(), \"0\", 4));\n</code></pre></p> <p>This will pad the value with zeros up to a total string length of 4.</p>"},{"location":"js_sample_functions.html#recursive-function-to-loop-over-all-items-in-a-form","title":"Recursive function to loop over all items in a form","text":"<p>If you have a need to walk all the items in a form and then perform some operation on each one, you could use these functions.</p> <p>Function: <pre><code>app.getSharedData().processItem = function(item) {\n\n  //do whatever you want to the item...\n   alert(item.getId() + \" : \" + item.getValue());\n\n  //set item to inactive\n  if(app.getSharedData().isInputField(item.getType())) {\n    item.setActive(false);\n  }\n //if(item.getType() === \"text\") {\n   //do your thing\n //}\n\n}\n\n/*\n* Returns true if the current item has children, otherwise false.\n*/\napp.getSharedData().hasItems = function(containerID) {\n  var list = containerID.getChildren();\n  if(list.getLength() &gt; 0) {\n    return true;\n  } else {\n    return false;\n  }   \n}\n\n/*\n* Recursive function used for counting form items.\n* containerID: UI item (i.e. page or item)\n* processItem: the function that contains the work we want to perform on the item we have accessed\n*/\napp.getSharedData().getItem = function(containerID, processItem) {\n  var itemList;\n  var pageList;\n  var pageCount = 1;\n  debugger;\n\n  //check to see if the container is a form as it requires different processing\n  if(containerID.getType() === \"form\") {\n    pageList = containerID.getPageIds(); //list of the page IDs - not the actual objects!!\n    pageCount = pageList.length;\n  } else {\n    itemList = containerID.getChildren();    \n  }\n\n  //need a loop to account for different pages\n  for(var p=0; p&lt;pageCount;p++) {\n    if(containerID.getType() === \"form\") {\n      itemList = containerID.getPage(get(pageList, p)).getChildren(); //get the page object from the form\n    }\n\n    //loop all the items\n    for(var i=0; i&lt;itemList.getLength(); i++)\n    {\n      var theItem = itemList.get(i);\n      if(app.getSharedData().hasItems(theItem)) {\n        //if container go into it...\n        app.getSharedData().getItem(theItem, processItem);   \n      } else {\n        //other wise do something with the item\n        if(dojo.isFunction(processItem)) { //make sure that the parameter passed is a function\n          processItem(theItem);        \n        }\n      }\n    }\n  }\n}\n</code></pre></p> <p>Usage:</p> <p>Place the functions in the Settings...Events...Custom Actions.  Then you can call the main function app.getSharedData().getItem(page) and it will iterate through all the objects on that page, including all the items within a container (section, tabbed folder). </p> <p>Some examples of this function are:</p> <p>Walk all the items in a form: <pre><code>app.getSharedData().getItem(form, app.getSharedData().processItem)\n</code></pre></p> <p>Walk all the items in a page: <pre><code>app.getSharedData().getItem(form.getPage('P_Page1'), app.getSharedData().processItem) //if you place in the form onLoad event you have to qualify the page\n</code></pre></p> <p>Walk all the items in a section: <pre><code>app.getSharedData().getItem(item, app.getSharedData().processItem) //if you place this in the onShow event of the section\n</code></pre></p> <p>Walk all the items in a tabbedFolder: <pre><code>app.getSharedData().getItem(form.getPage('P_Page1').F_TabbedFolder, app.getSharedData().processItem) //if you place this in the onLoad event of the form\n</code></pre></p> <p>If you wanted to only perform an operation on a specific item type then you could further modify the function: <pre><code>if(item.getType() === \"text\") {\n  //do your thing\n}\n</code></pre></p>"},{"location":"js_sample_functions.html#validate-field-by-pattern","title":"Validate field by pattern","text":"<p>This function will enforce a regex pattern on the specified field and will set the field to invalid if it does not match.</p> <p>Note:  The capability to use patterns and regular expressions for validating Single Line fields does not require javaScript as it can be set through the field's advanced property settings.</p> <p>Function: <pre><code>app.getSharedData().validateByPattern = function(theItem, pattern, errMsg) {\n  var re = new RegExp(pattern);\n  if(!re.test(theItem.getValue())) {\n   theItem.setValid(false, errMsg);\n  } else {\n    theItem.setValid(true, \"\");\n  }\n}\n</code></pre></p> <p>Usage:</p> <p>For example, you may want to validate a single line field as a US based phone number. In the onItemChange event of the field you would place:</p> <pre><code>app.getSharedData().validateByPattern(BOA, /^\\(\\d{3}\\) \\d{3}-\\d{4}$/, \"The number provided does not meet the required format\");\n</code></pre>"},{"location":"js_sample_functions.html#survey-item-functions","title":"Survey Item Functions","text":""},{"location":"js_sample_functions.html#calculate-the-average-of-survey-item-answers","title":"Calculate the average of survey item answers","text":"<p>When your survey answers have numeric saved values you might have a situation where you want to calculate the average of all the choices the user selected.</p> <p>Included here is a javaScript function that can be used to accomplish that task.</p> <p>Function:</p> <pre><code>//get the average from the survey item\napp.getSharedData().getAverageFromSurvey = function (surveyItem) {\n  var avg = 0;\n  for(var i=0; i&lt;surveyItem.getLength(); i++) {\n    //get the value of the question\n    var qval = surveyItem.get(i).getValue();\n    if(qval !== \"\") {\n      avg += parseInt(qval);\n    }\n  }\n  return (avg / surveyItem.getLength());\n}\n</code></pre> <p>Usage</p> <p>The usage of the function is in the onItemChange of the survey item:</p> <pre><code>var surveyQList = page.F_Survey.getChildren();\nBO.F_Number4.setValue(app.getSharedData().getAverageFromSurvey(surveyQList));\n</code></pre> <p>The F_Survey is the ID of the survey item whose average is being calculated.</p> <p>The F_Number is the ID of the field where the average is being placed.</p> <p>A few assumptions have been made for this function:</p> <ol> <li> <p>The average is taken on all the questions in the survey item whether they are answered or not.  You could modify the function if you wanted to only take the average of \"answered\" questions, however I assume that all the questions would be answered, which is why I didn't implement it.</p> </li> <li> <p>The saved value of the survey item choices must be numbers.  The function doesn't check and may produce a strange result if you tried this with non-numeric saved values.</p> </li> </ol>"},{"location":"js_sample_functions.html#rank-survey-choices","title":"Rank survey choices","text":"<p>You could create a survey item that limits what the user can select.  By using some custom JavaScript you can force a user to \"rank\" their selections.  If a user tries to select the same rank for a second option then the previous option of the same rank is deselected.</p> <p></p> <p>Below is the JavaScript that makes this work.  It is written very generically so to apply to your form all you have to do is copy it into the onShow event of the Survey item where you want this \"ranking\" behavior enforced.</p> <pre><code>if(!app.getSharedData().rankSetup)\n{\n  /* This global flag insures that the function will only get called once */\n  app.getSharedData().rankSetup = true;\n  var children = field.getChildren();\n\n  var createlisteningFunction = function(item){\n    return (function(){\n      var value = item.getValue();\n      if(value.length === 0)\n        return;\n\n      /* clears the value of the other items if they share the same rank value */\n      for(var i=0; i&lt;children.getLength();i++)\n      {\n        if(children.get(i) === item)\n          continue;\n        if(children.get(i).getValue() === value)\n          children.get(i).setValue(\"\");\n      }\n    });\n  };\n\n  /*create and attach a listener function to each questions onChange event*/\n  for(var i=0; i&lt;children.getLength(); i++)\n  {\n    children.get(i).getBOAttr().connectEvent('onChange', createlisteningFunction(children.get(i)));\n  }\n}\n</code></pre> <p>Parent topic: Adding JavaScript</p>"},{"location":"kubernetes_helm_deployment.html","title":"Kubernetes Helm deployment","text":"<p>The Kubernetes container platform allows orchestration features for the automated deployment, coordination, scaling, and management of containerized applications. This deployment mechanism leverages Helm to establish a reliable and repeatable containerized solution.</p> <p>Kubernetes is a third-party product. HCL support is available to assist in configuration and support-related issues as they pertain to the Leap product. If you require assistance with a full Kubernetes deployment, reach out to HCL Services or one of our HCL Business Partners to inquire about professional services.</p> <p>Learn how to deploy HCL Leap to a Kubernetes-friendly container platform using Helm. This section provides administrators with all Helm-based deployment tasks to deploy HCL Leap and later releases to supported Kubernetes platforms. This includes preparation, installation, and un-installation of the deployments using Helm.</p> <p>Note: Deploying the Leap image without using our provided Helm chart is not recommended and not currently supported.</p> <p>Originally designed by Google, now governed by the Cloud Native Computing Foundation (CNCF) and developed by Google, Red Hat, and many others, Kubernetes is now widely used by organizations of various sizes to run containers in a cloud environment.</p>"},{"location":"kubernetes_helm_deployment.html#manage-operations","title":"Manage operations","text":"<p>Kubernetes automates the deployment and management of containerized applications. The number of concurrent users that Leap can support depends on the size of the deployment. For sizing and deployment-related questions, contact HCL. If you are unfamiliar with this technology, see An Overview of Kubernetes.</p> <p>Cloud deployment: You can run a Kubernetes cluster on your own hardware or a different cloud provider. You can also use a third-party Kubernetes cloud provider, such as Amazon EKS, Google GKE, or other third-party Kubernetes provider to deploy Leap. Each cloud provider makes security recommendations for running workloads securely in their environment. Refer to the cloud provider's security documentation for further details.</p>"},{"location":"kubernetes_helm_deployment.html#scalability","title":"Scalability","text":"<p>Kubernetes automatically scales a cluster up and down in line with demand without increasing your operations team. To achieve optimal performance, you can provision the infrastructure for Kubernetes before you can install, configure, and connect a component to create a cluster.</p>"},{"location":"kubernetes_helm_deployment.html#security","title":"Security","text":"<p>With Kubernetes, you must integrate security throughout the layers of the solution stack before deploying and running the container. Because cloud-native security is multilayer, it is an effective way to address threats across every level of workflow.</p> <p>For additional information, see Overview of Cloud Native Security in the Kubernetes documentation.</p>"},{"location":"kubernetes_helm_deployment.html#disaster-recovery","title":"Disaster recovery","text":"<p>The backup and restore process is handled outside of Leap. Consult with your Kubernetes vendor for details.</p>"},{"location":"kubernetes_helm_deployment.html#namespaces","title":"Namespaces","text":"<p>Many existing production environments use namespaces. A namespace can be used for Leap, but it is not required. When you enable autoscaling, you are creating a namespace for monitoring and custom-metrics. If a namespace is created for Leap, be sure to add the namespace argument to the helm and kubectl commands. For example, if you deploy Leap in a namespace called \"leap\" and you want to view a list of pod, issue the following command:</p> <pre><code>kubectl -n leap get pods\n</code></pre> <p>To see a list of namespaces that are configured, issue the following command:</p> <pre><code>kubectl get namespaces\n</code></pre> <p>For additional information, see Namespace topic in the Kubernetes documentation.</p>"},{"location":"kubernetes_helm_deployment.html#network","title":"Network","text":"<p>If you are new to Kubernetes, there are some concepts that are helpful to understand how to configure your firewall. There are small differences between cloud providers and on-prem providers where the names of the features may vary. The following information is generic to introduce the concept. It is important to understand the IP addresses used in a deployment have different ranges, and when configuring a firewall rule, the source IP and destination IP need to be considered.</p> <p>Node: A node is the virtual machine or hardware running the Kubernetes cluster, it hosts the pods that run the Leap workloads. A node has an IP address in the node IP range, it will have both an internal IP address and an external IP address. Video nodes are reached by end users from their public IP address directly to the node\u2019s external IP address.</p> <p>Pod: A pod is a Kubernetes based workload, which has one or more containers inside. These are stateless in Leap which means they have a defined life cycle and they do not persist. Each pod has its own unique cluster-wide IP address which changes as the pods are scaled. Typical container-to-container communications between pods on the same host are normally permitted without any additional configuration. For example, the community pod communicating to the proxy pod.</p> <p>Pods have no awareness of the node host ports or IP addresses. Additionally, you cannot directly reach a pod IP address from outside of the cluster. To expose an application that is running in your pods to be reachable from outside your cluster, Kubernetes services and ingress are used. </p> <p>Network Address Translation (NAT): If you cannot permit your firewall to allow the entire pod IP address range, consider deploying a Network Address Translation (NAT). A source NAT can replace the source IP address on a packet. Note that each Kubernetes cloud provider has its own implementation and features for NAT. For an overview, see the Using Source IP topic in the Kubernetes documentation.</p>"},{"location":"kubernetes_helm_deployment.html#additional-topics","title":"Additional Topics","text":"<ul> <li>Preparation This section outlines mandatory and optional tasks that need to be done before installation of the HCL Leap Container and later releases using Helm.</li> <li>Install commads to deploy This topic details install commands that are used to deploy HCL Leap Helm Charts.</li> <li>Uninstall Helm deployment To remove your HCL Leap deployment from your server deployed using Helm, it is recommended that you use Helm uninstall.</li> <li>Update the settings of an existing installation This section describes how to update the configuration of an HCL Leap or later deployment to Kubernetes or OpenShift installed using Helm.</li> <li>Configuring Leap with OIDC This topic describes how to configure an HCL Leap server that was deployed using Helm with an OpenID Connect identity provider.</li> <li>Migrating From WebSphere to Liberty It is possible to migrate from Leap on a WebSphere platform to Leap on Open Liberty.</li> </ul> <p>Parent topic: Deploying Leap</p>"},{"location":"leap_strict_csp.html","title":"Strict CSP","text":"<p>HCL Leap has a limited capability to restrict the rendering of Leap Forms using a \u201cStrict CSP\u201d policy.</p> <p>Strict CSP mode can be enabled using the <code>ibm.nitro.NitroConfig.runtimeCSP</code> configuration parameter. For example:</p> <pre><code>ibm.nitro.NitroConfig.runtimeCSP=script-src 'self' \nhttps://trusted.example.com 'nonce-{nonce}'; object-src 'none'; \nbase-uri 'none'; style-src 'self' https://trusted.example.com \n'nonce-{nonce}';\n</code></pre> <p>The <code>{nonce}</code> token is replaced with a generated, cryptographically strong random nonce when serving up the Leap form\u2019s HTML page. The nonce is applied as an attribute to all <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> tags on the page.</p> <p>When using the Embedding API, the product is not in control of the page and therefore needs to be informed of the nonce value in the <code>data-leap-config</code> attribute so that it can load the product\u2019s scripts in a secure manner. Furthermore, the value of the <code>data-leap-config</code> attribute must be valid JSON syntax. For example:</p> <pre><code>&lt;script\n   src=\"https://leap.example.com/apps/api/leap.js\"  \n   data-leap-config=\"{\n     &amp;quot;cspNonce&amp;quot;: &amp;quot;ABC123DEF456&amp;quot;\n     &amp;quot;launch&amp;quot;: {\n       &amp;quot;appId&amp;quot;: &amp;quot;e9ec1ed3-c12b-4b5c-8f5e-\n7a6ff4800a55&amp;quot;, \n       &amp;quot;formId&amp;quot;: &amp;quot;F_Form1&amp;quot;, \n       &amp;quot;targetId&amp;quot;: &amp;quot;myLeapDiv&amp;quot;\n     }\n   }\"&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"leap_strict_csp.html#section_gb5_qp3_rvb","title":"Limitations","text":"<ul> <li>Strict CSP only covers the rendering of Leap Forms. This includes fill and submit of a new record, and the update of existing records:<ul> <li>As a stand-alone HTML page</li> <li>Embedded within an IFRAME</li> <li>Embedded with the non-IFRAME Embedding API</li> </ul> </li> <li>Strict CSP is not applied to any other runtime pages or scenarios, such as App Pages, View Data, or Summary Charts.</li> <li>Strict CSP is not applied to any aspects of Leap\u2019s authoring environment.</li> <li>When using the Embedding API, if you want a callback function to be called after the form has been launched, it cannot be specified in the <code>data-leap-config</code> attribute. It must be supplied by providing as a parameter to <code>Leap.launch()</code> function.</li> <li>JavaScript (.js) files contained in the application will no longer be evaluated in context, therefore the <code>app</code> variable will not be available. The global <code>NitroApplication</code> variable should be used instead.</li> <li>All existing applications must be redeployed if the <code>ibm.nitro.NitroConfig.runtimeCSP</code> config value contains the <code>{nonce}</code> token.</li> <li>In rare cases, some forms may fail to render when Strict CSP is enabled and JavaScript security is enabled (ie. when <code>ibm.nitro.ApplicationCompilerService.secureJS=false</code> is enabled or unset). This depends on the exact product features being used.</li> <li>Errors regarding inline styles will appear in the browser console, however effort has to been made to ensure there are no noticeable side-effects for end-users, with the following exceptions:<ul> <li>Styles applied to the content of the Text widget might not be preserved - these would be inline-styles and therefore not allowed by the browser in Strict CSP mode.</li> </ul> </li> <li>The Rich Text Entry and Data Grid items will not render with Strict CSP enabled, because of limitations in 3rd-party libraries.</li> </ul>"},{"location":"leap_strict_csp.html#section_zbc_jq3_rvb","title":"Known risks","text":"<ul> <li>As mentioned above, the non-IFRAME Embedding API does not have control of the page, and therefore needs to be informed of the nonce token by the hosting page. The Embedding API will nullify the cspNonce value once the form launch is complete; however, there will be a short period of time where the nonce is available to other scripts running on the page. It is the responsibility of the customer to ensure that this temporary exposure of the nonce cannot be exploited.</li> <li>As mentioned above, Strict CSP only applies to the rendering of Leap Forms. It is the responsibility of the customer to ensure other product pages (ex. App Pages) are not exposed to an audience that is meant to be protected by Strict CSP.</li> <li>Not all browsers may support CSP equally. It is the responsibility of the customer to ensure the CSP header is configured with suitable fallbacks, if necessary for their user-base.</li> </ul> <p>Parent topic: Administering Leap</p>"},{"location":"migrating_websphere_liberty.html","title":"Migrating From WebSphere to Liberty","text":"<p>It is possible to migrate from Leap on a WebSphere platform to Leap on Open Liberty.</p> <p>The most common parts of a Leap deployment are the following:</p> <ul> <li>Database</li> <li>LDAP</li> <li>Mail server</li> </ul> <p>Each of these three parts are external to Leap and will be configured in the deploy-values.yaml file. Since the database contains all the Leap applications, once it is connected to Leap on Open Liberty they will be accessible.</p> <p>Note: Once the database has been connected to the latest version of Leap, it will no longer work for previous versions.</p> <ol> <li> <p>Leap on Open Liberty works best if the login attribute is set to the 'mail' attribute. If your existing WebSphere deployment is using a different login attribute then some additional steps will need to be taken. All of the Leap users are identified by their login id, if the attribute for that login id changes then when a user authenticates with Leap on Open Liberty for the first time (using their mail attribute) they would be seen as a new user and not automatically associated with their previous account. In this case you will need to manually update all the users in the FREEDOM.USERS table (before allowing them to access the system), changing their LOGIN_ID value to the value of their email address.</p> <p>The SQL statement looks like the following:</p> <pre><code>UPDATE FREEDOM.USERS SET LOGIN_ID = '&lt;email of user&gt;' WHERE LOGIN_ID = '&lt;old login attribute&gt;';\n</code></pre> </li> <li> <p>The Open Liberty image and associated Helm charts for Leap are not backward-compatible with any previous versions of Leap. Do not use the same values.yaml file for Helm that you may have used with a previous version of Leap.</p> </li> <li>Customizations applied through the WebSphere Application Server admin console, may need to be reapplied using snippets of XML according to Open Liberty's configuration technique (see Server configuration overview). This additional configuration can be supplied as \"overrides\" in Leap's Helm charts. </li> <li>The persistent volumes defined for use with previous Leap containers are not the same for current Leap containers. When upgrading Leap, create new persistent volumes. For more information, see Prerequisite - Specifying persistant volumes.</li> </ol> <p>Parent topic: Kubernetes Helm deployment</p>"},{"location":"ovr_overview.html","title":"Overview","text":"<p>HCL Leap builds dynamic forms and applications with a web-based interface. From a single interface, you can design a form, define access privileges, create workflow stages, deploy the application, and review submitted results.</p> <p>Leap makes creating forms easier than before by dramatically reducing the time and effort that is required to deliver compelling, interactive applications. The simple web-based user interface allows a web designer to quickly assemble a series of application screens for web forms. You can also capture data into a relational database and orchestrate notifications with an integrated workflow. Data that is captured in Leap is easily integrated into existing line-of-business systems with a drag-and-drop web service interface. When users submit forms, you can view summary charts, inspect collected responses, or export data records to a spreadsheet program for detailed analysis.</p>"},{"location":"ovr_release_notes.html","title":"Leap release notes","text":"<p>These release notes provide a summary of new features, installation information, and descriptions of known limitations, problems, and workarounds.</p> Category Description Link About this release New features What's New System requirements System requirements Leap system requirements Installation, migration, upgrade, and configuration information Installation instructions Deploying Leap Known limitations, problems, and workarounds Troubleshooting, Limitations, problems, and workarounds Troubleshooting Contacting customer support Customer support Leap flashes, alerts, and bulletins"},{"location":"prepare_config_helm.html","title":"Prepare a custom configuration file","text":"<p>Create a configuration file that fits the needs of your target HCL Leap Container deployment. The configuration file is the heart of your deployment using Helm. It defines how HCL Leap is deployed to supported platforms, and how it behaves during runtime operations.</p> <p>This section explains how to create your own configuration file and how to leverage the existing values.yaml inside the Helm Chart. It also explains how to optionally overwrite settings in case the default set may not be sufficient.</p> <p>Note: Modification to any files (chart.yaml, templates) in hcl-leap-deployment-vX.X.X_XXXXXXXX-XXXX.tar.tgz is not supported.</p>"},{"location":"prepare_config_helm.html#section_imf_zh4_hzb","title":"The configuration flow","text":"<p>Helm provides multiple ways to define values that can be processed to run an installation. Processing involves a three-step approach, that is ordered sequentially within a hierarchy.</p>"},{"location":"prepare_config_helm.html#section_mkj_134_hzb","title":"Helm Chart values.yaml","text":"<p>Provided with the Leap installation is a TGZ bundle (hcl-leap-deployment-vX.X.X_XXXXXXXX-XXXX.tar.tgz) which contains the helm chart for Leap.  Within the TGZ bundle is a values.yaml file. Do not modify the values.yaml file inside the helm chart. It defines all configurable parameters that a Helm Chart accepts and the default values that are used during an installation. If you do not provide any other configuration during an installation, Helm extracts all deployment information from the values.yaml file inside the Helm Chart.</p> <p>All parameters that were not overwritten using any other configuration methods return to their default values from the values.yaml file inside the Helm Chart.</p> <p>To preview these default settings, use the <code>helm show values</code> command and specify the TGZ bundle name. For example:</p> <pre><code>helm show values hcl-leap-deployment-vX.X.X_XXXXXXXX-XXXX.tar.tgz\n</code></pre> <p>The output of the command contains the configurable parameters and their default values. </p> <p>Note: Do not decompress the helm chart bundle (file ending in .tar.tgz).</p>"},{"location":"prepare_config_helm.html#section_rmd_d34_hzb","title":"Custom configuration file","text":"<p>When you install Leap using Helm, you will specify a custom values file that overrides the default settings. This file contains important details such as information to connect to the container registry, information about the database, authenticating, etc.  This is referred to as the custom-values.yaml file in the product documentation. You may choose a different file name if desired. </p> <p>When you follow this product documentation, you will be copying values into this custom-values.yaml file.</p> <p>Note: There is no need to have the same complete set of parameters inside your custom values file; they are defined by default in the Helm chart. </p> <p>For details on creating your custom-values.yaml file, see the topic Creating and formatting the custom-values.yaml.</p>"},{"location":"prepare_config_helm.html#section_e5x_h34_hzb","title":"Override parameters","text":"<p>It is possible to define values using a --set parameter in the Helm CLI during the installation of a Helm Chart.</p> <p>Since there are many values that can be configured in the HCL Leap deployment, we do not recommend this technique, since it makes installation commands very large and confusing.</p>"},{"location":"prepare_config_helm.html#additional-topics","title":"Additional Topics","text":"<ul> <li>Creating and formatting the custom-values.yaml </li> </ul> <p>Parent topic: Preparation</p>"},{"location":"ref_application_object.html","title":"Application object","text":"<p>The Leap application object, referenced by using 'app', provides access to information relevant to the whole application.  The object has several built-in functions.</p>"},{"location":"ref_application_object.html#functions","title":"Functions","text":""},{"location":"ref_application_object.html#getapppage","title":"getAppPage","text":"<p>Returns the user interface app page object for the provided appPage id.</p> <p>Syntax <pre><code>app.getAppPage(appPageId)\n</code></pre></p> <p>Parameters</p> Parameter Description appPageId Optional. The id of the app page to retrieve, if not supplied the current app page id is used. <p>Example <pre><code>var myAppPage = app.getAppPage(\"AP_Welcome\");\n</code></pre></p>"},{"location":"ref_application_object.html#getapppageurl","title":"getAppPageURL","text":"<p>Returns the URL for navigating directly to the app page for the provided app page id and application uid.</p> <p>Syntax <pre><code>getAppPageURL(appPageId, appUid)\n</code></pre></p> <p>Parameters </p> Parameter Description appPageId Optional. The id of the app page to retrieve, if not supplied the current app page id is used. appUid Optional. The uid of the app to retrieve, if not supplied the current app uid is used. <p>Example <pre><code>var appPageUrl = app.getAppPageUrl('AP_Welcome', 'e09e7739-2214-4e64-88e3-9f54a47c3fdd');\n</code></pre></p>"},{"location":"ref_application_object.html#getappurl","title":"getAppURL","text":"<p>Returns the URL for navigating directly to the application.</p> <p>Note: The application will load the form or app page defined in the \"Home Page\" field on the Settings tab.</p> <p>Syntax <pre><code>app.getAppURL()\n</code></pre></p> <p>Example <pre><code>var appUrl = app.getAppUrl();\n</code></pre></p>"},{"location":"ref_application_object.html#getchartsurl","title":"getChartsURL","text":"<p>Returns the URL for navigating directly to the charts page of the form for the provided form uid and application uid.</p> <p>Syntax <pre><code>app.getChartsURL(formId, appUid)\n</code></pre></p> <p>Parameters </p> Parameter Description formId Optional. The id of the form to retrieve, if not supplied the current form id is used. appUid Optional. The uid of the app to retrieve, if not supplied the current app uid is used. <p>Example: <pre><code>var url = app.getChartsURL(form.getId(), app.getUID());\n</code></pre></p>"},{"location":"ref_application_object.html#getcurrentuser","title":"getCurrentUser","text":"<p>Deprecated - Use app.getCurrentUserId()</p>"},{"location":"ref_application_object.html#getcurrentuserid","title":"getCurrentUserId","text":"<p>Returns the user's \"identifier\" - the identifying name of the currently logged in user.</p> <p>The identifying name is the property as defined by the ibm.was.MemberManager.userProps.id property that is located in the Leap_config.properties file. For example, uid, cn, mail, displayName.</p> <p>If the user is not authenticated, then the function returns the string \"Anonymous Guest User\".</p> <p>Syntax <pre><code>app.getCurrentUserId()\n</code></pre></p> <p>Example:</p> <p>To populate the current user's login name into a field in the form, place the following statement in the onLoad event of the form: <pre><code>// change F_SingleLine to the ID of the desired field \nBO.F_SingleLine.setValue(app.getCurrentUserId());\n</code></pre></p>"},{"location":"ref_application_object.html#getcurrentuseremail","title":"getCurrentUserEmail","text":"<p>Returns the user's email.</p> <p>Syntax <pre><code>app.getCurrentUserEmail()\n</code></pre></p> <p>Example <pre><code>BO.F_UserEmail.setValue(app.getCurrentUserEmail());\n</code></pre></p>"},{"location":"ref_application_object.html#getcurrentuserdisplayname","title":"getCurrentUserDisplayName","text":"<p>Returns the user's full display name. Ex. \"Eduardo Ram\u00edrez L\u00f3pez\".</p> <p>Syntax <pre><code>app.getCurrentUserDisplayName()\n</code></pre></p> <p>Example <pre><code>BO.F_UserName.setValue(app.getCurrentUserDisplayName());\n</code></pre></p>"},{"location":"ref_application_object.html#getcurrentuserinfo","title":"getCurrentUserInfo","text":"<p>Returns the object containing the attributes of the current user.</p> <p>Syntax <pre><code>app.getCurrentUserInfo()\n</code></pre></p> <p>Example: <pre><code>{\n  id: \"pflorez123\", \n  email: \"Pedro.Flores@example.com\", \n  displayName: \"Pedro Flores\", \n  userType: \"owner\"\n}\n</code></pre> Note: Not all attributes are available in all deployments. In that case, some of the values will be null.</p> <p>userType \u2013 possible values:</p> <ul> <li>\"owner\" \u2013 if current user is the app owner</li> <li>\"guest\" \u2013 if the current user is anonymous</li> <li>\"\" (empty string) \u2013 in all other cases</li> </ul>"},{"location":"ref_application_object.html#getcurrentuserroles","title":"getCurrentUserRoles","text":"<p>Returns a comma-separated list of all the roles for which the current user is a member.</p> <p>Syntax <pre><code>app.getCurrentUserRoles()\n</code></pre></p> <p>Example: <pre><code>item.setValue(app.getCurrentUserRoles());\n</code></pre></p>"},{"location":"ref_application_object.html#getfilebaseurl","title":"getFileBaseURL","text":"<p>Returns the relative URL to the current browser page where all files that are uploaded into the application at design time are stored. This does not include images and CSS files. All files are saved as anonymous resources that can be viewed by anyone. </p> <p>An example url is ../../../../../anon/1/content/9.3.6.33/97eeb588-2fff-49a7-89c1-5000885dafb4/1421171344944-2/desktop/en/en/en/desktop/files/</p> <p>Syntax <pre><code>app.getFileBaseURL()\n</code></pre></p> <p>Example</p> <p>This example demonstrates how to create a link item in a form that refers to a file included in the Leap application.</p> <ol> <li>Attach a file (not image or CSS) to your Leap application. Go to Settings...Files and click the 'Add' button.</li> <li>Add a Link item to the form</li> <li>In the onShow event of the Link item add: <pre><code>item.setLinkValue(app.getFileBaseURL() + \"sampleAttachedFile\");\n</code></pre></li> </ol>"},{"location":"ref_application_object.html#getform","title":"getForm","text":"<p>Returns the user interface form object for the provided formID. If used to return a form that is not shown or loaded, then the object that is returned is not fully operational and should be used for hooking up dynamic event handlers only.</p> <p>Syntax <pre><code>app.getForm(formID)\n</code></pre></p> <p>Parameters </p> Parameter Description formId The id of the form to retrieve. <p>Example: <pre><code>// Register an event listener to a service in order to do something when it returns\nvar form = app.getForm('F_Form1');\nvar service = form.getServiceConfiguration('SC_ServiceConfig0');\nservice.connectEvent('onCallFinished', function(pSuccess)\n{\n  alert('call finished');\n});\n</code></pre></p>"},{"location":"ref_application_object.html#getformlaunchurl","title":"getFormLaunchURL","text":"<p>Returns the URL for navigating directly to the form for the provided application uid and form uid.</p> <p>Syntax <pre><code>app.getFormLaunchURL(formId, appUid)\n</code></pre></p> <p>Parameters </p> Parameter Description formId Optional. The form id, if not specified the current form id is used. appUid Optional. The app uid, if not specified the current app uid is used. <p>Example: <pre><code>var url = app.getFormLaunchURL();\nvar url = app.getFormLaunchURL(form.getId());\nvar url = app.getFormLaunchURL(form.getId(), app.getUID());\n</code></pre></p>"},{"location":"ref_application_object.html#getimagebaseurl","title":"getImageBaseURL","text":"<p>Returns the relative URL to the current browser page where all images that are uploaded into the application at design time are stored. All images are saved as anonymous resources that can be viewed by anyone. </p> <p>An example url is ../../../../../anon/1/content/9.3.6.33/97eeb588-2fff-49a7-89c1-5000885dafb4/1421171344944-2/desktop/en/en/en/desktop/image/</p> <p>Syntax <pre><code>app.getImageBaseURL()\n</code></pre></p> <p>Example</p> <p>This example demonstrates how to create a link item in a form that refers to a file included in the Leap application.</p> <ol> <li>Attach an image file to your Leap application. Go to Settings...Files and click the 'Add' button.</li> <li>Add a Link item to the form</li> <li>In the onShow event of the Link item add: <pre><code>item.setLinkValue(app.getFileBaseURL() + \"sampleAttachedImageFile\");\n</code></pre></li> </ol>"},{"location":"ref_application_object.html#getlocale","title":"getLocale","text":"<p>Returns the current locale of the application, according to the application's settings or the current user's preferences. The returned value is a locale code, in accordance with Tags for the Identification of Languages (RFC 3066).</p> <p>Syntax <pre><code>app.getLocale()\n</code></pre></p>"},{"location":"ref_application_object.html#getlocation","title":"getLocation","text":"<p>Allows the form designer to get the current user's location.</p> <p>Syntax <pre><code>app.getLocation(callbackFunction, highAccuracy)\n</code></pre></p> <p>Parameters </p> Parameter Description callbackFunction the callback that occurs after the location request finishes. highAccuracy Optional. The form id, if not specified the current form id is used. <p>callbackFunction -  The designer must define the function to have one argument which will be assigned a Position object if the location request was successful, or null if the request was unsuccessful. Inside the function the designer can assign location attributes to different fields. Five values can be accessed:</p> <ul> <li>position.coords.latitude</li> <li>position.coords.longitude</li> <li>position.coords.accuracy</li> <li>position.coords.altitude</li> <li>position.coords.altitudeAccuracy</li> </ul> <p>More information at https://developer.mozilla.org/en-US/docs/Web/API/Position/.</p> <p>Example: <pre><code>// Set the value of F_SingleLine1 to the current location\nvar highAccuracy = true;\nvar myCallbackFunction = function (position) {\n  if (position !== null) {\n    BO.F_SingleLine1.setValue(position.coords.latitude+\", \"+position.coords.longitude);\n  } else {\n    alert(\"Location request failed\");\n  }\n};\napp.getLocation(myCallbackFunction,highAccuracy);\n</code></pre></p>"},{"location":"ref_application_object.html#getproductbaseurl","title":"getProductBaseURL","text":"<p>Returns the host and context of the Leap server.</p> <p>Syntax <pre><code>app.getProductBaseURL()\n</code></pre></p> <p>Example: <pre><code>var url = app.getProductBaseURL();\n</code></pre></p>"},{"location":"ref_application_object.html#getrecordurl","title":"getRecordURL","text":"<p>Returns the URL for navigating directly to the record.</p> <p>Syntax <pre><code>app.getRecordURL(recordUid, formId, appUid)\n</code></pre></p> <p>Parameters </p> Parameter Description recordUid The submitted record uid. formId Optional. The form id, if not specified the current form id is used. appUid Optional. The app uid, if not specified the current app uid is used. <p>Example: <pre><code>var url1 = app.getRecordURL('d1f6eb71-9483-479c-8d47-dd30bd7e9de9');\nvar url2 = app.getRecordURL('d1f6eb71-9483-479c-8d47-dd30bd7e9de9', form.getId());\nvar url3 = app.getRecordURL('d1f6eb71-9483-479c-8d47-dd30bd7e9de9', form.getId(), app.getUID());\n</code></pre></p>"},{"location":"ref_application_object.html#getshareddata","title":"getSharedData","text":"<p>Returns a JavaScript\u2122 object that can be easily accessed from all custom JavaScript code on the form, and is the suggested location to share data, or create reusable </p> <p>Syntax <pre><code>functions.app.getSharedData()\n</code></pre></p> <p>Example: <pre><code>// Create a variable\napp.getSharedData().titleToShow = 'Welcome Form';\n\n// Create a function\napp.getSharedData().addTwoValues = function(v1, v2)\n{\n  return v1 + v2;\n};\n\n// Referencing the variable\nBO.F_SingleLine.setValue(app.getSharedData().titleToShow);\n\n// Referencing the function\nBO.F_Number.setValue(app.getSharedData().addTwoValues(5, 5));\n</code></pre></p>"},{"location":"ref_application_object.html#getstylebaseurl","title":"getStyleBaseURL","text":"<p>Returns the relative URL to the current browser page where all CSS style files that are uploaded into the application at design time are stored. All css files are saved as anonymous resources that can be viewed by anyone. </p> <p>An example url is ../../../../../anon/1/content/9.3.6.33/97eeb588-2fff-49a7-89c1-5000885dafb4/1421171344944-2/desktop/en/en/en/desktop/styles/</p> <p>Syntax <pre><code>app.getStyleBaseURL()\n</code></pre></p> <p>Example</p> <p>This example demonstrates how to create a link item in a form that refers to a file included in the Leap application.</p> <ol> <li>Attach a CSS file to your Leap application. Go to Settings...Files and click the 'Add' button.</li> <li>Add a Link item to the form</li> <li>In the onShow event of the Link item add: <pre><code>item.setLinkValue(app.getFileBaseURL() + \"sampleAttachedCSSFile\");\n</code></pre></li> </ol>"},{"location":"ref_application_object.html#getsuppresswarning","title":"getSuppressWarning","text":"<p>Gets the current set value for suppressing the warning. See setSuppressWarning for information.</p> <p>Syntax <pre><code>app.getSuppressWarning()\n</code></pre></p> <p>Example: <pre><code>var suppressWarning = app.getSuppressWarning();\nif(suppressWarning === false)\n  app.setSuppressWarning(true);\n</code></pre></p>"},{"location":"ref_application_object.html#getuid","title":"getUID","text":"<p>The UID of the application</p> <p>Syntax <pre><code>app.getUID();\n</code></pre></p> <p>Example: <pre><code>// Can be stored in a field\nBO.F_AppUid.setValue(app.getUID());\n\n// Can be used to create a link to another form.\npage.F_StaticWebLink.setLinkValue(BO.F_ServerURL.getValue() + \n  '/apps/secure/1/app/' + app.getUID() + \n  '/launch/index.html?form=F_Form2');\n</code></pre></p>"},{"location":"ref_application_object.html#geturlparameter","title":"getUrlParameter","text":"<p>Looks up a single URL query parameter.  If the parameter does not exist then 'undefined' is returned.  If the url parameter is repeated in the URL then all the values will be returned separated by a comma.</p> <pre><code>app.getUrlParameter(parm)\n</code></pre> <p>Parameters</p> Parameter Description parm The name of parameter to retrieve from the url. <p>Example:</p> <ol> <li> <p>Trigger condition if specific url parameter is passed <pre><code>var param = app.getUrlParameter('debug')\nif (param === 'true')\n   alert('Shown only when debug param is present');\n</code></pre></p> </li> <li> <p>Set url parameter values into fields on the form <pre><code>var cityParam = app.getUrlParameter('city')\n\nif (typeof cityParam !== 'undefined')\n   BO.F_City.setValue(cityParam);\n</code></pre></p> </li> </ol> <p>Given the URL 'http://myLeapServer.com/apps/secure/org/app/df102a80-fb5d-450b-8be2-9d3fde5f9b3d/launch/index.html?form=F_Form1&amp;city=Atlantis', 'Atlantis' would be placed into the field.</p> <p>Given the URL 'http://myLeapServer.com/apps/secure/org/app/df102a80-fb5d-450b-8be2-9d3fde5f9b3d/launch/index.html?form=F_Form1&amp;city=Atlantis&amp;city=Rome', 'Atlantis,Rome' would be placed into the field.</p>"},{"location":"ref_application_object.html#geturlparameters","title":"getUrlParameters","text":"<p>Returns an object with all URL parameters.</p> <p>Syntax <pre><code>app.getUrlParameters()\n</code></pre></p> <p>Example: <pre><code>var params = app.getUrlParameters();\nif(params.CustomWarning)\n     alert(params.CustomWarning);\n</code></pre></p>"},{"location":"ref_application_object.html#getviewdataurl","title":"getViewDataURL","text":"<p>Returns the URL for navigating directly to the View Data page.</p> <p>Syntax <pre><code>app.getViewDataURL(appUid)\n</code></pre></p> <p>Parameters</p> Parameter Description appUid The uid of the app, if not specified the current app will be used. <p>Example: <pre><code>var url = app.getViewDataURL();\nvar url = app.getViewDataURL(app.getUID());\n</code></pre></p>"},{"location":"ref_application_object.html#iscurrentuserinrole","title":"isCurrentUserInRole","text":"<p>Returns true if the current user is a member of the provided role, otherwise false.</p> <p>Note: The function does not validate the role with the provided roleName, therefore if the role does not exist false is returned.</p> <p>Syntax <pre><code>app.isCurrentUserInRole (roleName)\n</code></pre></p> <p>Parameters</p> Parameter Description roleName The name of the role to inspect if the current user is a member. <p>Example: <pre><code>if (!app.isCurrentUserInRole(\"Manager\")) {\n  page.F_Instructions.setVisible(false);\n}\n</code></pre></p>"},{"location":"ref_application_object.html#issingleformview","title":"isSingleFormView","text":"<p>Returns true if the form is shown by itself in the browser and false if it is shown in view data.</p> <p>Syntax <pre><code>app.isSingleFormView()\n</code></pre></p> <p>Example <pre><code>if (app.isSingleFormView())\n{\n  // do something\n}\n</code></pre></p>"},{"location":"ref_application_object.html#openapp","title":"openApp","text":"<p>Opens the home page of an application. The current app is used if you do not supply an app id. If <code>newTab</code> is <code>true</code>, the app is presented in a new browser tab. The default behavior is for the application to be opened in a new tab.</p> <p>Syntax <pre><code>app.openApp(appUid, newTab)\n</code></pre></p> <p>Parameters </p> Parameter Description appPageId The title to display in the dialog title bar. appUid The message text to display. newTab Optional. Can be one of \"info\", \"success\", \"warn\", or \"error\" and results in appropriate icon being displayed. If type is absent or not one of these values, then no icon will be displayed. <p>Example: <pre><code>app.openApp('d1f6eb71-9483-479c-8d47-dd30bd7e9de9');\napp.openApp ('d1f6eb71-9483-479c-8d47-dd30bd7e9de9', true);\napp.openApp (app.getUID(), false);\n</code></pre></p>"},{"location":"ref_application_object.html#openapppage","title":"openAppPage","text":"<p>Opens the app page of an application that matches the provided appPageid.</p> <p>Syntax <pre><code>app.openAppPage(appPageId, appUid, newTab)\n</code></pre></p> <p>Parameters</p> Parameter Description appPageId The id of the app page. appUid Optional. The app uid, if not specified the current app uid is used. newTab Optional. True or False.  If true, the app page will be opened in a new browser tab. Default is True. <p>Example: <pre><code>app.openAppPage('AP_Page1');\napp.openAppPage ('AP_Page1', true);\napp.openAppPage ('AP_Page1', 'd1f6eb71-9483-479c-8d47-dd30bd7e9de9', false);\n</code></pre></p>"},{"location":"ref_application_object.html#openform","title":"openForm","text":"<p>Opens the form of an application that matches the provided formId.</p> <p>syntax <pre><code>app.openForm(formId, appUid, newTab)\n</code></pre></p> <p>Parameters</p> Parameter Description formId The id of the form. appUid Optional. The app uid, if not specified the current app uid is used. newTab Optional. True or False.  If true, the form will be opened in a new browser tab. Default is True. <p>Example: <pre><code>app.openForm('F_Form1');\napp.openForm('F_Form1', true);\napp.openForm ('F_Form1', false);\n</code></pre></p>"},{"location":"ref_application_object.html#openrecord","title":"openRecord","text":"<p>Opens the record of a form that matches the provided recordId and formId.</p> <p>Syntax <pre><code>openRecord(recordUid, formId, appUid, newTab)\n</code></pre></p> <p>Parameters</p> Parameter Description recordUid The submitted record uid. formId Optional. The form id, if not specified the current form id is used. appUid Optional. The app uid, if not specified the current app uid is used. newTab Optional. True or False.  If True, the record will be opened in a new browser tab. Default is True. <p>Example: <pre><code>// open in new tab, only supply the record id\napp.openRecord('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');\n\n// open in a new tab, specify record uid and form id\napp.openRecord('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', 'F_Form2');\n\n// open form in a new tab, specify the record uid and app uid\napp.openRecord('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy', true);\n\n// open form in same tab, specify record uid, form id and app uid\napp.openRecord('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', 'F_Form2', 'zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz', false);\n</code></pre></p>"},{"location":"ref_application_object.html#setsuppresswarning","title":"setSuppressWarning","text":"<p>If a user interacts with a form, or JavaScript, they are prompted with a warning message whenever the current browser page tries to navigate to a different URL. This function allows the suppression of that warning. When set to true the message is suppressed until it is set to false again.</p> <p>Syntax <pre><code>app.setSuppressWarning (pSuppress)\n</code></pre></p> <p>Parameters</p> Parameter Description pSuppress True or False. When true, message is suppressed. <p>Example: <pre><code>// Can be used at any scope, for example in the application onStart, form onLoad, onItemChange, etc.\napp.setSuppressWarning(true);\n</code></pre></p>"},{"location":"ref_application_object.html#showmessage","title":"showMessage","text":"<p>Allow usage of a built-in dialog for end-user messages.</p> <p>Syntax <pre><code>app.showMessage(title, message, type, subtitle)\n</code></pre></p> <p>Parameters</p> Parameter Description title The title to display in the dialog title bar. message The message text to display. type Optional. Can be one of \"info\", \"success\", \"warn\", or \"error\" and results in appropriate icon being displayed. If type is absent or not one of these values, then no icon will be displayed. subtitle Optional. Heading text for the message. <p>Example</p> <pre><code>if (BO.F_BookingDate.getValue() &gt; BO.F_EventDate.getValue())\n{\n  app.showMessage (\n  \"Error found in data\",\n  \"The booking date cannot be after the event.\",\n  \"error\",\n  \"Please change the booking or event date, then re-submit.\"\n  );\n}\n</code></pre> <p>Parent topic: Interface objects</p>"},{"location":"ref_customized_css.html","title":"Creating customized Cascading Style Sheets","text":"<p>You can apply your own custom Cascading Style Sheet (CSS) to the rendering of your HCL Leap application. To create a custom theme, you must be familiar with the basic concepts of CSS.</p> <p>Elements are assigned specific class names, prefaced by lf in the custom theme. The following code is an example of a Leap custom theme.</p> <pre><code>/* Form - centered with a drop shadow*/\n.lfMn .lfAppFormArea .lfFormBox {\n   -moz-box-shadow: 5px 5px 12px #AEA4A4;\n   -webkit-box-shadow: 5px 5px 12px #AEA4A4;\n   box-shadow: 5px 5px 12px #AEA4A4;\n   margin-right: auto; \n   margin-left: auto; \n}\n\n\n/* Text (item titles) - medium blue */\n.lfMn .lfFormLabel {\n   color: #094291 !important;\n}\n\n\n/* Section - title bar red background and white text */\n.lfMn .lfFormFieldSectionTitle {\n   background: #cd111f !important;\n   color: white !important;\n   font-size: 13px !important;\n   font-weight: bold !important;\n}\n.lfMn .lfFormFieldSectionTitle .lfFormLabel {\n   color: white !important;\n}\n\n/* Tabs - dark-blue background with white text */\n.lfMn .lfFormFieldTabFolder .lfFormFieldTab {\n   background:#1556a8;\n   border-top-color:#666;\n   border-right-color:#666;\n   border-left-color:#666;\n}\n.lfMn .lfFormFieldTabFolder .lfFormFieldTab * {\n   color: white;\n}\n\n\n/* Tabs (selected) - white background with black text */\n.lfMn .lfFormFieldTabFolder .lfFormFieldTabChecked, \n.lfMn.lotusui .lfFormFieldTabFolder .lfFormFieldTabCheckedHover,\n.lfMn.lotusui .lfFormFieldTabFolder .lfFormFieldTabCheckedError {\n   background: white;\n   border-top-color:#ccc;\n   border-right-color:#ccc;\n   border-left-color:#ccc;\n}\n.lfMn .lfFormFieldTabFolder .lfFormFieldTabChecked * {\n   color: #222 !important;\n}\n\n\n/* Button (Submit) - light blue background */\n.lfMn .lfFormBtn.lfFormActionSubmitBtn {\n   font-size: 12px;\n   background: #93bef3;\n   border: 1px solid #222;\n   font-weight: bold;\n}\n.lfMn .lfFormBtn.lfFormActionSubmitBtn * {\n   font-weight: bold;   \n}\n\n\n/* Button (Page Navigation) - dark blue background with white text*/\n.lfMn .lfPageNavigation .lfFormBtn {\n   background: #1556a8 !important;\n   border: 1px solid #222;\n}\n.lfMn .lfPageNavigation .lfFormBtn *, \n.lfMn .lfPageNavigation .lfFormBtn *\n{\n   color: white !important;\n   font-weight: bold;\n}\n</code></pre>"},{"location":"ref_customized_css.html#class-names","title":"Class Names","text":"<p>View Data layout</p> <p>Class names for the View Data layout are:</p> <ul> <li>.lfAppForm</li> <li>.lfAppFormArea</li> <li>.lfAppMainArea</li> <li>.lfAppOverviewArea</li> <li>.lfBanner</li> <li>.lfFormTitleBar</li> <li>.lfMn.lfAppArea</li> </ul> <p>The following graphic shows where the class names for various parts of the View Data section are located.</p> <p></p> <p>Single form launch layout</p> <p>Class names for the Single form launch layout are:</p> <ul> <li>.lfAppForm</li> <li>.lfAppFormArea</li> <li>.lfAppMainArea</li> <li>.lfBanner</li> <li>.lfFormBody</li> <li>.lfFormBox</li> <li>.lfFormFooter</li> <li>.lfFormTitleBar</li> <li>.lfMn.lfSingleFormArea</li> </ul> <p>The following graphic shows where the class names for various parts of the Single form launch layout are located.</p> <p></p> <p>Form items - general</p> <p>General class names are:</p> <ul> <li>.lfFormField</li> <li>.lfFormFieldError</li> <li>.lfFormFieldHint</li> <li>.lfFormFieldRequiredMarker</li> <li>.lfFormLabel</li> </ul> <p>The following graphic shows where the class names for general form items are located.</p> <p></p> <p>In addition to the general lfFormField class, each form item has a unique class name:</p> <ul> <li>Attachment \u2013 lfFormFieldAttachment</li> <li>Button \u2013 lfFormFieldButton</li> <li>Check box \u2013 lfFormFieldCheckBox</li> <li>Choice Slider - lfFormFieldChoiceSlider</li> <li>Currency \u2013 lfFormFieldCurrency</li> <li>Date \u2013 lfFormFieldDate</li> <li>Drop-down \u2013 lfFormFieldDropDown</li> <li>Email \u2013 lfFormFieldEmail</li> <li>HTML fragment \u2013 lfFormFieldHTML</li> <li>Image \u2013 lfFormFieldImage</li> <li>Line \u2013 lfFormFieldHorizontalLine</li> <li>Media \u2013 lfFormFieldMedia</li> <li>Multi-line entry \u2013 lfFormFieldParagraph</li> <li>Number \u2013 lfFormFieldNumber</li> <li>Numeric Slider - lfFormFieldHorizontalSlider</li> <li>Page navigator \u2013 lfFormFieldPageNavigator</li> <li>Password \u2013 lfFormFieldPassword</li> <li>Text \u2013 lfFormFieldRichText</li> <li>Section \u2013 lfFormFieldSection</li> <li>Select many \u2013 lfFormFieldSelectMany</li> <li>Select one \u2013 lfFormFieldSelectOne</li> <li>Single-line entry \u2013 lfFormFieldSingleLine</li> <li>Survey \u2013 lfFormFieldSurvey</li> <li>Tabbed folder \u2013 lfFormFieldTabFolder</li> <li>Table \u2013 lfFormFieldTable</li> <li>Time \u2013 lfFormFieldTime</li> <li>Time stamp \u2013 lfFormFieldTimestamp</li> <li>Web link \u2013 lfFormFieldStaticWeblink</li> <li>Website \u2013 lfFormFieldWebSiteAddress</li> </ul> <p>Required form items also have an extra lfFormFieldRequired class. The lfFormFieldInvalid class is added to form items that are invalid.</p> <p>Section</p> <p>Class names for Section are:</p> <ul> <li>.lfFormFieldSection</li> <li>.lfFormFieldSectionBody</li> <li>.lfFormFieldSectionTitle</li> </ul> <p>The following graphic shows where the class names used in creating a Section are located.</p> <p></p> <p>Survey</p> <p>Class names for Survey are:</p> <ul> <li>.lfFormFieldSurvey</li> <li>.lfFormFieldSurveyQuestion</li> <li>.lfFormFieldSurveyQuestionText</li> <li>.lfFormFieldSurveyTable</li> <li>.lfFormFieldSurveyTitle</li> <li>.lfFormRequired</li> </ul> <p>The following graphic shows where the class names used in creating a Survey are located.</p> <p></p> <p>Tabbed Folder</p> <p>Class names for Tabbed Folder are:</p> <ul> <li>.lfFormFieldTab</li> <li>.lfFormFieldTabChecked</li> <li>.lfFormFieldTabContent</li> <li>.lfFormFieldTabFolder</li> </ul> <p>The following graphic shows where the class names used in creating a Tabbed Folder are located.</p> <p></p> <p>Buttons</p> <p>Class names for Buttons are:</p> <ul> <li>.lfFormBtn</li> <li>.lfFormActionBtn</li> <li>.lfFormActionCancelBtn</li> <li>.lfFormActionSubmitBtn</li> <li>.lfFormBackBtn</li> <li>.lfFormFieldButton</li> <li>.lfFormNextBtn</li> <li>.lfPageNavigation</li> </ul> <p>The following graphic shows where the class names for creating buttons on a form are located.</p> <p></p> <p>Dialogs</p> <p>Class names for Dialogs are:</p> <ul> <li>.lfDialog</li> <li>.lfDialogContent</li> <li>.lfDialogFooter</li> <li>.lfDialogTitle</li> </ul> <p>The following graphic shows where the class names for creating dialog windows are located.</p> <p></p>"},{"location":"ref_customized_css.html#usage-details","title":"Usage details","text":"<p>Your custom CSS is the last style sheet that is applied in an application. However, you must ensure that your CSS rules are more specific (higher weighted) than the ones already specified in the base CSS rules.</p> <ul> <li>In some cases, you must append the !important declaration to your rules to override the Leap base rules. For example, to change the font color of all item titles use <code>.lfMn .lfFormLabel {color: #094291 !important}</code>.</li> <li>In some cases you must add the universal, \u201c*\u201d, selector to your rules. For example, to change the font color of all buttons use <code>.lfMn .lfFormBtn * {color: white}</code></li> </ul> <p>To reference image files that are contained within the same application, use a relative URL of ../image/.... For example, to reference the image named background.jpg contained within your application, use <code>url('../image/background.jpg')</code>. For more information about referencing image files within an application, see Managing the files associated with your application</p> <p>Note: Pop-up menus and dialogs are direct childs of the main body, even when they appear to be otherwise. These child menus and dialogs must be styled to match the main body.</p>"},{"location":"ref_customized_css.html#best-practices","title":"Best Practices","text":"<p>There are no technical limitations to the CSS rules that can be applied to a form; however there are the following best practices:</p> <ul> <li>All CSS rules must begin with the .lfMn class selector. This is important for forms that might be shown within the context of another web page, such as in the IBM\u00ae WebSphere\u00ae Portal environment.</li> <li>Base your CSS rules around class names that are prefixed with \u201clf\u201d. For example: lfFormFieldSingleLine. These class names that are likely to remain consistent between Leap releases.</li> <li>Your custom styles are not restricted, so you must be specific with your selectors. Selectors that are too broad affect all aspects of theLeap interface, including all dialogs and all elements within the View Data interface.</li> <li>Your CSS must target the browsers that are supported by Leap.</li> <li>If possible, avoid CSS rules that affect the size and positioning of elements. You might want to specify some custom padding and margins, but it is your responsibility to ensure that no erroneous cropping or extra scroll-bars are displayed. We recommend that you limit your theme to the following properties:<ul> <li>background color</li> <li>background image \u2013 typically for background gradients</li> <li>color</li> <li>font</li> <li>font size</li> <li>border \u2013 typically none or one pixel width</li> </ul> </li> </ul>"},{"location":"ref_customized_css.html#styling-individual-form-items","title":"Styling individual form items","text":"<p>Each item on the form is assigned a unique class name. The syntax for this class name is <code>&lt;form id&gt;-&lt;page id&gt;-&lt;item id&gt;</code>. For example, a class name of <code>F_Form1-P_Page1-F_EmailAddress</code> is applied to the item with an ID of F_EmailAddress, on the page with an ID of P_Page1, on the form with an ID of F_Form1. You can use these unique class names to style specific items in your application.</p> <p>Note: It is possible that two separate applications each have an item with the same unique class name.</p>"},{"location":"ref_customized_css.html#using-custom-css-class-names","title":"Using custom CSS class names","text":"<p>You can assign a custom CSS class name to any form, page, item, or stage action button in your application. You can then use the custom CSS class names in your custom theme. Setting custom CSS class names is done in the Properties side panel. Specify the custom class names, which are separated by spaces, in the Custom CSS class names field. Custom class names can also be added to, or removed from, items dynamically with the JavaScript\u2122 API.</p>"},{"location":"ref_customized_css.html#testing-your-custom-css-changes","title":"Testing your custom CSS changes","text":"<p>Use a CSS development tool to test your custom CSS changes. Most web browsers contain such a tool, which you can use to discover the wanted styling class. You can even make CSS rule modifications online, so you immediately see how a change affects the form visually. After the rules are determined, copy them to your custom CSS file for uploading into your Leap application.</p> <p>If you do not have access to a CSS development tool, an alternative approach is to place the CSS file on a web server. Reference the web location when you add the CSS file to your Leap application. You can modify the CSS file on the web server, then refresh the Leap application to pick up the changes. This approach quickly tests style changes without requiring you to repeatedly upload a new CSS file into your application, save the application, and then redeploy.</p> <p>Parent topic: Reference</p>"},{"location":"ref_data_access_rest_api.html","title":"Data access REST API","text":"<p>The data access REST API exposes operations on application submitted data, also known as records.</p> <p>The data captured by an HCL Leap application is stored in a relational database. Leap provides secure access to that data through the View Data function, which allows filters and searches, and also allows data to be exported for analysis and reports. When accessing the data using the API, all security permissions as defined in the Access rules for the application are enforced.</p> <p>All examples in this documentation use the program curl, which is available on most Linux\u2122 systems, and can be downloaded for Windows\u2122. However, you can use any tool or library for calling the REST API. For example, the Poster add-on for FireFox is useful for experimenting with the REST API.</p> <p>To get the Swagger definition for the entire Data Access REST API, use /apps-basic/anon|secure/org/data/swagger.json. To get the Swagger definition for a given application and form, use /apps-basic/anon|secure/org/data/{app_uid}/{form_id}/swagger.json.</p> URL HTTP Verb Header Action Name /apps-basic/secure|anon/org/data/{app-uid}/{form-id} GET List /apps-basic/secure|anon/org/data/{app-uid}/{form-id}/{record-uid} GET Retrieve /apps-basic/secure|anon/org/data/{app-uid}/{form-id}?freedomIdentifyKey={x} POST Create /apps-basic/secure|anon/org/data/{app-uid}/{form-id}/{record-uid}?freedomIdentifyKey={x} PUT Update /apps-basic/secure|anon/org/data/{app-uid}/{form-id}/{record-uid}?freedomIdentifyKey={x} DELETE Delete /apps-basic/secure|anon/org/data/{app-uid}/{form-id}/metadata GET Metadata /apps-basic/secure|anon/org/data/{app-uid}/{form-id}/attachment/{attachment-uid} GET Retrieve Attachment /apps-basic/secure|anon/org/data/{app-uid}/{form-id}/attachment/ POST Create Attachment <ul> <li>app-uid: is the UID of the application</li> <li>form-id: is the ID of the form</li> <li>record-uid: is the UID of the record</li> <li>attachment-uid: is the UID of the attachment</li> <li> <p>x: is a randomly generated, difficult to guess single-use numerical value</p> </li> <li> <p>The context for the REST API (/apps-basic/) is different from accessing Leap in the browser (/apps/).</p> </li> <li>The /apps-basic/ context uses basic authentication rather than form-based authentication.</li> <li>The credentials used for authentication must match the users and permissions specified by the application designer in the Access tab. Each form and stage can have different permissions set for each REST API action.</li> <li>Use /anon if your applications allow anonymous access.</li> </ul> <p>All dates, times, and timestamps must be listed in ISO 8601 format.</p> <ul> <li>List This action retrieves a list of records.</li> <li>Retrieve This action retrieves a single record.</li> <li>Create This action creates new records.</li> <li>Update This action updates an existing record.</li> <li>Delete This action deletes an existing record.</li> <li>Metadata This JSON-only action retrieves a description of the items in your form.</li> <li>Retrieve Attachment This action retrieves a single attachment.</li> <li>Create Attachment This action creates a single attachment.</li> </ul> <p>Parent topic: REST API reference</p>"},{"location":"ref_data_rest_api_create.html","title":"Create","text":"<p>This action creates new records.</p> <p>Note: The curl command must be entered as a single line.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; --header \"Accept:application/atom+xml\" --header \"Content-Type:application/atom+xml\" --data-binary\n     @post.xml \"http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1\n     ?freedomIdentifyKey=x\" --header \"Cookie: freedomIdentifyKey=x\"\n</code></pre> <p>Content-Type</p> <p>Indicates the type of document submitted:</p> <ul> <li>ATOM Feed: application/atom+xml</li> <li>JSON: application/json</li> </ul> <p>Accept</p> <p>Indicates the type of accepted response.</p> <ul> <li>ATOM Feed: application/atom+xml</li> <li>JSON: application/json</li> </ul> <p>--data-binary</p> <p>Provides the actual data that is POSTed to the URL. In this case, it is a file on the local system, post.xml, that contains the data to send.</p> <p>--header \"Cookie: freedomIdentifyKey=x\"</p> <p>Includes a required cookie as part of the request where x is a randomly generated, difficult to guess single-use numerical value. The value of the key must match the value of the freedomIdentifyKey URL parameter. Requiring a cookie value that matches the URL parameter helps avoid possible browser vulnerabilities.</p>"},{"location":"ref_data_rest_api_create.html#section_ng4_v3l_nzb","title":"ATOM Feed","text":"<p>One type of data to POST when doing a creation is a full ATOM Feed. The data starts with a  element and contains one or more <code>&lt;entry&gt;</code> elements. Each <code>&lt;entry&gt;</code> element represents a single record to add to the application. <pre><code>&lt;feed xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n&lt;entry&gt;\n   &lt;title type=\"text\"&gt;F_Form1&lt;/title&gt;\n   &lt;updated&gt;1970-01-01T00:00:00Z&lt;/updated&gt;\n   &lt;content type=\"application/xml\"&gt;\n      &lt;F_Form1 xmlns=\"\" form_id=\"2b2c2b58-520a-45c3-8438-8bbaa2f9aaa9\" pressedButton=\"S_Submit\" flowState=\"ST_Start\"&gt;\n         &lt;F_Amount&gt;19.25&lt;/F_Amount&gt;\n         &lt;F_Name&gt;Brad Walker&lt;/F_Name&gt;\n         &lt;F_Age&gt;40&lt;/F_Age&gt;\n      &lt;/F_Form1&gt;\n   &lt;/content&gt;\n&lt;/entry&gt;\n&lt;entry&gt;\n    ...\n&lt;/entry&gt;\n...\n&lt;/feed&gt;\n</code></pre> <p>It is also possible to POST a single stand alone  element such as:  <pre><code>&lt;entry xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n   &lt;title type=\"text\"&gt;F_Form1&lt;/title&gt;\n   &lt;updated&gt;1970-01-01T00:00:00Z&lt;/updated&gt;\n   &lt;content type=\"application/xml\"&gt;\n      &lt;F_Form1 xmlns=\"\" pressedButton=\"S_Submit\" flowState=\"ST_Start\"&gt;\n         &lt;F_Amount&gt;19.25&lt;/F_Amount&gt;\n         &lt;F_Name&gt;Brad Walker&lt;/F_Name&gt;\n         &lt;F_Age&gt;40&lt;/F_Age&gt;\n      &lt;/F_Form1&gt;\n   &lt;/content&gt;\n&lt;/entry&gt;\n</code></pre> <p><code>&lt;title&gt;</code></p> <p>The ID of the form to which this record is being submitted.</p> <p><code>&lt;updated&gt;</code></p> <p>Mandatory, but its value is replaced with a new timestamp by the server. A value of 1970-01-01T00:00:00Z can always be used.</p> <p><code>&lt;content&gt;</code></p> <p>Contains the submitted data. The structure of the data within the  element is different for each application, and is based on the list of form items that were used to create the application. The easiest way to find the complete list of elements is to issue a Retrieve REST call and look at the resulting data. <p>Note: The root element of the submitted data, which in this example is the <code>&lt;F_Form1&gt;</code> element, must be in the null namespace, which is <code>xmlns=\"\"</code> </p> <p>The root element must have the pressedButton and flowState attributes.</p> <ul> <li>The flowState is the ID of the current stage of the record. For all Create REST calls, this is always ST_Start, which is the ID of the Start stage.</li> <li>The pressedButton indicates the ID of the stage action submit button, which simulates the submission. A submit button ID must be specified to activate the appropriate stage activities and transfer the record to the next appropriate stage.</li> </ul> <p>Upon creation, the new record is assigned a generated unique record UID. This UID can be found in the response data, which is similar to the data returned from a Retrieve action. Response data is only returned when a stand alone <code>&lt;entry&gt;</code> is POSTed rather than multiple entries in a <code>&lt;feed&gt;</code>.</p>"},{"location":"ref_data_rest_api_create.html#section_y4x_w3l_nzb","title":"JSON","text":"<p>You can also POST a JSON payload, for example:</p> <pre><code>{\n   \"uid\": \"324007a4-a04f-4649-8d22-e6c764313f1f\",\n   \"pressedButton\" : \"S_Submit\",\n   \"flowState\": \"ST_Start\",\n   \"F_SingleLine1\": \"Jane\",\n   \"F_SingleLine2\": \"Test\",\n   \"F_Number1\": 24.25\n}\n</code></pre> <p>Note: The uid is optional. If supplied, it must be unique and use the format displayed in the JSON example. If not supplied, a unique uid is generated.</p> <p>Parent topic: Data access REST API</p>"},{"location":"ref_data_rest_api_create_attachment.html","title":"Create Attachment","text":"<p>This action creates a single attachment.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; -F filename=@c:\\new file.doc --header \"Accept:application/json\" \"http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/attachment/\"\n</code></pre> <p>Accept</p> <p>Indicates the type of accepted response.</p> <ul> <li>ATOM: application/atom+xml</li> <li>JSON: application/json</li> </ul> <p>The attachment that is created must be uploaded to the server as <code>multipart/form-data</code> in the body of a POST.</p> <p>The response from this call contains the UID, ID, and filename of the newly created attachment.</p> <p>For example: <pre><code>{\"id\": 178, \"fileName\": \"new file.doc\", \"uid\": \"ccb92c12-d435-4288-baff-878d8d3c2923\" }\n</code></pre></p> <p>The UID value that is returned here can be later used with the Retrieve Attachment REST operation.</p> <p>For the attachment to be associated with a form record, a form record must be created or updated that refers to that attachment. Use the Data access REST API, passing the UID, ID, and filename of the attachment.</p> <p>Example JSON payload:</p> <pre><code>{\n    \"pressedButton\":\"S_Submit\",\n    \"F_SingleLine1\" : \"22\",\n    \"F_Number2\" : 1,\n    \"F_Number3\" : 2,\n    \"F_Number4\" : 3,\n    \"F_Attachment1\" :\n    {\n        \"uid\" : \"ccb92c12-d435-4288-baff-878d8d3c2923\",\n        \"fileName\" : \"new file.doc\",\n        \"id\" : 178\n    }\n}\n</code></pre> <p>If an attachment is not associated with a form record within a certain time period (48 hours by default), the attachment is deleted automatically. Deleting the record that is associated with an attachment also deletes the attachment.</p> <p>Parent topic: Data access REST API</p>"},{"location":"ref_data_rest_api_delete.html","title":"Delete","text":"<p>This action deletes an existing record.</p> <p>Note: The curl command must be entered as a single line.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; --request DELETE http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/\ndd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/f82e576f-cb67-4008-8219-f49a1b369f7d?freedomIdentifyKey=1 \n--header \"Cookie: freedomIdentifyKey=1\"\n</code></pre> <p>--request DELETE</p> <p>Specifies the correct HTTP method verb for this action.</p> <p>--header \"Cookie: freedomIdentifyKey=1\"</p> <p>Includes a required cookie as part of the request. The value of the key must match the value of the freedomIdentifyKey URL parameter. Requiring a cookie value that matches the URL parameter value avoids XSS vulnerabilities.</p> <p>Parent topic: Data access REST API</p>"},{"location":"ref_data_rest_api_list.html","title":"List","text":"<p>This action retrieves a list of records.</p> <p>Note: The curl command must be entered as a single line.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/\n     F_Form1?format=application%2Fatom%2Bxml&amp;sortBy=lastUpdated&amp;order=DESC&amp;from=10&amp;to=20\n</code></pre> <p>format or Accept header</p> <p>The format in which the data must be returned. You can use either format or Accept header.</p> <ul> <li>application/atom+xml returns data as a standard ATOM feed in XML format. This is the default value. Note: When using the format parameter, you must encode the value. For example, application/atom+xml must be inserted into the curl command as application%2Fatom%2Bxml</li> <li>application/x-msexcel returns data as an Excel document</li> <li>application/vnd.oasis.opendocument.spreadsheet returns data as an OpenDocument spreadsheet</li> <li>application/json returns data in JavaScript\u2122 Object Notation format</li> </ul> <p>sortBy</p> <p>The order in which the data must be returned. The default sort order is indeterminate.</p> <ul> <li>lastUpdated uses the last updated date as the sort attribute.</li> <li>itemAuthor uses the display name of the author as the sort attribute.</li> <li>flowState uses the stage name as the sort attribute.</li> <li>&lt;item ID&gt; uses the values of a particular form item, for example, F_SingleLine, as the sort attribute. Several widgets cannot be used as the sort attribute due to their storage representation in the database. This includes the Multi-Line Entry, Select Many, Table, and Attachment widgets.</li> </ul> <p>order</p> <p>The direction of the sort.</p> <ul> <li>ASC uses an ascending sort order. This is the default value.</li> <li>DESC uses a descending sort order.</li> </ul> <p>from</p> <p>The starting offset of a range of results. The default value is 0.</p> <p>to</p> <p>The ending offset of a range of results. The default value is the end of the list. If you set a value for to, the result is not inclusive of the to value. For example, there are 100 submitted records. You want to view the results 5 per page. You set the from value to 6, and the to value to 11. Records 6 - 10 are displayed.</p> <p>metadata</p> <p>Set to true to display extra information about items in the form.  This parameter is only valid for JSON.</p> <p>The result of this request is a list of records. An example result represented as an ATOM feed:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;feed xmlns=\"http://www.w3.org/2005/Atom\" xml:base=\"http://&lt;host&gt;:&lt;port&gt;/apps-basic/landing/1/app/\n        dd34da19-15c4-4267-8f1e-9f12ece743d7/viewdata/index.html\"&gt;\n   &lt;id&gt;http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1&lt;/id&gt;\n   &lt;title type=\"text\"&gt;Collection of Form 1&lt;/title&gt;\n   &lt;updated&gt;2011-11-22T19:37:09.060Z&lt;/updated&gt;\n   &lt;count xmlns=\"\"&gt;-1&lt;/count&gt;\n   &lt;author&gt;\n      &lt;name&gt;Freedom&lt;/name&gt;\n   &lt;/author&gt;\n   &lt;link href=\"http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1\" rel=\"self\"/&gt;\n   &lt;entry xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n      &lt;id&gt;f82e576f-cb67-4008-8219-f49a1b369f7d&lt;/id&gt;\n      &lt;title type=\"text\"&gt;F_Form1&lt;/title&gt;\n      &lt;updated&gt;2011-11-22T19:36:31.000Z&lt;/updated&gt;\n      &lt;author&gt;\n         &lt;name&gt;Mike Smith&lt;/name&gt;\n         &lt;email&gt;msmith@mycompany.com&lt;/email&gt;\n         &lt;login xmlns=\"http://www.ibm.com/xmlns/prod/forms/extension/1.0\"&gt;msmith@mycompany.com&lt;/login&gt;\n      &lt;/author&gt;\n      &lt;contributor&gt;\n         &lt;name&gt;Brenda Jones&lt;/name&gt;\n         &lt;email&gt;bjones@mycompany.com&lt;/email&gt;\n         &lt;login xmlns=\"http://www.ibm.com/xmlns/prod/forms/extension/1.0\"&gt;bjones@mycompany.com&lt;/login&gt;\n      &lt;/contributor&gt;\n      &lt;content type=\"application/xml\"&gt;\n         &lt;F_Form1 xmlns=\"\" application_uid=\"dd34da19-15c4-4267-8f1e-9f12ece743d7\" draft_ownerid=\"\" \n                flowState=\"ST_NewStageName\" id=\"0\" uid=\"f82e576f-cb67-4008-8219-f49a1b369f7d\"&gt;\n            &lt;F_Amount&gt;30.45&lt;/F_Amount&gt;\n            &lt;F_Name&gt;Brenda&lt;/F_Name&gt;\n            &lt;F_Age&gt;39.0000&lt;/F_Age&gt;\n         &lt;/F_Form1&gt;\n      &lt;/content&gt;\n      &lt;link href=\"../../../../../secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/\n          f82e576f-cb67-4008-8219-f49a1b369f7d\" rel=\"edit\"/&gt;\n      &lt;link href=\"../../../../../secure/1/app/dd34da19-15c4-4267-8f1e-9f12ece743d7/print/index.html?form=\n          F_Form1&amp;amp;id=f82e576f-cb67-4008-8219-f49a1b369f7d\" rel=\"print\"/&gt;\n      &lt;link href=\"../launch/index.html?form=F_Form1&amp;amp;id=f82e576f-cb67-4008-8219-f49a1b369f7d\" rel=\"form\"/&gt;\n   &lt;/entry&gt;\n   &lt;entry xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n      &lt;id&gt;9c1f4a5b-c6b2-482d-874f-804c44bdd91e&lt;/id&gt;\n      ...\n   &lt;/entry&gt;\n   &lt;entry xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n      &lt;id&gt;86352d79-b52e-48e6-84a2-24174d9d5481&lt;/id&gt;\n      ...\n   &lt;/entry&gt;\n   ...\n&lt;/feed&gt;\n</code></pre> <p>It is important to note:</p> <ul> <li>Each submission record is represented by an <code>&lt;entry&gt;</code> within the feed.</li> <li>Each entry has an <code>&lt;author&gt;</code> that represents the person who initially created the record.</li> <li>Each entry has a <code>&lt;contributor&gt;</code> that represents the person who last updated the record.</li> <li>Each entry has a <code>&lt;link&gt;</code> with <code>rel=\"edit\"</code> that represents the URL to use to Retrieve and Update just this record.</li> <li>Each entry has a <code>&lt;link&gt;</code> with <code>rel=\"print\"</code> that represents the URL that, when displayed in a browser, is the print version of the record.</li> <li>Each entry has a <code>&lt;link&gt;</code> with <code>rel=\"form\"</code> that represents the URL that, when displayed in a browser, allows the editing of this record.</li> <li>Each entry has a <code>&lt;content&gt;</code> that contains the actual data for this record.</li> <li>The root element of the actual data, which in this example is <code>&lt;F_Form1&gt;</code>, has a generated uid attribute. This attribute is the unique ID for the record and can be used for subsequent calls to Retrieve, Update, or Delete for that particular record.</li> </ul> <p>An example result represented as a JSON feed:</p> <pre><code>{\n    \"metadata\": {\n        \"fields\": [{\n            \"name\": \"F_SingleLine1\",\n            \"uiType\": \"textField\",\n            \"dataType\": \"string\",\n            \"label\": \"First Name\"\n        },\n        {\n            \"name\": \"F_SingleLine2\",\n            \"uiType\": \"textField\",\n            \"dataType\": \"string\",\n            \"label\": \"Last Name\"\n        },\n        {\n            \"name\": \"F_Number1\",\n            \"uiType\": \"number\",\n            \"dataType\": \"decimal\",\n            \"label\": \"Hours worked\",\n            \"decimalPlaces\": 2\n        }]\n    },\n    \"items\": [{\n        \"lastModified\": \"2013-11-22T19:37:09.060Z\",\n        \"lastModifiedBy\" : {             \n            \"displayName\" : \"Demo User 1\",\n            \"email\" : \"demo_user1@yourcompany.com\",\n            \"login\" : \"demo_user1\"           \n        },\n        \"created\": \"2013-11-22T19:37:09.060Z\",\n        \"createdBy\": {\n            \"displayName\": \"Demo User 2\",\n            \"email\": \"demo_user2@yourcompany.com\",\n            \"login\" : \"demo_user2\" \n        },\n        \"flowState\": \"ST_End\",\n        \"id\": 0,\n        \"uid\": \"8cca2f81-207c-4780-875f-ee1c2bee4df1\",\n        \"F_SingleLine1\": \"Joe\",\n        \"F_SingleLine2\": \"Test\",\n        \"F_Number1\": 24.25\n    },\n    {\n        \"lastModified\": \"2013-11-22T19:37:09.060Z\",\n        \"lastModifiedBy\" : {    \n            \"displayName\" : \"Demo User 1\",\n            \"email\" : \"demo_user1@yourcompany.com\", \n            \"login\" : \"demo_user1\"\n            },\n        \"created\": \"2013-11-22T19:37:09.060Z\",\n        \"createdBy\": {\n            \"displayName\": \"Demo User 2\",\n            \"email\": \"demo_user2@yourcompany.com\",\n            \"login\" : \"demo_user2\" \n        },\n        \"flowState\": \"ST_End\",\n        \"id\": 1,\n        \"uid\": \"324007a4-a04f-4649-8d22-e6c764313f1f\",\n        \"F_SingleLine1\": \"Jane\",\n        \"F_SingleLine2\": \"Test\",\n        \"F_Number1\": 25.75\n    }]\n}\n</code></pre> <p>The following information describes how to filter Data REST API results.  Filtering Data REST API results </p> <p>Parent topic: Data access REST API</p>"},{"location":"ref_data_rest_api_list_filter.html","title":"Filtering Data REST API results","text":"<p>The following information describes how to filter Data REST API results.</p> <p>You can filter the results of the List action by providing extra URL parameters. For example:</p> <pre><code>/apps-basic/secure/org/data/{app-uid}/{form-id}?F_Amount__lt=1000\n</code></pre> <p>This sample query would limit results to records whose F_Amount currency field value is less than 1000. The syntax of a single filter parameter is <code>{element}__{operator}={value}</code>, where <code>{element}</code> is the ID of an item in the form, or one of the record metadata properties. For example, the author_name is used to filter by the name of the initial submitter of a record.</p> <p>Note: All filter parameters must be properly URL encoded. Common encoding characters are described as follows:</p> <ul> <li>%3A - a colon</li> <li>%20 - a space</li> <li>%2B - the plus sign (+)</li> </ul> <p>For example, the colon in a time value of \u201c09:40\u201d would need to be encoded as %3A resulting in an encoded value of 09%3A40.</p> <p>Two simple examples of single filter parameters are:</p> <p>F_Age__equals=5</p> <p>author_name__equals=James%20Smith</p>"},{"location":"ref_data_rest_api_list_filter.html#multiple-filters","title":"Multiple Filters","text":"<p>Multiple filter parameters can be included in a single URL along with a searchOperator parameter.</p> <p>OR In an OR relationship, any one of the filters is true.</p> <pre><code>?{element1}__{operator1}={value1}&amp;{element2}__{operator2}={value2}&amp;searchOperator=OR\n</code></pre> <p>AND In an AND relationship, all of the filters must be true.</p> <pre><code>?{element1}__{operator1}={value1}&amp;{element2}__{operator2}={value2}&amp;searchOperator=AND\n</code></pre> <p>Note: Only a single searchOperator parameter is supported in a request. You cannot use both AND and OR in a single request. If no searchOperator parameter is present, the default is AND.</p>"},{"location":"ref_data_rest_api_list_filter.html#metadata-properties","title":"Metadata properties","text":"<p>Each record can use the following properties for filtering.</p> <p>Table 1. Metadata filtering properties</p> Element Operator Type Description author_name See the table of String Operators The name of the user that initially created the record. updater_name See the table of String Operators The name of the user that last updated the record. creation_time See the table of Time Stamp Operators The time stamp of when the record was initially created. updated See the table of Time Stamp Operators The time stamp of when the record was last updated flow_state See the table of Stage Operators The ID of the stage that the record is in. For example, \u201cST_End\u201d"},{"location":"ref_data_rest_api_list_filter.html#string-operators","title":"String Operators","text":"<p>String operators are used on the values of the following form items: Single-Line Entry, Multi-Line Entry, Email, Drop Down, Select One, Select Many, Survey question, Choice Slider, and Website. String operators are also used on the following metadata properties: author_nameand updater_name.</p> <p>Table 2. String operators</p> Operator Description equals The value of the element is tested for equality against the specified value. startswith Checks to see whether the value of the element starts with the specified value. endswith Checks to see whether the value of the element ends with the specified value. contains Checks to see whether the value of the element contains the specified value."},{"location":"ref_data_rest_api_list_filter.html#number-operators","title":"Number operators","text":"<p>Number operators are used on the values of the following form items: Number, Currency, and Numeric Slider.</p> <p>Table 3. Number operators</p> Operator Description equals The value of the element is tested for equality against the specified value. notequals The value of the element is tested for non-equality against the specified value. gt Checks to see whether the value of the element is greater than the specified value. lt Checks to see whether the value of the element is less than the specified value. gte Checks to see whether the value of the element is greater than or equal to the specified value. lte Checks to see whether the value of the element is less than or equal to the specified value."},{"location":"ref_data_rest_api_list_filter.html#boolean-operator","title":"Boolean operator","text":"<p>This operator is only used on the value of the Checkbox form item.</p> <p>Table 4. Boolean operator</p> Operator Description equals The value of the element is tested for equality against the specified value. Valid values to compare against are true and false."},{"location":"ref_data_rest_api_list_filter.html#time-date-and-time-stamp-operators","title":"Time, Date, and Time Stamp operators","text":"<ul> <li>Time values are valid against Time form items only.</li> <li>Date values are valid against Date form items only.</li> <li>Time stamp values are valid against Time Stamp form items, or the creation_time and updated metadata properties.</li> <li> <p>Time, date, and time stamp values must be provided in ISO 8601 extended format. For example, a time stamp for 21 Dec 2015 10:00 AM Pacific Standard Time must be given as: 2015-12-21T10:00:00-08:00 or 2015-12-21T18:00:00Z.</p> <p>Note: Remember to take daylight savings into account based on the time zone and the date of a time stamp value. For example, 21 June 2015 10:00 AM Pacific Daylight Time must be given as 2015-06-21T10:00:00-07:00 or 2015-06-21T17:00:00Z</p> </li> <li> <p>Dates must be passed in the format yyyy-mm-dd</p> </li> <li>Times must be passed in the format hhss</li> <li>Remember that all values must be properly URL encoded. For example, a value of <code>2015-06-21T17:00:00Z+8:00</code> must be encoded as <code>2015-06-21T17%3A00%3A00%2B8%3A00</code>.</li> </ul> <p>Table 5. Time, Date, and Time Stamp operators</p> Operator Description  after   Filters so that the results provided come after the specified time and date.   before   Filters so that the results provided come before the specified time and date.   between   Filters so that the results provided fit on or within the specified times and dates. The between operator takes a value in the following format: <code>{start moment}A*N*D{end moment}</code>  For example, to search between the start of day 1 June 2015 and the start of day 8 June 2015 (in Pacific Daylight Time) the value is: <code>2015-06-01T07:00:01Z&gt;A*N*D2015-06-08T07:00:01Z</code>"},{"location":"ref_data_rest_api_list_filter.html#additional-date-and-time-stamp-operators","title":"Additional Date and Time Stamp operators","text":"<p>To adjust for different time zones, use the tzOffset URL parameter. The value is the number of seconds of offset from Coordinated Universal Time. For example, for Pacific Standard Time use tzOffset=-28000</p> <p>Table 6. Additional Date and Time Stamp operators</p> Operator Description year Filters the results so that the year matches the specified numerical value. month Filters the results so that the month matches the specified numerical value. The value must use the numbers 1-12, where 1 is January and 12 is December. day Filters the results so that the day matches the specified numerical value. The value must use the numbers 1-31, where each numeral matches a day of the month."},{"location":"ref_data_rest_api_list_filter.html#stage-id-operators","title":"Stage ID operators","text":"<p>Stage operators are used with the value of the flow_state metadata property.</p> <p>Table 7. Stage ID operators</p> Operator Description equals The value of the flow_state is tested for equality against the specified value. notequals The value of the flow_state is tested for non-equality against the specified value."},{"location":"ref_data_rest_api_list_filter.html#examples","title":"Examples","text":"<p>The following parameters are examples of filtering. Each example contains the search parameter and a description of the returned result.</p> <p>This filter returns the first 20 records where the value of the F_Number field is greater than or equal to 5.</p> <pre><code>?F_Number__gte=5&amp;to=20\n</code></pre> <p>This filter returns the first 30 records of where the record was last updated between the start of day June 1, 2015 and the start of day Aug 31, 2015, China Standard Time.</p> <pre><code>?updated__between=2015-06-01T00%3A00%3A01%2B8%3A00A*N*D2015-08-31T00%3A00%3A01%2B8%3A00&amp;to=30\n</code></pre> <p>This filter returns first five records where the value of the F_Currency field is less than 1000 AND the value of the F_Number field is greater than 10.</p> <pre><code>?F_Currency__lt=1000&amp;F_Number__gt=10&amp;searchOperator=AND&amp;to=5\n</code></pre> <p>This filter returns the first 20 records where the value of the F_Number field is less than 5 OR greater than 10.</p> <pre><code>?F_Number__lt=5&amp;F_Number__gt=10&amp;searchOperator=OR&amp;to=20\n</code></pre> <p>Parent topic: List</p>"},{"location":"ref_data_rest_api_metadata.html","title":"Metadata","text":"<p>This JSON-only action retrieves a description of the items in your form.</p> <p>Note: The curl command must be entered as a single line.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/\ndd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/metadata\n</code></pre> <pre><code>{\n    \"metadata\": {\n        \"fields\": [{\n            \"name\": \"F_SingleLine1\",\n            \"uiType\": \"textField\",\n            \"dataType\": \"string\",\n            \"label\": \"First Name\"\n        },\n        {\n            \"name\": \"F_SingleLine2\",\n            \"uiType\": \"textField\",\n            \"dataType\": \"string\",\n            \"label\": \"Last Name\"\n        },\n        {\n            \"name\": \"F_Number1\",\n            \"uiType\": \"number\",\n            \"dataType\": \"decimal\",\n            \"label\": \"Hours worked\",\n            \"decimalPlaces\": 2\n        }]\n    }\n}\n</code></pre> <p>Parent topic: Data access REST API</p>"},{"location":"ref_data_rest_api_retrieve.html","title":"Retrieve","text":"<p>This action retrieves a single record.</p> <p>Note: The curl command must be entered as a single line.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; --header \"Accept:application/atom+xml\" \"http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/\n     org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/f82e576f-cb67-4008-8219-f49a1b369f7d\"\n\ncurl --user &lt;loginId&gt;:&lt;passwd&gt; \"http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/\n      org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/f82e576f-cb67-4008-8219-f49a1b369f7d\n      ?itemOnly=true&amp;format=application%2fjson\"\n</code></pre> <p>format or Accept header</p> <p>The format in which the data must be returned. You can use either format or Accept header.</p> <ul> <li>application/atom+xml returns data as a standard ATOM feed in XML format. This is the default value. Note: When using the format parameter, you must encode the value. For example, application/atom+xml must be inserted into the curl command as application%2Fatom%2Bxml.</li> <li>application/json returns data in JavaScript\u2122 Object Notation format</li> <li>Set itemOnly to true if you want to receive a simplified response. itemOnly is only available for JSON.</li> </ul> <p>The result of this request is an ATOM Entry XML document:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n   &lt;entry xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n      &lt;id&gt;f82e576f-cb67-4008-8219-f49a1b369f7d&lt;/id&gt;\n      &lt;title type=\"text\"&gt;F_Form1&lt;/title&gt;\n      &lt;updated&gt;2011-11-22T19:36:31.000Z&lt;/updated&gt;\n      &lt;author&gt;\n         &lt;name&gt;Mike Smith&lt;/name&gt;\n         &lt;email&gt;msmith@mycompany.com&lt;/email&gt;\n         &lt;login xmlns=\"http://www.ibm.com/xmlns/prod/forms/extension/1.0\"&gt;msmith@mycompany.com&lt;/login&gt;\n      &lt;/author&gt;\n      &lt;contributor&gt;\n         &lt;name&gt;Brenda Jones&lt;/name&gt;\n         &lt;email&gt;bjones@mycompany.com&lt;/email&gt;\n         &lt;login xmlns=\"http://www.ibm.com/xmlns/prod/forms/extension/1.0\"&gt;bjones@mycompany.com&lt;/login&gt;\n      &lt;/contributor&gt;\n      &lt;content type=\"application/xml\"&gt;\n         &lt;F_Form1 xmlns=\"\" application_uid=\"dd34da19-15c4-4267-8f1e-9f12ece743d7\" draft_ownerid=\"\" \n            flowState=\"ST_NewStageName\" id=\"0\" uid=\"f82e576f-cb67-4008-8219-f49a1b369f7d\"&gt;\n            &lt;F_Amount&gt;30.45&lt;/F_Amount&gt;\n            &lt;F_Name&gt;Brenda&lt;/F_Name&gt;\n            &lt;F_Age&gt;39.0000&lt;/F_Age&gt;\n         &lt;/F_Form1&gt;\n      &lt;/content&gt;\n      &lt;link href=\"../../../../../secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/\n          f82e576f-cb67-4008-8219-f49a1b369f7d\" rel=\"edit\"/&gt;\n      &lt;link href=\"../../../../../secure/1/app/dd34da19-15c4-4267-8f1e-9f12ece743d7/print/\n          index.html?form=F_Form1&amp;amp;id=f82e576f-cb67-4008-8219-f49a1b369f7d\" rel=\"print\"/&gt;\n      &lt;link href=\"../launch/index.html?form=F_Form1&amp;amp;id=f82e576f-cb67-4008-8219-f49a1b369f7d\" rel=\"form\"/&gt;\n   &lt;/entry&gt;\n</code></pre> <p>The result of this request as a JSON document:</p> <pre><code>{\n   \"lastModified\": \"2013-11-22T19:37:09.060Z\",\n   \"lastModifiedBy\" : {             \n      \"displayName\" : \"Demo User 1\",\n      \"email\" : \"demo_user1@yourcompany.com\",\n      \"login\" : \"demo_user1\"           \n   },\n   \"created\": \"2013-11-22T19:37:09.060Z\",\n   \"createdBy\": {\n      \"displayName\": \"Demo User 2\",\n      \"email\": \"demo_user2@yourcompany.com\",\n      \"login\" : \"demo_user2\" \n   },\n   \"flowState\": \"ST_End\",\n   \"id\": 1,\n   \"uid\": \"f82e576f-cb67-4008-8219-f49a1b369f7d\",\n   \"F_SingleLine1\": \"Jane\",\n   \"F_SingleLine2\": \"Test\",\n   \"F_Number1\": 25.0\n}\n</code></pre> <p>Refer to the List action for a detailed description of the returned entry.</p> <p>Parent topic: Data access REST API</p>"},{"location":"ref_data_rest_api_retrieve_attachment.html","title":"Retrieve Attachment","text":"<p>This action retrieves a single attachment.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; \"http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/attachment/ccb92c12-d435-4288-baff-878d8d3c2923\"\n</code></pre> <ul> <li>Replace <code>dd34da19-15c4-4267-8f1e-9f12ece743d7</code> with the app ID of the desired attachment.</li> <li>Replace <code>F_Form1</code> with the form ID of the desired attachment.</li> <li>Replace <code>ccb92c12-d435-4288-baff-878d8d3c2923</code> with the UID of the desired attachment.</li> </ul> <p>To determine the UID of an attachment, you can use the Data access REST API to retrieve the data for a given record. If the form contains an attachment item, the data for that record will contain the UID, ID, and filename of the attachment. This information is also available in the response when you upload a file using the Create Attachment REST operation.</p> <p>For example:</p> <pre><code>\"F_Attachment1\" :\n{\n  \"fileName\" : \"some file.doc\",\n  \"id\" : 123,\n  \"uid\" : \"ccb92c12-d435-4288-baff-878d8d3c2923\"\n}\n</code></pre> <p>When retrieving an attachment, the credentials used for authentication must match the users and permissions specified by the application designer in the Access tab.</p> <p>Parent topic: Data access REST API</p>"},{"location":"ref_data_rest_api_update.html","title":"Update","text":"<p>This action updates an existing record.</p> <p>Note: The curl command must be entered as a single line.</p> <pre><code>curl --user &lt;loginId&gt;:&lt;passwd&gt; --request PUT --header \"Accept:application/atom+xml\" --header \"Content-Type:application/atom+xml\" --data-binary @put.xml\n     \"http://&lt;host&gt;:&lt;port&gt;/apps-basic/secure/org/data/dd34da19-15c4-4267-8f1e-9f12ece743d7/F_Form1/f82e576f-\n     cb67-4008-8219-f49a1b369f7d?freedomIdentifyKey=x\" --header \"Cookie: freedomIdentifyKey=x\"\n</code></pre> <p>Content-Type</p> <p>Indicates the type of document submitted.</p> <ul> <li>ATOM Feed: application/atom+xml</li> <li>JSON: application/json.</li> </ul> <p>Accept</p> <p>Indicates the type of accepted response.</p> <ul> <li>ATOM Feed: application/atom+xml</li> <li>JSON: application/json.</li> </ul> <p>--data-binary</p> <p>Provides the actual data that is PUT to the URL. In this case, it is pointing to a file, put.xml, on the local system that contains the data to send.</p> <p>--request PUT</p> <p>Specifies the correct HTTP method verb for the action.</p> <p>--header \"Cookie: freedomIdentifyKey=x\"</p> <p>Includes a required cookie as part of the request where x is a randomly generated, difficult to guess single-use numerical value. The value of the key must match the value of the freedomIdentifyKey URL parameter. Requiring a cookie value that matches the URL parameter helps avoid possible browser vulnerabilities.</p>"},{"location":"ref_data_rest_api_update.html#section_afj_djl_nzb","title":"ATOM Feed","text":"<p>Example PUT data:</p> <pre><code>&lt;entry xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n   &lt;title type=\"text\"&gt;F_Form1&lt;/title&gt;\n   &lt;updated&gt;1970-01-01T00:00:00Z&lt;/updated&gt;\n   &lt;content type=\"application/xml\"&gt;\n      &lt;F_Form1 xmlns=\"\" application_uid=\"dd34da19-15c4-4267-8f1e-9f12ece743d7\" pressedButton=\"S_Submit1\" \n          flowState=\"ST_Stage2\" uid=\"f82e576f-cb67-4008-8219-f49a1b369f7d\" id=\"0\"&gt;\n         &lt;F_Amount&gt;19.25&lt;/F_Amount&gt;\n         &lt;F_Name&gt;Brad Walker&lt;/F_Name&gt;\n         &lt;F_Age&gt;40&lt;/F_Age&gt;\n      &lt;/F_Form1&gt;\n   &lt;/content&gt;\n&lt;/entry&gt;\n</code></pre> <p><code>&lt;title&gt;</code></p> <p>The ID of the form to which this record is being submitted.</p> <p><code>&lt;updated&gt;</code></p> <p>This must be included, but its value is replaced by the server with a new timestamp. A value of 1970-01-01T00:00:00Z can always be used.</p> <p><code>&lt;content&gt;</code></p> <p>Contains the submitted data. The structure of the data within the content element is different for each application, and is based on the list of form items used to create the application. The easiest way to find the complete list of elements is to issue a Retrieve REST call and look at the resulting data.</p> <p>Note: The root element of the submitted data, in this example the <code>&lt;F_Form1&gt;</code> element, is always in the null namespace, <code>xmlns=\"\"</code></p> <p>The root element must have the application_uid, pressedButton, flowState, uid, and id attributes.</p> <ul> <li>The application_uid is the UID of the application.</li> <li>The flowState is the ID of the current stage of the record.</li> <li>The pressedButton is the ID of the stage action submit button, which simulates the submission. A submit button ID must be specified to activate the appropriate stage activities and transfer the record to the next appropriate stage.</li> <li>The uid is the unique ID for the record being updated.</li> <li>The id must be an integer, although the actual value is meaningless. A value of 0 can always be used.</li> </ul> <p>Note: A PUT REST command updates an existing record with new values. All data fields in the old record will be replaced by the data fields provided in the payload. If the new submission does not include a field, the field will be updated to have an empty value even if it previously had a value (i.e. the two records are NOT merged).</p>"},{"location":"ref_data_rest_api_update.html#section_wwg_2jl_nzb","title":"JSON","text":"<p>Example JSON payload:</p> <pre><code>{\n   \"uid\": \"f82e576f-cb67-4008-8219-f49a1b369f7d\",\n   \"flowState\": \"ST_ReviewStage\",\n   \"pressedButton\" : \"S_Approve\",\n   \"F_SingleLine1\": \"Jane\",\n   \"F_SingleLine2\": \"Test\",\n   \"F_Number1\": 26.75\n}\n</code></pre> <p>Note: The uid is optional. If supplied, it must match the record uid. For example: f82e576f-cb67-4008-8219-f49a1b369f7d.</p> <p>Parent topic: Data access REST API</p>"},{"location":"ref_embed_iframe.html","title":"Embedding items in an iframe","text":"<p>You can use iFrames to embed charts and applications in a web page.</p>"},{"location":"ref_embed_iframe.html#embedded-chart-rendering","title":"Embedded Chart Rendering","text":"<p>To embed the summary charts in a web page, use the following URL as a guide. Change the <code>host</code>, <code>port</code>, <code>app_uid</code> and <code>form_id</code> variables to suit your host, port, application ID and form ID.</p> <pre><code>&lt;iframe src=\"http://host:port/apps/secure/org/app/{app_uid}/results/index.html?form={form_id}&amp;narrow=true&amp;hideLabels=true&amp;legend=true\"&gt;&lt;/iframe&gt;\n</code></pre> <p>The parameters in this URL are:</p> <p><code>hideLabels=true</code> Hides labels on pie charts.</p> <p><code>narrow=true</code> Renders charts in narrow mode, which is suitable for charts embedded in narrow spaces. In narrow mode, pie charts render at a size to fit the available space and bar charts are hidden. Narrow mode works best in combination with <code>hideLabels=true</code> and <code>legend=true</code>.</p> <p>Note: Narrow mode is automatically engaged when the available space for charts is less than 500 pixels wide regardless of the narrow URL parameter.</p> <p><code>legend=true</code> Displays a legend with the pie chart. Use in combination with <code>narrow=true</code> and <code>hideLabels=true</code>.</p> <p>When the charts are embedded, the banner is hidden and there are simple messages when no charts are available.</p>"},{"location":"ref_embed_iframe.html#embedded-form-rendering","title":"Embedded Form Rendering","text":"<p>To embed a form in a web page, use the following URL as a guide. Change the <code>host</code>, <code>port</code>, <code>app_uid</code> and <code>form_id</code> variables to suit your host, port, application ID and form ID.</p> <pre><code>&lt;iframe \n   style=\"width:600px;height:600px\"\n   src=\"http://host:port/apps/secure/org/app/{app_uid}/launch/index.html?form={form_id}&amp;width=600px\"\n&gt;\n&lt;/iframe&gt;\n</code></pre> <p>The parameters in this URL are:</p> <p><code>width=value</code> Value can be a percentage or a fixed number of pixels.</p> <p>Note: URL encoding is required for the <code>%</code> character. It should be represented as <code>%25</code>. For example <code>99%</code> would become <code>&amp;width=99%25</code></p> <p>When the forms are embedded, the banner is hidden and when form is shown, the first item does not initially grab focus</p> <p>Parent topic: Reference</p>"},{"location":"ref_embedding_api.html","title":"Embedding API","text":"<p>The Embedding API can be used to embed a Leap form directly in another webpage without using an &lt;iframe&gt;.  The Leap form will be inserted into the DOM of the hosting page and can be interacted with using the Leap JavaScript API or any custom JavaScript.  Additionally, the style of items in the Leap form can be customized by the CSS of the hosting page.</p>"},{"location":"ref_embedding_api.html#example-1-declarative","title":"Example 1 - Declarative","text":"<pre><code>&lt;html&gt; \n\u2026  \n&lt;body&gt;\n   \u2026 \n   &lt;div id=\"myLeapDiv\"&gt; &lt;!-- Leap form will go here --&gt; &lt;/div&gt; \n   \u2026\n   &lt;script src=\"https://leap.example.com/apps/api/leap.js\" \n    data-leap-config=\"{launch: {appId: 'e9ec1ed3-c12b-4b5c-8f5e-7a6ff4800a55', formId: 'F_Form1', targetId: 'myLeapDiv'}}\"&gt;\n   &lt;/script&gt; \n&lt;/body&gt; \n&lt;/html&gt;\n</code></pre>"},{"location":"ref_embedding_api.html#example-2-programmatic","title":"Example 2 - Programmatic","text":"<pre><code>&lt;html&gt; \n\u2026 \n&lt;body&gt; \n  \u2026\n  &lt;div id=\"myLeapDiv\"&gt; &lt;!-- Leap form will go here --&gt; &lt;/div&gt; \n  \u2026\n  &lt;script src=\"https://leap.example.com/apps/api/leap.js\"&gt;&lt;/script&gt; \n\n  &lt;script&gt; \n    function onLeapFormSubmitted (BO) \n    { \n      alert (\"submitted record id: \" + submittedBO.getDataId());       \n    } \n\n    function onLeapFormLoaded (app, launchParams) \n    { \n      app.getForm(launchParams.formId).connectEvent(\"afterSave\", onLeapFormSubmitted); \n    } \n\n    Leap.onReady = function() { \n      var launchParams =  \n      { \n      appId: 'e9ec1ed3-c12b-4b5c-8f5e-7a6ff4800a55', \n      formId: 'F_Form1', \n      target: document.getElementById(\"myLeapDiv\"), \n      locale: 'fr-FR' \n      callback: onLeapFormLoaded \n      }; \n      Leap.launch(launchParams);  \n    }; \n\n  &lt;/script&gt; \n\n&lt;/body&gt; \n&lt;/html&gt;  \n</code></pre>"},{"location":"ref_embedding_api.html#loading-the-leap-embedding-ui","title":"Loading the Leap Embedding UI","text":"<pre><code>&lt;script src=\"https://leap.example.com/apps/api/leap.js\" data-leap-config=\"[leap configuration]\" id=\"leapJS'\"&gt;&lt;/script&gt;\n</code></pre> <ul> <li>id (optional) - fallback for older browsers; the value should always be <code>\"leapJS\"</code></li> <li>data-leap-config (optional) - JSON or the name of an existing JavaScript object. Properties:<ul> <li>locale (optional) - indicates the preferred locale to the Leap API. For example, <code>\"fr-FR\"</code></li> <li>launch (optional) - equivalent to calling <code>Leap.launch({\u2026})</code> function with respective parameters (see below for more details)</li> <li>overwriteExistingDojoConfig (optional) - In some environments, such as HCL Digital Experience or IBM WebSphere Portal, the djConfig or dojoConfig object may be defined on a page and not used. Set the value of this property to true to override it.</li> </ul> </li> </ul> <p>Loading the Leap API will result in the creation of global object named <code>Leap</code>.</p> <p>After initial load of the leap.js, you can define a <code>Leap.onReady()</code> function which will be called when the necessary Leap resources have been loaded into the page and the API is ready to be used.</p>"},{"location":"ref_embedding_api.html#embedding-a-form-programmatically","title":"Embedding a form programmatically","text":"<p>To embed a Leap form programmatically, call <code>Leap.launch({launch_params})</code>;</p> <p><code>{launch_params}</code> properties:</p>  Property   Required?   Description   appId   Yes   The Leap application UUID. For example, 'e9ec1ed3-c12b-4b5c-8f5e-7a6ff4800a55'   formId   Yes   The Leap form ID. For example, 'F_Form1'   targetId   Either target or targetId must be provided.   The id of the HTML DOM element to embed the Leap form within. For example, 'myLeapFormDiv'   target   Either target or targetId must be provided.   The HTML DOM element to place the Leap form within.   mode   No   Determines the mode for embedding.  Possible values: <ul> <li><code>'iframe'</code>: embeds the form in an <code>&lt;iframe&gt;</code> element. For complete isolation of the form, if necessary</li> <li><code>'embed'</code> (default): embeds the form into the hosting page in a <code>&lt;div&gt;  locale   No   Indicates the preferred locale for the embedded form. For example, 'fr-FR'   prefSecMode   No   If the form supports both anonymous and authenticated usage, this property can be used to automatically choose the preferred security mode.  Possible values: <ul> <li><code>'anon'</code>: for anonymous usage</li> <li><code>'secure'</code>: for authenticated usage</li></ul>  callback   No   A callback function which will be called when the application launch completes successfully and the form is ready to be interacted with.  The callback function will be passed the following parameters: <ul> <li><code>app</code>: the Leap JavaScript API application object. </li> <li><code>launchParams</code>: the original launch parameters object, for convenience</li></ul>"},{"location":"ref_embedding_api.html#known-limitations","title":"Known Limitations","text":"<ul> <li>Only one Leap form can be embedded on the page at a time.</li> <li>Once the Leap form is embedded, it cannot be changed to a different form or reloaded.</li> <li>The hosting page cannot contain any version of the Dojo JavaScript library. The Leap Embedding API will load its own copy of the Dojo JavaScript library into the hosting page.</li> <li>For authentication, it is expected that the hosting page and the Leap server are configured with single sign-on (SSO). Leap\u2019s login UI will not display properly within the hosting page.</li> <li>The embedding API cannot be set to an App Page</li> </ul>"},{"location":"ref_embedding_api.html#cross-domain-usage","title":"Cross-Domain Usage","text":"<p>If Leap and the hosting page are in different domains, the Leap front-end must be configured to return appropriate CORS headers.</p> <p>Parent topic: Reference</p>"},{"location":"ref_form_objects.html","title":"Form objects","text":"<p>The form object (form) provides access to a number of functions that affect the entire form.</p>"},{"location":"ref_form_objects.html#addclasses","title":"addClasses","text":"<p>Adds a list of custom class names to the form for dynamic CSS styling. The classes parameter can be a single class name, multiple class names separated by spaces, or an Array of class names. If any of the given class names are invalid CSS class names, then no classes are added and false is returned.</p> <p>Syntax</p> <pre><code>form.addClasses(classes)\n</code></pre> <p>Example</p> <pre><code>form.addClasses('emphasized error');\n</code></pre>"},{"location":"ref_form_objects.html#backwardpage","title":"backwardPage","text":"<p>Return the form to the previous page in navigation order. If the first page is reached, then nothing happens.</p> <p>Syntax</p> <pre><code>form.backwardPage()\n</code></pre> <p>Example</p> <p>The following could be used to turn a regular button into a navigation button.\u00a0In the onClick event of a button:</p> <pre><code>form.backwardPage();\n</code></pre>"},{"location":"ref_form_objects.html#connectevent","title":"connectEvent","text":"<p>Connects a function to an event on the form. This is useful for utility functions defined in external JavaScript\u2122 files to hook behavior into the form dynamically. Returns a handle object that represents the connection of the function to that event name. The handle can be used to disconnect this same event using form.disconnectEvent.</p> <p>Syntax</p> <pre><code>form.connectEvent(eventName, callbackFunction)\n</code></pre> <p>Example</p> <p>If there is a F_CurrentUser field, then populate the currentUser:</p> <pre><code>var hndl = form.connectEvent('onLoad', function()\n{\n   var currentUserField = form.getBO().F_CurrentUser;\n   if (currentUserField) {\n      currentUserField.setValue(app.getCurrentUser());\n   }\n});\n</code></pre>"},{"location":"ref_form_objects.html#disconnectevent","title":"disconnectEvent","text":"<p>Disconnects the event handler specified by the passed-in event handle object that was returned by a form.connectEvent call.  To avoid duplicate event handlers being connected, connect to events from within the application onStart or form onLoad events. If you connect to an event outside of these two events, you should explicitly disconnect from the event using this method.</p> <p>Syntax</p> <pre><code>form.disconnectEvent(eventHandle)\n</code></pre> <p>Example</p> <pre><code>var hndl = form.connectEvent('onLoad', function()\n{\n   var currentUserField = form.getBO().F_CurrentUser;\n   if (currentUserField) {\n       currentUserField.setValue(app.getCurrentUser());\n   }\n   form.disconnectEvent(hndl);\n});\n</code></pre>"},{"location":"ref_form_objects.html#forwardpage","title":"forwardPage","text":"<p>Advance the form to the next page in navigation order. If the last page is reached, then nothing happens.</p> <p>Syntax</p> <pre><code>form.forwardPage()\n</code></pre> <p>Example</p> <p>The following could be used to turn a regular button into a navigation button.\u00a0In the onClick event of a button:</p> <pre><code>form.forwardPage();\n</code></pre>"},{"location":"ref_form_objects.html#getapp","title":"getApp","text":"<p>Returns the application object: app. Not a commonly used function, because within the form scope the app variable is also available.</p> <p>Syntax</p> <pre><code>form.getApp()\n</code></pre>"},{"location":"ref_form_objects.html#getbo","title":"getBO","text":"<p>Returns the object that contains the Business Object data for the entire form.</p> <p>Syntax</p> <pre><code>form.getBO()\n</code></pre> <p>Example</p> <p>This is commonly used in the application onStart, since at this scope the form variable is not defined.  </p> <pre><code>var myForm = app.getForm('F_Form1');\nvar formBO = myForm.getBO();\nformBO.F_SingleLine.setValue('setting the value using code!');\n</code></pre>"},{"location":"ref_form_objects.html#getclasses","title":"getClasses","text":"<p>Returns an Array of custom class names currently applied to the form.</p> <p>Syntax</p> <pre><code>form.getClasses()\n</code></pre>"},{"location":"ref_form_objects.html#getcurrentpage","title":"getCurrentPage","text":"<p>Gets the currently shown page. If there is no page shown, then null is returned. It is possible, though rarely desirable, to have all pages hidden.</p> <p>Syntax</p> <pre><code>form.getCurrentPage()\n</code></pre> <p>Example</p> <pre><code>var pageShown = form.getCurrentPage();\nif (pageShown === 'F_Page1')\n   pageShown.F_Text.setContent('Changing the text of this text item when this page is shown.');\n</code></pre>"},{"location":"ref_form_objects.html#getid","title":"getId","text":"<p>Returns the unique ID within the application of this form. For example, 'F_Form1'.</p> <p>Syntax</p> <pre><code>form.getId()\n</code></pre>"},{"location":"ref_form_objects.html#getpage","title":"getPage","text":"<p>Returns the page object, page, for the page specified. Returns null if the pageId is invalid.</p> <p>Syntax</p> <pre><code>form.getPage(pageId)\n</code></pre> <p>Parameters</p> Parameter Description pageId The id of the page. <p>Example</p> <pre><code>// Get the specified page\nvar thePage = form.getPage('F_Page1');\n\n// If the page exists then, navigate to that page\nif(thePage !== null) \n  form.selectPage('thePage')\n</code></pre>"},{"location":"ref_form_objects.html#getserviceconfigurationids","title":"getServiceConfigurationIds","text":"<p>Returns an array of all the IDs for services mapped in this form.</p> <p>Syntax</p> <pre><code>form.getServiceConfigurationIds()\n</code></pre> <p>Example</p> <pre><code>var serviceConfigs = form.getServiceConfigurationIds();\n</code></pre>"},{"location":"ref_form_objects.html#getpageids","title":"getPageIds","text":"<p>Returns an array of the page IDs for the pages in this form.</p> <p>Syntax</p> <pre><code>form.getPageIds()\n</code></pre>"},{"location":"ref_form_objects.html#getserviceconfiguration","title":"getServiceConfiguration","text":"<p>Gets the service object for a particular service ID.</p> <p>Syntax</p> <pre><code>form.getServiceConfiguration(serviceId)\n</code></pre> <p>Parameters</p> Parameter Description serviceId The id of the service configuration. <p>Example</p> <pre><code>// Lookup and execute a service from JavaScript\nvar service = form.getServiceConfiguration('SC_ServiceConfig');\nservice.callService();\n</code></pre>"},{"location":"ref_form_objects.html#getstageactions","title":"getStageActions","text":"<p>Returns an array of all the action buttons for the current stage. This includes any hidden action buttons as well.</p> <p>Syntax</p> <pre><code>form.getStageActions()\n</code></pre> <p>Example</p> <pre><code>// Trigger a specific action using JavaScript\nvar actions = form.getStageActions():\nfor (var i=0; i&lt;actions.length; i++) {\n  if(get(actions,i).getId() === 'S_Submit')\n  {\n    get(actions,i).activate();\n    break;\n  }\n}\n</code></pre> <pre><code>/*\n* Hides all the stage buttons that are specified.\n* \n* USAGE:\n* app.getSharedData().hideStageButtons(form, [\"S_Submit\", \"S_Submit1\"]);\n*/\napp.getSharedData().hideStageButtons = function(theForm, btnList) {\n\n var actionButtons = theForm.getStageActions();\n for(var i=0; i&lt;actionButtons.length; i++){\n  for(var j=0;j&lt;btnList.length;j++) {\n    if(get(btnList, j) === get(actionButtons, i).getId())\n       get(actionButtons, i).setVisible(false);\n   }      \n }\n}\n</code></pre>"},{"location":"ref_form_objects.html#gettype","title":"getType","text":"<p>Returns a string identifying the object type. For example, 'form'.</p> <p>Syntax</p> <pre><code>form.getType()\n</code></pre>"},{"location":"ref_form_objects.html#removeclasses","title":"removeClasses","text":"<p>Removes a list of custom class names from the form for dynamic CSS styling. The classes parameter can be a single class name, multiple class names separated by spaces, or an Array of class names.</p> <p>Syntax</p> <pre><code>form.removeClasses(classes)\n</code></pre> <p>Parameters</p> Parameter Description classes List of CSS classnames separated by spaces, or an array of class names. <p>Example</p> <pre><code>form.removeClasses('emphasized error');\n</code></pre>"},{"location":"ref_form_objects.html#removepagefromnavigation","title":"removePageFromNavigation","text":"<p>Removes the specified page from the navigation list for the form. The page navigation item no longer visits that page when next, or previous is selected, nor can you switch to that page programmatically.</p> <p>Syntax</p> <pre><code>form.removePageFromNavigation(pageId)\n</code></pre> <p>Parameters</p> Parameter Description pageId The id of the page. <p>Example</p> <pre><code>// If the check is selected, remove page 2 from the navigation\nif(BO.F_Check.getValue())\n  form.removePageFromNavigation('P_Page2');\n</code></pre>"},{"location":"ref_form_objects.html#restorepagenavigation","title":"restorePageNavigation","text":"<p>Restores a previously removed page back into the navigation list for the form.</p> <p>Syntax</p> <pre><code>form.restorePageNavigation(pageId)\n</code></pre> <p>Parameters</p> Parameter Description pageId The id of the page. <p>Example</p> <pre><code>// If the check is not selected, restore page 2 into the navigation\nif(!BO.F_Check.getValue())\n  form.restorePageNavigation('P_Page2');\n</code></pre>"},{"location":"ref_form_objects.html#selectpage","title":"selectPage","text":"<p>Switches to the specified page. If the page is removed from navigation by Stages, Rules, or JavaScript, then you cannot select it.</p> <p>Syntax</p> <pre><code>form.selectPage(pageId)\n</code></pre> <p>Parameters</p> Parameter Description pageId The id of the page. <p>Example</p> <pre><code>// Get the specified page\nvar thePage = form.getPage('F_Page1');\n\n// If the page exists then navigate to that page\nif (thePage !== null) \n  form.selectPage('F_Page1');\n</code></pre> <p>Parent topic: Interface objects</p>"},{"location":"ref_item_objects.html","title":"Item objects","text":"<p>Note: The item.setTitle parameter is not applicable to Tabbed Folder form items.</p>"},{"location":"ref_item_objects.html#common-functions","title":"Common Functions","text":"<p>This page describes the form item (item) and App Page Item (apItem) Objects. The object (item/apItem) represents a particular item on a page or appPage, and provides access to its properties. For Sections and Tab Folders, access to their child items is also granted.</p>"},{"location":"ref_item_objects.html#addclasses","title":"addClasses","text":"<p>Adds a list of custom class names to an item for dynamic CSS styling. The classes parameter can be a single class name, multiple class names separated by spaces, or an Array of class names. If any of the given class names are invalid CSS class names, then no classes are added and false is returned.</p> <p>Syntax</p> <pre><code>item.addClasses(classes)\napItem.addClasses(classes)\n</code></pre> <p>Parameters</p> Parameter Description classes List of CSS classnames separated by spaces, or an array of class names. <p>Example</p> <pre><code>// form\nitem.addClasses(\"emphasized error\");\n\n// app page\napItem.addClasses(\"emphasized error\");\n</code></pre>"},{"location":"ref_item_objects.html#clearrequiredmessage","title":"clearRequiredMessage","text":"<p>Validates the item data, but prevents the required error message from displaying.</p> <p>Syntax</p> <pre><code>item.clearRequiredMessage()\napItem.clearRequiredMessage()\n</code></pre>"},{"location":"ref_item_objects.html#connectevent","title":"connectEvent","text":"<p>Connects a function to an event on the item. Useful for utility functions defined in external JavaScript\u2122 files to hook behavior into the item dynamically. Returns a handle object that represents the connection of the function to that event name. That handle can be used to disconnect this same event using item.disconnectEvent.</p> <p>Syntax</p> <pre><code>item.connectEvent (eventName, callbackFunction)\napItem.connectEvent (eventName, callbackFunction)\n</code></pre> <p>Example</p> <pre><code>// Connect a listener to the onItemChange event to make a section visible. \n// This could be placed in the form onLoad event:  \nvar hndl = item.connectEvent('onItemChange', function() {\n   if(item.getBOAttr().getValue() === 'Yes')\n      form.getBO().F_SectionA.setVisible(true);\n}});\n</code></pre>"},{"location":"ref_item_objects.html#disconnectevent","title":"disconnectEvent","text":"<p>Disconnects the event handler specified by the passed-in event handle object that was returned by an item.connectEvent call.If you connect an item event, you must also disconnect it in the same event. Otherwise, multiple versions of the connected code are attached every time the event is triggered.</p> <p>Syntax</p> <pre><code>item.disconnectEvent (eventHandle)\napItem.disconnectEvent (eventHandle)\n</code></pre> <p>Example</p> <pre><code>// If the connect event is placed in the item onShow then the listener needs to be disconnected: \nvar hndl = item.connectEvent('onItemChange', function()\n{\n   if(item.getBOAttr().getValue() === 'Yes')\n     form.getBO().F_SectionA.setVisible(true);\n   }\n   item.disconnectEvent(hndl);\n});\n</code></pre>"},{"location":"ref_item_objects.html#getactive","title":"getActive","text":"<p>Returns true if this item is active, or false if it is made read only by a rule, stage, or JavaScript.</p> <p>Syntax</p> <pre><code>item.getActive()\napItem.getActive()\n</code></pre>"},{"location":"ref_item_objects.html#getapppage","title":"getAppPage","text":"<p>Returns the page object to which this item belongs.</p> <p>Syntax</p> <pre><code>apItem.getAppPage()\n</code></pre>"},{"location":"ref_item_objects.html#getbo","title":"getBO","text":"<p>Returns the Business Object for the entire form.</p> <p>Syntax</p> <pre><code>item.getBO()\n</code></pre>"},{"location":"ref_item_objects.html#getboattr","title":"getBOAttr","text":"<p>An interface item that is collecting data, this method returns the Business Object Attribute that contains that data. If it is an interface-only item, then it returns null.</p> <p>Syntax</p> <pre><code>item.getBOAttr()\n</code></pre> <p>Example</p> <pre><code>// Get data element for an item and set its value\nitem.getBOAttr().setValue(45);\n</code></pre>"},{"location":"ref_item_objects.html#getchildren","title":"getChildren","text":"<p>If this item contains children, for example Section, or Tab Folder, it returns a list object that provides access to all direct children items. The list object has the getLength() function and get(index) function for accessing the objects in the list.</p> <p>Syntax</p> <pre><code>item.getChildren()\n</code></pre> <p>Example</p> <pre><code>// Reset all numbers inside a section to 0\nvar list = item.getChildren();\nfor(var i=0; i&lt;list.getLength(); i++)\n{\n   if(list.get(i).getType() === 'number')\n      list.get(i).getBOAttr().setValue(0);\n}\n</code></pre>"},{"location":"ref_item_objects.html#getclasses","title":"getClasses","text":"<p>Returns an Array of custom class names currently applied to an item.</p> <p>Syntax</p> <pre><code>item.getClasses()\napItem.getClasses()\n</code></pre>"},{"location":"ref_item_objects.html#getdisplayvalue","title":"getDisplayValue","text":"<p>Returns the current value that is being displayed. It can be used in onItemLiveChange to get current, but not yet committed value.</p> <p>Syntax</p> <pre><code>item.getDisplayValue()\napItem.getDisplayValue()\n</code></pre>"},{"location":"ref_item_objects.html#gethovertext","title":"getHoverText","text":"<p>Returns the current value set as hover text.</p> <p>Syntax</p> <pre><code>item.getHoverText()\napItem.getHoverText()\n</code></pre>"},{"location":"ref_item_objects.html#gethinttext","title":"getHintText","text":"<p>Returns the value set as Hint text.</p> <p>Syntax</p> <pre><code>item.getHintText()\napItem.getHintText()\n</code></pre>"},{"location":"ref_item_objects.html#getid","title":"getId","text":"<p>Returns the unique ID, within the application, of this item. For example, F_FirstName.</p> <p>Syntax</p> <pre><code>item.getId()\napItem.getId()\n</code></pre>"},{"location":"ref_item_objects.html#getinvalidmessage","title":"getInvalidMessage","text":"<p>An interface item that is collecting data, this method returns the Business Object Attribute that contains that data. If it is an interface-only item, then it returns null.</p> <p>Syntax</p> <pre><code>apItem.getInvalidMessage()\n</code></pre>"},{"location":"ref_item_objects.html#getpage","title":"getPage","text":"<p>Returns the page object to which this item belongs.</p> <p>Syntax</p> <pre><code>item.getPage()\n</code></pre> <p>Example:</p> <pre><code>// Get the form object\nvar form = item.getPage().getForm();\n</code></pre>"},{"location":"ref_item_objects.html#getparent","title":"getParent","text":"<p>Returns the object that is the direct parent of the item, which can be a page, section, or tab folder.</p> <p>Syntax</p> <pre><code>apItem.getParent()\n</code></pre>"},{"location":"ref_item_objects.html#getplaceholdertext","title":"getPlaceholderText","text":"<p>Returns the current value set as place holder text.</p> <p>Syntax</p> <pre><code>item.getPlaceholderText()\napItem.getPlaceholderText()\n</code></pre>"},{"location":"ref_item_objects.html#getrequired","title":"getRequired","text":"<p>Gets a value set previously using setRequired().</p> <p>Syntax</p> <pre><code>apItem.getRequired()\n</code></pre>"},{"location":"ref_item_objects.html#getstartlabel","title":"getStartLabel","text":"<p>This method gets the value of the label displayed at the start of a numeric or choice slider.</p> <p>Syntax</p> <pre><code>item.getStartLabel()\n</code></pre>"},{"location":"ref_item_objects.html#getstoplabel","title":"getStopLabel","text":"<p>This method gets the value of the label displayed at the end of a numeric or choice slider.</p> <p>Syntax</p> <pre><code>item.getStopLabel()\n</code></pre>"},{"location":"ref_item_objects.html#getstyle","title":"getStyle","text":"<p>Returns the current value set for display style.</p> <p>Note: This parameter works only on Date and Time input fields.</p> <p>Syntax</p> <pre><code>item.getStyle()\n</code></pre>"},{"location":"ref_item_objects.html#gettitle","title":"getTitle","text":"<p>Returns the current value used as the field title.</p> <p>Syntax</p> <pre><code>item.getTitle()\napItem.getTitle()\n</code></pre>"},{"location":"ref_item_objects.html#gettype","title":"getType","text":"<p>Returns a string identifying the object type.</p> Palette Item Type Palette Item Type Attachment attachment Password password Button button Rich text richTextArea Check Box checkBox Section section Currency currency Select Many checkGroup Date date Select One radioGroup Dropdown comboBox Single Line text Email Address emailAddress Survey survey Folder Tab tabFolderTab Survey Question surveyQuestion HTML Fragment htmlArea Tabbed folder tabFolder Image image Table aggregationListContainer Line horizontalLine Text richText Media media Time time Multi-Line textArea Timestamp timeStamp Number number Web Link staticWebLink Numeric Slider horizontalSlider Website weblink Page page Name Picker name Page Navigation pageNavigator Data Grid dataGrid <p>Syntax</p> <pre><code>item.getType()\napItem.getType()\n</code></pre>"},{"location":"ref_item_objects.html#getvalid","title":"getValid","text":"<p>Gets a value set previously using setValid().</p> <p>Syntax</p> <pre><code>apItem.getValid()\n</code></pre>"},{"location":"ref_item_objects.html#getvalue","title":"getValue","text":"<p>Returns the current value. Its type depends on the data type.</p> Palette Item Type Palette Item Type Attachment Object Password String Button N/A Rich text N/A Check Box Boolean Section N/A Choice Slider String Select Many String, delimited by # Currency Number Select One String Date Date Single Line String Dropdown String Survey N/A Email Address String Survey Question String Folder Tab N/A Tabbed folder N/A HTML Fragment N/A Table N/A Image N/A Text N/A Line N/A Link N/A Media N/A Time Date Multi-Line N/A Timestamp Date Name picker Object Web Link String Number Number Website String Numeric Slider Number Name Picker String Page N/A Data Grid N/A Page Navigation N/A Paragraph Text N/A <p>Syntax</p> <pre><code>item.getValue()\napItem.getValue()\n</code></pre>"},{"location":"ref_item_objects.html#getvisible","title":"getVisible","text":"<p>Returns true if this item is visible (does not take into account which page is being shown) or false if it is hidden by a rule, stage, or JavaScript, or if its parent is hidden.</p> <p>Syntax</p> <pre><code>item.getVisible()\napItem.getVisible()\n</code></pre>"},{"location":"ref_item_objects.html#ismissing","title":"isMissing","text":"<p>Returns true if this item is required and it has no value.</p> <p>Syntax</p> <pre><code>item.isMissing()\napItem.isMissing()\n</code></pre>"},{"location":"ref_item_objects.html#isrequired","title":"isRequired","text":"<p>Returns true if the item is required, otherwise false.</p> <p>Syntax</p> <pre><code>apItem.isRequired()\n</code></pre>"},{"location":"ref_item_objects.html#isvalid","title":"isValid","text":"<p>Returns true if the data is valid. Returns false if the data is invalid.</p> <p>Syntax</p> <pre><code>apItem.isValid()\n</code></pre>"},{"location":"ref_item_objects.html#removeclasses","title":"removeClasses","text":"<p>Removes a list of custom class names from an item for dynamic CSS styling. The classes parameter can be a single class name, multiple class names separated by spaces, or an Array of class names.</p> <p>Syntax</p> <pre><code>item.removeClasses(classes)\napItem.removeClasses(classes)\n</code></pre> <p>Parameters</p> Parameter Description classes List of CSS classnames separated by spaces, or an array of class names. <p>Example</p> <pre><code>item.removeClasses(\"emphasized\");\n</code></pre>"},{"location":"ref_item_objects.html#setactive","title":"setActive","text":"<p>Sets whether this item is inactive, or read only.</p> <p>Note: If this item is made inactive by a rule or stage, then you cannot make it active with JavaScript.</p> <p>Syntax</p> <pre><code>item.setActive(active)\napItem.setActive(active)\n</code></pre> <p>Parameters</p> Parameter Description active True or False"},{"location":"ref_item_objects.html#setdisplayvalue","title":"setDisplayValue","text":"<p>This method sets the value being displayed. If the user is editing, then it will update the value they are trying to enter. If the user is not editing, then it will be the same as setValue(). This method works on direct input items such as single line, multi-line, number, currency, email and website.</p> <p>Syntax</p> <pre><code>item.setDisplayValue(pValue)\napItem.setDisplayValue(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String or number value"},{"location":"ref_item_objects.html#setfocus","title":"setFocus","text":"<p>Causes this item to receive focus. This option has no effect on items that cannot have focus, are invisible, or are read-only.</p> <p>Syntax</p> <pre><code>item.setFocus()\napItem.setFocus()\n</code></pre>"},{"location":"ref_item_objects.html#sethinttext","title":"setHintText","text":"<p>This method sets the text that is used for hover text on input items. If an empty value is provided, the hint text area is removed.</p> <p>Syntax</p> <pre><code>item.setHintText(pValue)\napItem.setHintText(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String"},{"location":"ref_item_objects.html#sethovertext","title":"setHoverText","text":"<p>This method sets the text that is used for Hint text on input items. If an empty value is provided, no hover help is displayed.</p> <p>Syntax</p> <pre><code>item.setHoverText(pValue)\napItem.setHoverText(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String"},{"location":"ref_item_objects.html#setrequired","title":"setRequired","text":"<p>You can override non-required data to be required with this method. Passing true causes its data to be required and prevents submission if it is not set. Setting the required to false clears any previously overridden value.</p> <p>Syntax</p> <pre><code>apItem.setRequired(required)\n</code></pre> <p>Parameters</p> Parameter Description required True or False"},{"location":"ref_item_objects.html#setplaceholdertext","title":"setPlaceholderText","text":"<p>This method sets the text used as placeholder text on input items.</p> <p>Syntax</p> <pre><code>item.setPlaceholderText(pValue)\napItem.setPlaceholderText(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String"},{"location":"ref_item_objects.html#setstartlabel","title":"setStartLabel","text":"<p>This method sets the value of the label displayed at the start of a numeric or choice slider.</p> <p>Syntax</p> <pre><code>item.setStartLabel(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String"},{"location":"ref_item_objects.html#setstoplabel","title":"setStopLabel","text":"<p>This method sets the value of the label displayed at the end of a numeric or choice slider.</p> <p>Syntax</p> <pre><code>item.setStopLabel(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String"},{"location":"ref_item_objects.html#setstyle","title":"setStyle","text":"<p>This method sets the style used to display time and dates. Valid values are numeric, short, medium, long, and full. Valid values for time are numeric, short and medium.</p> <p>Syntax</p> <pre><code>item.setStyle(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String"},{"location":"ref_item_objects.html#settitle","title":"setTitle","text":"<p>This method sets the text used for a field titles on input items. If an empty value is provided, the title is removed.</p> <p>Syntax</p> <pre><code>item.setTitle(pValue)\napItem.setTitle(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue String"},{"location":"ref_item_objects.html#setvalid","title":"setValid","text":"<p>You can override valid data to be invalid with this method. Passing false causes the data to be invalid, and prevents submission. You can optionally provide a custom error message. Setting the valid to true clears any previously overridden valid value.</p> <p>Syntax</p> <pre><code>apItem.setValid(valid, msg)\n</code></pre> <p>Parameters</p> Parameter Description valid True or false msg Optional. Custom error message"},{"location":"ref_item_objects.html#setvalue","title":"setValue","text":"<p>Sets the value of this data item. The correct data type should be provided based on the Business Object Attribute\u2019s type. Some type conversion is done where possible, for example, a Number converted to a String.</p> <p>Note: The attachment data takes an object with a uid property, an id property, and a filename property. Modifying attachment data is not recommended in most circumstances.</p> <p>Syntax</p> <pre><code>item.setValue(pValue)\napItem.setValue(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue Value based on objects type"},{"location":"ref_item_objects.html#setvisible","title":"setVisible","text":"<p>Sets whether this item is visible.</p> <p>Note: If this item is made invisible by a rule or stage, or because a parent is hidden, then you cannot unhide it by calling this function.</p> <p>Syntax</p> <pre><code>item.setVisible(visible)\napItem.setVisible(visible)\n</code></pre> <p>Parameters</p> Parameter Description visible True or false."},{"location":"ref_item_objects.html#validate","title":"validate","text":"<p>Triggers the validation of the data item.</p> <p>Syntax</p> <pre><code>apItem.validate()\n</code></pre>"},{"location":"ref_item_objects.html#drop-down-functions","title":"Drop Down Functions","text":"<p>Functions that only apply to the drop down palette item.</p>"},{"location":"ref_item_objects.html#getoptions","title":"getOptions","text":"<p>Returns the array of options currently shown in the drop-down. Each object in the array has a \"title\" property that is shown in the interface, and a \"value\" property that is saved into the data.</p> <p>Syntax</p> <pre><code>item.getOptions()\n</code></pre> <p>Example</p> <pre><code>// Get the title of a specific dropdown value\nvar displayedValue = \"\";\nvar savedValue = BO.F_DropDown1.getValue();\nvar opts = page.F_DropDown1.getOptions();\nfor(var i=0; i&lt;opts.length; i++) {\n  var opt = get(opts, i);\n  if(opt.value === savedValue) {\n    displayedValue = opt.title;\n    break;\n  }\n}\n</code></pre>"},{"location":"ref_item_objects.html#setoptions","title":"setOptions","text":"<p>Changes the list of options to show in the drop-down.</p> <p>Syntax</p> <pre><code>item.setOptions(options)\n</code></pre> <p>Parameters</p> Parameter Description options Array of objects. Each object must have a \"title\" property that is shown in the interface, and a \"value\" property that is saved into the data. <p>Example</p> <pre><code>// Provide custom list for the drop-down\nvar options = new Array();\noptions.push({title:'Banana', value:'BA'});\noptions.push({title:'Apple', value:'AP'});\noptions.push({title:'Orange', value:'OR'});\nitem.setOptions(options);\n</code></pre>"},{"location":"ref_item_objects.html#link-functions","title":"Link Functions","text":"<p>Functions that only apply to the link palette item.</p>"},{"location":"ref_item_objects.html#setdisplayvalue_1","title":"setDisplayValue","text":"<p>Sets the display value that the user sees as the link in the browser.</p> <p>Syntax</p> <pre><code>item.setDisplayValue(display)\n</code></pre> <p>Parameters</p> Parameter Description display String value"},{"location":"ref_item_objects.html#setlinkvalue","title":"setLinkValue","text":"<p>Sets the URL to which the link navigates when this item is clicked.</p> <p>Syntax</p> <pre><code>item.setLinkValue(link)\n</code></pre> <p>Parameters</p> Parameter Description link Url to set <p>Example</p> <p>Demonstrates how to use a Link item to launch another Leap form in the same application. To launch a form from a different application replace 'app.getUID()' with the uid of the target application.</p> <pre><code>item.setLinkValue('/apps/secure/1/app/' + app.getUID() + '/launch/index.html?form=F_NewForm1');\nitem.setDisplayValue('Launch New Form');\n</code></pre>"},{"location":"ref_item_objects.html#html-fragment-functions","title":"HTML Fragment Functions","text":"<p>Functions that only apply to the HTML palette item.</p>"},{"location":"ref_item_objects.html#getcontent","title":"getContent","text":"<p>Gets the currently shown content for this interface item.</p> <p>Syntax</p> <pre><code>item.getContent()\n</code></pre>"},{"location":"ref_item_objects.html#setcontent","title":"setContent","text":"<p>Sets content in this interface only item. The content is evaluated as HTML code.</p> <p>Syntax</p> <pre><code>item.setContent(content)\n</code></pre> <p>Parameters</p> Parameter Description content String, evaluated as HTML"},{"location":"ref_item_objects.html#text-functions","title":"Text Functions","text":"<p>Functions that only apply to the text palette item.</p>"},{"location":"ref_item_objects.html#setcontent_1","title":"setContent","text":"<p>Sets content in this interface-only item. In Text, it is the raw text to show, no special formatting is supported.</p> <p>Syntax</p> <pre><code>item.setContent(content)\n</code></pre> <p>Parameters</p> Parameter Description content String"},{"location":"ref_item_objects.html#button-functions","title":"Button Functions","text":"<p>Functions that only apply to the button palette item.</p>"},{"location":"ref_item_objects.html#setalternativetext","title":"setAlternativeText","text":"<p>Sets the alt text of the image assigned to the button.</p> <p>Syntax</p> <pre><code>item.setAlternativeText(pText)\n</code></pre> <p>Parameters</p> Parameter Description pText String"},{"location":"ref_item_objects.html#setcontent_2","title":"setContent","text":"<p>Sets the label that is shown on the button.</p> <p>Syntax</p> <pre><code>item.setContent(content)\n</code></pre> <p>Parameters</p> Parameter Description content String"},{"location":"ref_item_objects.html#setdisabledimageurl","title":"setDisabledImageUrl","text":"<p>Sets the background of the button to the image at the public URL when the button is disabled.</p> <p>Syntax</p> <pre><code>item.setDisabledImageUrl(pUrl)\n</code></pre> <p>Parameters</p> Parameter Description pUrl Url of the image"},{"location":"ref_item_objects.html#setimageheight","title":"setImageHeight","text":"<p>Sets explicit height in pixels for the image.</p> <p>Syntax</p> <pre><code>item.setImageHeight(pHeight)\n</code></pre> <p>Parameters</p> Parameter Description pHeight Height in pixels"},{"location":"ref_item_objects.html#setimageurl","title":"setImageUrl","text":"<p>Sets the background of the button to the image at the public URL.</p> <p>Syntax</p> <pre><code>item.setImageUrl(pUrl)\n</code></pre> <p>Parameters</p> Parameter Description pUrl Url of the image"},{"location":"ref_item_objects.html#setimagewidth","title":"setImageWidth","text":"<p>Sets explicit width in pixels for the image.</p> <p>Syntax</p> <pre><code>item.setImageWidth(pWidth)\n</code></pre> <p>Parameters</p> Parameter Description pWidth Width in pixels"},{"location":"ref_item_objects.html#setmousedownimageurl","title":"setMouseDownImageUrl","text":"<p>Sets the background of the button to the image at the public URL when the mouse down event is triggered.</p> <p>Syntax</p> <pre><code>item.setMouseDownImageUrl(pUrl)\n</code></pre> <p>Parameters</p> Parameter Description pUrl Url of the image"},{"location":"ref_item_objects.html#setmouseoverimageurl","title":"setMouseOverImageUrl","text":"<p>Sets the background of the button to the image at the public URL when the mouse over event is triggered.</p> <p>Syntax</p> <pre><code>item.setMouseOverImageUrl(pUrl)\n</code></pre> <p>Parameters</p> Parameter Description pUrl Url of the image"},{"location":"ref_item_objects.html#image-functions","title":"Image Functions","text":"<p>Functions that only apply to the image palette item.</p>"},{"location":"ref_item_objects.html#getheight","title":"getHeight","text":"<p>Returns the current image height. Can be zero or blank.</p> <p>Syntax</p> <pre><code>item.getHeight()\n</code></pre>"},{"location":"ref_item_objects.html#geturl","title":"getUrl","text":"<p>Gets the current URL shown by this image item.</p> <p>Syntax</p> <pre><code>item.getURL()\n</code></pre>"},{"location":"ref_item_objects.html#getwidth","title":"getWidth","text":"<p>Returns the current image width. Can be zero or blank.</p> <p>Syntax</p> <pre><code>item.getWidth()\n</code></pre>"},{"location":"ref_item_objects.html#setheight","title":"setHeight","text":"<p>Sets explicit height in pixels for the image. Setting \"0\" removes the explicit height.</p> <p>Syntax</p> <pre><code>item.setHeight(height)\n</code></pre>"},{"location":"ref_item_objects.html#seturl","title":"setURL","text":"<p>Sets the URL shown by this image item.</p> <p>Syntax</p> <pre><code>item.setURL(pURL)\n</code></pre> <p>Parameters</p> Parameter Description pUrl Url to set"},{"location":"ref_item_objects.html#setwidth","title":"setWidth","text":"<p>Sets explicit width in pixels for the image. Setting \"0\" removes the explicit width.</p> <p>Syntax</p> <pre><code>item.setWidth(width)\n</code></pre> <p>Parameters</p> Parameter Description pWidth Width in pixels"},{"location":"ref_item_objects.html#multi-line-entry-functions","title":"Multi-Line Entry Functions","text":""},{"location":"ref_item_objects.html#getrows","title":"getRows","text":"<p>Returns the current value set as the number of rows displayed. This method gets the number of rows the text area displayed.</p> <p>Syntax</p> <pre><code>item.getRows()\n</code></pre>"},{"location":"ref_item_objects.html#setrows","title":"setRows","text":"<p>This method sets the number of rows the text area displays.</p> <p>Note: Whenever possible, do not exceed 40 rows.</p> <p>Syntax</p> <pre><code>item.setRows(pValue)\n</code></pre> <p>Parameters</p> Parameter Description pValue A number"},{"location":"ref_item_objects.html#section-functions","title":"Section Functions","text":"<p>Functions that only apply to the section palette item.</p>"},{"location":"ref_item_objects.html#getexpanded","title":"getExpanded","text":"<p>Returns true if the section is expanded and false if it is collapsed.</p> <p>Syntax</p> <pre><code>item.getExpanded()\n</code></pre>"},{"location":"ref_item_objects.html#setexpanded","title":"setExpanded","text":"<p>Sets the expanded state of the section.</p> <p>Syntax</p> <pre><code>item.setExpanded(expanded)\n</code></pre> <p>Parameters</p> Parameter Description expanded If true, the section is expanded. If false, then it is collapsed."},{"location":"ref_item_objects.html#tabbed-folder-functions","title":"Tabbed Folder Functions","text":"<p>Functions that only apply to the tabbed folder palette item.</p>"},{"location":"ref_item_objects.html#getselectionindex","title":"getSelectionIndex","text":"<p>Returns the index of the currently selected tab.</p> <p>Syntax</p> <pre><code>item.getSelectionIndex()\n</code></pre> <p>Example</p> <pre><code>// Set 12 into the first item in the currently shown tab\nvar sel = item.getSelectionIndex();\nvar tabs = item.getChildren();\nvar selTab = tabs.get(sel);\nvar tabChildren = selTab.getChildren();\ntabChildren.get(0).getBOAttr().setValue(12);\n</code></pre>"},{"location":"ref_item_objects.html#gettabtitlelist","title":"getTabTitleList","text":"<p>Returns an array of all the tab titles in this folder.</p> <p>Syntax</p> <pre><code>item.getTabTitleList()\n</code></pre>"},{"location":"ref_item_objects.html#setselectedtab","title":"setSelectedTab","text":"<p>Selects the Tab that matches the tabTitle string.</p> <p>Syntax</p> <pre><code>item.setSelectedTab(tabTitle)\n</code></pre> <p>Parameters</p> Parameter Description tabTitle String matching tab title"},{"location":"ref_item_objects.html#settabtitle","title":"setTabTitle","text":"<p>Updates the title of a tab within a Tabbed Folder by using a tabIndex integer and pTitle string value. tabIndex denotes the location of the tab within the list of available tabs from left-to-right. For bidirectional languages, the order is right-to-left.</p> <p>Syntax</p> <pre><code>item.setTabTitle(tabIndex, pTitle)\n</code></pre> <p>Parameters</p> Parameter Description tabIndex Integer.  Index of tab, starting at 0. tabTitle String value to set the tab title <p>Example</p> <p>On the form, a Tabbed folder contains 5 tabs: Red, Orange, Yellow, Green, Blue. The default start number of the tabIndex is 0.</p> <p>In our example tabbed folder, the tabIndex number 0 is the Red tab which is furthest left, while 4 is the tab furthest to the right.</p> <p>In a bidirectional language, the order is reversed. Tab 0 is assigned to Blue, which is the tab furthest to the right.</p>"},{"location":"ref_item_objects.html#settabtitlelist","title":"setTabTitleList","text":"<p>Updates the titles of tabs within a Tabbed Folder from a list of strings by using a pTitleArray array of string values. The list of tabs is updated respective to the order of strings that are defined in the array. If there are more array values than tabs in the form, the additional values are ignored.</p> <p>Syntax</p> <pre><code>item.setTabTitleList (pTitleArray)\n</code></pre> <p>Parameters</p> Parameter Description pTitleArray Array of titles to use for tabs <p>Example</p> <pre><code>item.setTabTitleList(['Monday','Tuesday','Wednesday','Thursday','Friday']);\n</code></pre>"},{"location":"ref_item_objects.html#table-functions","title":"Table Functions","text":"<p>Functions that only apply to the table palette item.</p>"},{"location":"ref_item_objects.html#getselection","title":"getSelection","text":"<p>Returns the Business Object of the selected row or null if there is no selection.</p> <p>Syntax</p> <pre><code>item.getSelection()\n</code></pre> <p>Example</p> <pre><code>// displays an alert showing the row number of the selected table row\nvar selectedRow = page.F_Table1.getSelection();\n\nfor(var i=0;i&lt;BO.F_Table1.getLength();i++) {\n  var tempRow = BO.F_Table1.get(i);\n  if(tempRow === selectedRow){\n    alert(\"Row \" + i + \" selected.\");\n    break; \n  }\n}\n</code></pre>"},{"location":"ref_item_objects.html#setselection","title":"setSelection","text":"<p>Sets the selected row of the table to the Business Object provided.</p> <p>Syntax</p> <pre><code>item.setSelection(pBO)\n</code></pre> <p>Parameters</p> Parameter Description pBO The business object of a row in the table <p>Example</p> <pre><code>// Select that last row in the table\nvar lastIndex = item.getBOAttr().getLength()-1;\nvar lastRow = item.getBOAttr().get(lastIndex);\nitem.setSelection(lastRow);\n</code></pre>"},{"location":"ref_item_objects.html#showadd","title":"showAdd","text":"<p>If show is true, then the Add button is made visible. If false, then the Add button is hidden.</p> <p>Syntax</p> <pre><code>item.showAdd(show)\n</code></pre> <p>Parameters</p> Parameter Description show True or false. <p>Example</p> <pre><code>// hide the add button if the table has 5 rows\nvar theTable = BO.F_Table1;\nif (theTable.getLength() &lt;= 5)\n{\n  theTable.showAdd(true);\n}\nelse\n{\n  theTable.showAdd(false);\n}\n</code></pre>"},{"location":"ref_item_objects.html#showedit","title":"showEdit","text":"<p>If show is true, then the Edit button is made visible. If false, then the Edit button is hidden.</p> <p>Syntax</p> <pre><code>item.showEdit(show)\n</code></pre> <p>Parameters</p> Parameter Description show True or false. <p>Example</p> <pre><code>var selectedRow = page.F_Table1.getSelection();\nif(selectedRow === null)\n{\n  page.F_Table1.showEdit(false);\n}\nelse\n{\n  page.F_Table1.showEdit(true);\n}\n</code></pre>"},{"location":"ref_item_objects.html#showremove","title":"showRemove","text":"<p>If show is true, then the Remove button is made visible. If false, then the Remove button is hidden.</p> <p>Syntax</p> <pre><code>item.showRemove(show)\n</code></pre> <p>Parameters</p> Parameter Description show True or false. <p>Example</p> <pre><code>// Hide the remove button if the table row field doesn't match another field's value\nvar selectedRow = page.F_Table1.getSelection();\nif(selectedRow !== null) {\n  if(selectedRow.F_SingleLine1.getValue() !== BO.F_SingleLine5.getValue()) {\n    //don't allow delete\n    page.F_Table1.showRemove(false);\n  } else {\n    page.F_Table1.showRemove(true);\n  }\n} else {\n  page.F_Table1.showRemove(false);\n}\n</code></pre>"},{"location":"ref_item_objects.html#getcolumnheaders","title":"getColumnHeaders","text":"<p>Returns a JSON object that contains the id, title and width of each header displayed for the table.</p> <p>Sample JSON output:</p> <pre><code>[\n  { id:\"F_Currency1\",title:\"La Currency\",width:20 },\n  { id:\"F_Date1\",title:\"La Date\" }\n]\n</code></pre> <p>Syntax</p> <pre><code>item.getColumnHeaders()\n</code></pre> <p>Example</p> <pre><code>var headers =  page.F_Table1.getColumnHeaders();\nfor(var h in headers) {\n  alert(\"ID=\" + get(headers,h).id +\n  \", title=\" + get(headers,h).title + \n  \", width=\" + get(headers,h).width);\n}\n</code></pre>"},{"location":"ref_item_objects.html#setcolumnheaders","title":"setColumnHeaders","text":"<p>Function accepts a JSON object that can be used to set the id, title and width of each column in the table.</p> <p>Syntax</p> <pre><code>item.setColumnHeaders(headers)\n</code></pre> <p>Parameters</p> Parameter Description headers JSON object with id, title and with <p>Example</p> <pre><code>// This is helpful, for example, to change the language of the column header displayed.  \nvar headers = new Array(); \nset(headers, 0, {id: \"F_Currency1\", title: \"La Currency\", width: 20}); \nset(headers, 1, {id: \"F_Date1\", title: \"La Date\"}); \npage.F_Table1.setColumnHeaders(headers); \n</code></pre>"},{"location":"ref_item_objects.html#survey-functions","title":"Survey Functions","text":"<p>Functions that only apply to the survey palette item.</p>"},{"location":"ref_item_objects.html#getoptions_1","title":"getOptions","text":"<p>Returns an array of all the options for the survey questions. Each option has a value property, that gets saved in the data, and a display property, the title of at the beginning of the survey.</p> <p>Syntax</p> <pre><code>item.getOptions()\n</code></pre> <p>Example</p> <p>For a survey item that had the options; 'yes', 'maybe' and 'no'.</p> <pre><code>// get the options and convert to a JSON string\nvar surveyQs = item.getOptions();\nalert(toJson(surveyQs));\n</code></pre> <p>The returned object is an array of objects with 'value' and 'display' properties:</p> <pre><code>[{\"value\":\"Yes\",\"display\":\"Yes\"},{\"value\":\"Maybe\",\"display\":\"Maybe\"},{\"value\":\"No\",\"display\":\"No\"}]\n</code></pre>"},{"location":"ref_item_objects.html#datagrid-functions","title":"DataGrid Functions","text":"<p>Functions that only apply to the survey palette item.</p>"},{"location":"ref_item_objects.html#getdisplayeddata","title":"getDisplayedData","text":"<p>Gets all the data that is currently displayed in the data grid.</p> <p>The data types returned is based on the field type:</p> Field Type Datatype Checkbox Boolean Date Date Time Date Timestamp Date Number Number Currency Number Numeric Slider Number Attachment Object Name Picker Object Select Many Object All other items String <p>Attachment</p> <ul> <li><code>uid</code>: The identifier of the attachment.</li> <li><code>filename</code>: the file name of the attachment.</li> <li><code>viewUrl</code>: The url to view the attachment.</li> <li><code>downloadUrl</code>: The url to download the attachment.</li> </ul> <p>Name Picker</p> <ul> <li><code>id</code>: The id of the person or group</li> <li><code>displayName</code>: The display name of the person or group</li> <li><code>email</code>: The email address of the person</li> <li><code>type</code>: The type of the user or group</li> </ul> <p>Select Many</p> <ul> <li><code>savedValues</code>: An array of all the saved values.</li> <li><code>displayValues</code>: An array of all the display values.</li> <li><code>displayString</code>: All the list values provided as a comma-separated string.</li> </ul> <p>Syntax</p> <pre><code>item.getDisplayedData()\n</code></pre> <p>Examples:</p> <p>Render all the row data displayed in the data grid as JSON:</p> <pre><code>appPage.F_Text2.setContent(toJson(appPage.F_DataGrid1.getDisplayedData(), true));\n</code></pre> <p>Calculate the sum of a column from displayed data:</p> <pre><code>var data = appPage.F_DataGrid1.getDisplayedData();\nvar sum = 0;\nfor(var d in data) {\n  var dObj = get(data, d);\n  sum += dObj.F_Number1;\n}\nalert(\"Sum = \" + sum);\n</code></pre>"},{"location":"ref_item_objects.html#isalldatadisplayed","title":"isAllDataDisplayed","text":"<p>Returns true if all the submitted data for the form connected to the data grid is rendered on screen in a single page.</p> <p>Syntax</p> <pre><code>item.isAllDataDisplayed()\n</code></pre> <p>Example</p> <p>If all the known data is being displayed, then do something with that data. In this example the sum of a column is calculated:</p> <pre><code>if(appPage.F_DataGrid1.isAllDataDisplayed()) {\n  var allData = appPage.F_DataGrid1.getDisplayedData();\n  var sum = 0;\n  for(var d in allData) {\n    var dObj = get(allData, d);\n    sum += dObj.F_Number1;\n  }\n  alert(\"Sum = \" + sum);\n}\n</code></pre>"},{"location":"ref_item_objects.html#iscolumnvisible","title":"isColumnVisible","text":"<p>Returns true if the specified column is visible in the data grid.</p> <p>Syntax</p> <pre><code>item.isColumnVisible (columnId)\n</code></pre> <p>Example</p> <pre><code>appPage.F_DataGrid1.isColumnVisble(\"F_SingleLine1\");\n</code></pre>"},{"location":"ref_item_objects.html#refresh","title":"refresh","text":"<p>Forces the data grid to reload. For example, a submission with \"apps as a service\" may have been triggered and the content in the data grid is stale.</p> <p>Syntax</p> <pre><code>item.refresh()\n</code></pre> <p>Example</p> <p>Refresh the data grid after calling a service that changes (i.e. adds to, removes from, or updates) the data to which the data grid is connected:</p> <pre><code>var srv = form.getServiceConfiguration('SC_theService');\nsrv.connectEvent(\"onCallFinished\", function(success)\n{\n  if(success) {\n    try {\n      appPage.F_DataGrid1.refresh();\n    } catch (err) {\n      alert(\"SC_theService: \" + err);\n    }\n  }\n});\n</code></pre>"},{"location":"ref_item_objects.html#selectfirstrow","title":"selectFirstRow","text":"<p>Selects the first row in the data grid.</p> <p>Syntax</p> <pre><code>item.selectFirstRow()\n</code></pre>"},{"location":"ref_item_objects.html#setcolumnheader","title":"setColumnHeader","text":"<p>Sets the header identified by columnId, to the value provided in pHeaderValue.</p> <p>Syntax</p> <pre><code>item.setColumnHeader (columnId, pHeaderValue)\n</code></pre> <p>Parameters</p> Parameter Description columnId The id of the column. pHeaderValue The string used to set the column header <p>Example</p> <pre><code>// Set the header of a column to another language\nappPage.F_DataGrid1.setColumnHeader(\"createdBy\", \"Cr\u00e9\u00e9 par\");\n</code></pre>"},{"location":"ref_item_objects.html#setcolumnvisible","title":"setColumnVisible","text":"<p>Controls the visibility of the column identified by columnId. If boolVal is true, the column is shown. If boolVal is false, the column is hidden.</p> <p>Syntax</p> <pre><code>item.setColumnVisible(columnId, boolVal)\n</code></pre> <p>Example</p> <pre><code>// Hide a column from the data grid if user is not part of a specific role\nvar isAdmin = app.getCurrentUserRoles().contains(\"Administrator\");\nitem.setColumnVisible(\"F_AdminOnly1\", isAdmin);\n</code></pre>"},{"location":"ref_item_objects.html#resetfilters","title":"resetFilters","text":"<p>Returns the filters to what was specified in the data grid configuration.</p> <p>Syntax</p> <pre><code>item.resetFilters()\n</code></pre>"},{"location":"ref_item_objects.html#setfilters","title":"setFilters","text":"<p>Set filters for the data grid, this will override any filters specified in the data grid configuration.</p> <p>A filter is made up of the following:</p> <ul> <li>name: the id of a meta-data attribute or a field of the form configured to the data grid.</li> </ul> <p>Note: The field id does not have to be displayed in the data grid.</p> <ul> <li>operator: as documented in Filtering Data REST API results.</li> <li>value: the value to search</li> </ul> <p>Syntax</p> <pre><code>item.setFilters([filter], filterOp)\n</code></pre> <p>Parameters</p> Parameter Description filter is an array of filter objects ({name: '', operator: '', value: ''}) filterOp is either \"and\" or \"or\" and is required if there is more than one filter <p>Examples</p> <pre><code>// Set a filter to show records that are older than one week and in the \"ST_Triage\" stage\nvar now = new Date(); \nvar aWeekAgo = new Date (now.getTime() - (7*24*60*60*1000)); \nvar filters = [ \n    {name : \"created\", operator: \"before\", value: aWeekAgo}, \n    {name: \"stageId\", operator: \"equals\", value: \"ST_Triage\"}   \n]; \npage.F_DataGrid1.setFilters(filters, \"and\"); \n</code></pre> <pre><code>// Set a filter to show records between two dates, from fields on the same app page as the data grid\nvar filters = [\n  {\n    name: \"F_BirthDate\", \n    operator: \"between\", \n    value: [appPage.F_StartDate.getValue(), appPage.F_EndDate.getValue()]\n  }\n];\nappPage.F_DataGrid2.setFilters(filters, \"and\");\n</code></pre> <pre><code>// Remove all filters\nappPage.F_DataGrid1.setFilters(null);\n</code></pre> <p>Parent topic: Interface objects</p>"},{"location":"ref_javascript_api.html","title":"JavaScript API","text":"<p>This topic provides details on Leap JavaScript API structure. </p>"},{"location":"ref_javascript_api.html#javascripttm-api-structure","title":"JavaScript\u2122 API Structure","text":"<p>Leap JavaScript API structure.</p> <p></p> <p>The graphic provides a high-level view of the JavaScript API object structure at run time. The Form interface is created once when the application is loaded into the browser, and is then reused every time form data needs to be displayed. The Form Data Business Object is dynamic and is loaded into the user interface each time a form is loaded or created.</p> <p>Usage Details:</p> <ul> <li>This library follows a security protocol as defined in Securing Leap overview.</li> <li>For applications with multiple forms, only the form user interface displayed has a Business Object assigned to it. The other forms are hidden, and do not point to data.</li> <li>Tables point to a data element that is a list of Business Object data instances. These Business Object elements are of the same structure as the Business Objects used for a full form. The sub form that you create for editing the table data works only on one item in this list at a time. When it is not in use, it is hidden and does not point to any data.</li> </ul>"},{"location":"ref_javascript_api.html#interface-model","title":"Interface Model","text":"<p>Application :   The application is the parent that contains forms. It provides a few useful general functions and can be used to get access to any of the forms. Although you can get access to all the forms, only the form currently being displayed has a data Business Object and can have its user interface modified.</p> <p>Forms :   There can be any number of forms in an application. Each form contains one or more pages that contain the items. There is a Business Object for each form that holds the data contained in the form.</p> <p>Pages :   Pages contain items that collect and display the information for the form. All items on a page can be accessed as properties directly on the page, for example, <code>page.F_MySingleLineitem.setVisible(false);</code>. Each item is accessed by its ID, which can be found in the composer by opening the item\u2019s Edit Properties dialog and going to the Advanced tab.</p> <p>Items :   There are two types of items on a form: those that collect data, for example, Single Line Field and Timestamp, and those that do not, including Image, Text, and Section. Any item that collects data is associated with a Business Object Attribute that contains this data.</p>"},{"location":"ref_javascript_api.html#data-model","title":"Data Model","text":"<p>Business Object :   The Business Object contains all the data for a particular form. This data is contained in a Business Object Attribute for each data item contained in the form. These options can be accessed using the following syntax:</p> <pre><code>BO.F_MySingleLineitem\n</code></pre> <p>Each Business Object Attribute is accessed by its ID, which is found in the composer by opening the item\u2019s Edit Properties dialog and going to the Advanced tab.</p> <p>Business Object Attribute :   Each item that is mapped to data has its own Business Object Attribute. The Business Object Attribute contains this data.</p> <p>Note: Some items do not collect data. These items do not have a corresponding Business Object Attributes in the Business Object. For example: PageNavigation.</p> <ul> <li>Running Custom JavaScript \u2013 Events Custom JavaScript is run in response to events in the form. These events can be triggered at the application, form, page, and item level in response to form lifecycle changes, and to user interactions. A list of the events available, and how to interact with the form using them is shown in the following list.</li> <li>Running Custom JavaScript Files Custom JavaScript can also be loaded from attached JavaScript files. Any .js file that is added to the application in the Settings &gt; Files section is automatically loaded into your running application. An associated JavaScript file is evaluated once when the browser first loads the running application, and is not called in response to any events.</li> <li>Reference Objects and Functions  Describes the Functions available on different parts of the HCL Leap object model.</li> </ul> <p>Parent topic: Reference</p>"},{"location":"ref_jsapi_application_events.html","title":"Application Events","text":"<p>This topic describes the Application Events, and their parameters when using JavaScript\u2122 API in HCL Leap.</p> <p>There is one event at the application level in Settings &gt; Events that is called from the context of the application, regardless of what form is going to be displayed.</p>"},{"location":"ref_jsapi_application_events.html#javascripttm-objects","title":"JavaScript\u2122 objects","text":"Variable Full name Description Example Type app Application object Contains functions for accessing global general information <code>app.getCurrentUser();</code> GUI"},{"location":"ref_jsapi_application_events.html#application-events_1","title":"Application Events","text":""},{"location":"ref_jsapi_application_events.html#onstart","title":"onStart","text":"<p>Called once when the browser is first loaded with your application. You can access the form\u2019s interface model for attaching programmatic events. However, nothing else on the form is modified because the forms have not been displayed to the user, nor have they had any data attached.</p> <p>Example</p> <p>Create a global function for later use:</p> <pre><code>app.getSharedData().messageBox = function(\n{\n   alert(\"Warning: \" + message);\n};\n</code></pre> <p>Register a function to be called that shows a section when a Service finishes:</p> <pre><code>var form = app.getForm('F_Form1');\nvar serviceConfig = form.getServiceConfiguration('SC_ServiceConfig0');\nserviceConfig.connectEvent('onCallFinished', function(success)\n{\n   form.getPage('P_Page1').F_Section1.setVisible(true);\n}); \n</code></pre> <p>Parent topic: Running Custom JavaScript \u2013 Events</p>"},{"location":"ref_jsapi_form_events.html","title":"Form Events","text":"<p>This topic describes the Form Events, and their parameters when using JavaScript\u2122 API in HCL Leap.</p> <p>There are many events available to hook into on a form that are accessed from the forms Edit Properties dialog.</p>"},{"location":"ref_jsapi_form_events.html#javascripttm-objects","title":"JavaScript\u2122 objects","text":"Variable Full name Description Example Type app Application object Contains functions for accessing global general information <code>app.isSingleFormView()</code> GUI form Form object For accessing the pages and controlling page navigation <code>form.getPage('P_Page1');</code> GUI BO Business Object object Top level data object for the form. <code>BO.F_Username.getValue();</code> DATA"},{"location":"ref_jsapi_form_events.html#aftersave","title":"afterSave","text":"<p>Called after the form is submitted or saved to the server. Changes made to the form in this event are lost, as it was already submitted.</p> <p>Example</p> <p>Custom alert message: <pre><code>alert('Thank you for submitting ' + app.getCurrentUser());\n</code></pre></p>"},{"location":"ref_jsapi_form_events.html#beforesave","title":"beforeSave","text":"<p>Called just before the form is about to be submitted to the server. Any changes to data in the form are saved.</p> <p>Example</p> <p>Make a field lowercase before submission: <pre><code>BO.F_tag.setValue(BO.F_tag.getValue().toLowerCase()); \n</code></pre></p>"},{"location":"ref_jsapi_form_events.html#ondatareceived","title":"onDataReceived","text":"<p>Applicable only when the form is hosted inside IBM\u00ae WebSphere\u00ae Portal. This event is called when the form receives data from another portlet. The data is provided with the pData parameter, which is a string containing arbitrary data passed in by portal.</p> <p>Example</p> <p>Update Info Message: <pre><code>form.getPage('P_Page1').F_Info.setContent(pData);\n</code></pre></p>"},{"location":"ref_jsapi_form_events.html#onhide","title":"onHide","text":"<p>Called after the form is hidden.</p>"},{"location":"ref_jsapi_form_events.html#ondestruct","title":"onDestruct","text":"<p>Same as onHide. Legacy event.</p>"},{"location":"ref_jsapi_form_events.html#onload","title":"onLoad","text":"<p>Called after data Business Object is attached to the Form, and its values loaded into the interface, whether it is a new form or an existing form. If the form is new, this event is called after onNew.</p> <p>Example</p> <p>Update the current Datetime into a Timestamp item: <pre><code>BO.F_Date.setValue(new Date()); \n</code></pre></p>"},{"location":"ref_jsapi_form_events.html#onnew","title":"onNew","text":"<p>Called when a blank form is created, and after the default values are loaded. Ideal location to pre-populate, or do first time setup of data.</p> <p>Example</p> <p>Populate an item with the current user: <pre><code>BO.F_User.setValue(app.getCurrentUser());\n</code></pre></p>"},{"location":"ref_jsapi_form_events.html#onshow","title":"onShow","text":"<p>Called after the form is shown. This can occur after onNew and onLoad.</p>"},{"location":"ref_jsapi_form_events.html#onshowactionbuttons","title":"onShowActionButtons","text":"<p>Called after the stage action buttons are created and shown.</p>"},{"location":"ref_jsapi_form_events.html#validatebuttonpressed","title":"validateButtonPressed","text":"<p>Called after every stage action button is pressed and the ID of the button is passed in as the pActionId parameter. Returning false in this event cancels the action taken by the button press.</p> <p>Examples</p> <p>Verify the user is cancelling: <pre><code>if(pActionId === 'S_Cancel')\n{    \n   return confirm('Are you sure you want to cancel?');\n} \n</code></pre></p> <p>Have the user confirm their submit action: <pre><code>if(pActionId === 'S_Submit') {\n  var msg = \"BY CLICKING ON THE 'OK' BUTTON, YOU AGREE TO THE TERMS OF THIS  AGREEMENT. IF YOU ARE ACCEPTING THESE TERMS ON BEHALF OF A COMPANY OR OTHER LEGAL ENTITY, YOU REPRESENT AND WARRANT THAT YOU HAVE FULL AUTHORITY TO BIND SUCH COMPANY OR OTHER LEGAL ENTITY TO THESE TERMS IN WHICH CASE THE TERMS WILL REFER TO SUCH ENTITY. THE AGREEMENT IS EFFECTIVE AS OF THE DATE YOU ACCEPT THESE TERMS ('Effective Date').\\n\\nIF YOU DO NOT HAVE SUCH AUTHORITY, OR IF YOU DO NOT AGREE TO THESE TERMS, DO NOT CLICK THE 'OK' BUTTON\";\n\n  return confirm(msg);\n}\n</code></pre></p> <p>Do not allow submission if a table item does not contain the minimum number of rows: <pre><code>if(pActionId === \"S_Submit\") {\n\n  if(BO.F_Table.getLength() &lt; 5) {\n    alert(\"A minimum of 5 rows must be provided in the table before submitting the form. You currently have \" + BO.F_Table.getLength() + \".\");\n    return false;\n  }\n}\n</code></pre></p> <p>Parent topic: Running Custom JavaScript \u2013 Events</p>"},{"location":"ref_jsapi_item_events.html","title":"Item Events","text":"<p>This topic describes the Item Events, and their parameters when using JavaScript\u2122 API in HCL Leap.</p> <p>There are many events available to hook into on an item that is accessed from the item Edit Properties dialog.</p>"},{"location":"ref_jsapi_item_events.html#javascripttm-objects","title":"JavaScript\u2122 objects","text":"Variable Full name Description Example Type app Application object Contains functions for accessing global general information <code>app.isSingleFormView()</code> GUI page Page object For accessing the Page and the items on it <code>page.F_Text.setContent('This a Label');</code> GUI form Form object For accessing the pages and controlling page navigation <code>form.getPage('P_Page1');</code> GUI item Item object The object representing the current item <code>item.setVisible(true);</code> GUI BO Business Object object Top-level data object for the form <code>BO.F_Username.getValue();</code> DATA BOA Business Object Attribute object Object representing the Data for the current item. Only present for data items <code>BOA.setValue(\"Please enter your Name\");</code> DATA"},{"location":"ref_jsapi_item_events.html#item-events_1","title":"Item Events","text":""},{"location":"ref_jsapi_item_events.html#onclick","title":"onClick","text":"<p>Called every time that the item is selected by the user.</p>"},{"location":"ref_jsapi_item_events.html#onhide","title":"onHide","text":"<p>Called every time that the item is hidden, whether just itself or the entire page.</p>"},{"location":"ref_jsapi_item_events.html#oninvalid","title":"onInvalid","text":"<p>Only applies to data items. Called when a data item goes from being valid to invalid.</p>"},{"location":"ref_jsapi_item_events.html#onitemblur","title":"onItemBlur","text":"<p>Called when the item is blurred (focus is lost).</p>"},{"location":"ref_jsapi_item_events.html#onitemchange","title":"onItemChange","text":"<p>Called when the item data is changed and saved into the Business Object. For some types of items, it occurs when the user tabs or switches focus, for example, when users select Number, Single Line, Multi-Line, and Currency form items. For other items, it occurs every time they make a change, such as Check Box, Survey, or drop-down.</p> <p>Note: You cannot change the value of an item within this event as its value has changed, and it is locked.</p>"},{"location":"ref_jsapi_item_events.html#onitemfocus","title":"onItemFocus","text":"<p>Called when focus is received by an item.</p>"},{"location":"ref_jsapi_item_events.html#onitemlivechange","title":"onItemLiveChange","text":"<p>Only applies to items which can be incrementally changed. Called every time data is entered but not yet updated to the Business Object, such as Number, Single Line, Multi-Line, and Currency.</p>"},{"location":"ref_jsapi_item_events.html#onmouseout","title":"onMouseOut","text":"<p>Called every time the mouse moves out of the item bounding area (not including label).</p>"},{"location":"ref_jsapi_item_events.html#onmouseover","title":"onMouseOver","text":"<p>Called every time the mouse moves into the item bounding area (not including label).</p>"},{"location":"ref_jsapi_item_events.html#onshow","title":"onShow","text":"<p>Called every time the item goes from being hidden to being shown, whether from a page flip or because of a rule or JavaScript change.</p>"},{"location":"ref_jsapi_item_events.html#onvalid","title":"onValid","text":"<p>Only applies to data items. Called when a data item goes from being invalid to valid.</p>"},{"location":"ref_jsapi_item_events.html#table-events","title":"Table Events","text":""},{"location":"ref_jsapi_item_events.html#onadd","title":"onAdd","text":"<p>This event is called after an entry is added to the table. The newly added item data is available from the variable itemBO.</p> <p>Example</p> <p>Add a value from the new row to a subtotal field:</p> <pre><code>var curValue = BO.F_Total.getValue();\ncurValue += itemBO.F_Price.getValue();\nBO.F_Total.setValue(curValue);\n</code></pre>"},{"location":"ref_jsapi_item_events.html#onedit","title":"onEdit","text":"<p>Called after an existing row is edited by the user. The item that was edited is available from the variable itemBO.</p>"},{"location":"ref_jsapi_item_events.html#onremove","title":"onRemove","text":"<p>Called after a row is deleted from the table by the user. The item that was deleted is available from the variable itemBO.</p>"},{"location":"ref_jsapi_item_events.html#tabbed-folder-events","title":"Tabbed Folder Events","text":""},{"location":"ref_jsapi_item_events.html#ontabselected","title":"onTabSelected","text":"<p>Called after a tab is selected.</p>"},{"location":"ref_jsapi_item_events.html#section-events","title":"Section Events","text":""},{"location":"ref_jsapi_item_events.html#oncollapse","title":"onCollapse","text":"<p>Called when the section is collapsed.</p>"},{"location":"ref_jsapi_item_events.html#onexpand","title":"onExpand","text":"<p>Called when the section is expanded.</p>"},{"location":"ref_jsapi_item_events.html#beforeoptionsupdate","title":"beforeOptionsUpdate","text":"<p>This event is called before the options in a drop-down list are updated from a service call or from an API call. The array of options is passed in as pOptions and can be modified by the event code. By default, when a new options list is set into a drop-down list and the current selected item is not in the new list, it is added into the new list automatically. If you return false from this event, it does not copy the missing option into the new list.</p> <p>Example</p> <pre><code>pOptions.push({title:'Pizza', value:'fooditem3'});\nreturn false;\n</code></pre> <p>Parent topic: Running Custom JavaScript \u2013 Events</p>"},{"location":"ref_jsapi_javascript_security.html","title":"JavaScript Security","text":"<p>The dojox.secure library is used to restrict the JavaScript\u2122-provided clients to a safe sandbox so they cannot do anything malicious. However, this imposes a number of limitations.</p> <p>The JavaScript in the sandbox generally follows rules to limit dangerous operations:</p> <ul> <li>Use of <code>eval</code>, <code>with</code>, <code>==</code>, <code>!=</code>, and the subscript operator <code>[]</code> are not allowed.<ul> <li>Instead of <code>==</code> use <code>===</code></li> <li>Instead of <code>!=</code> use <code>!==</code></li> <li>Instead of the <code>[]</code> operator, use the <code>forEach()</code>, <code>get()</code>, and <code>set()</code> functions provided (described below).</li> </ul> </li> <li>Usage of the <code>this</code> keyword is not allowed:<ul> <li>For item level events, the keyword <code>item</code> is used in place of the <code>this</code> keyword.</li> <li>For page level events, the keyword <code>page</code> is used in place of the <code>this</code> keyword.</li> <li>For form level events, the keyword <code>form</code> is used in place of the <code>this</code> keyword.</li> </ul> </li> <li>Limited access to global variables. Details are provided in the following section.</li> <li>These properties cannot be used: <code>apply</code>, <code>arguments</code>, <code>call</code>, <code>callee</code>, <code>caller</code>, <code>constructor</code>, <code>eval</code>, <code>prototype</code>, <code>this</code>, <code>unwatch</code>, <code>valueOf</code>, <code>watch</code>, and any property beginning or ending with double underscore <code>__</code>.</li> </ul>"},{"location":"ref_jsapi_javascript_security.html#security","title":"Security","text":"<p>The following global variables are accessible:</p> Variable Description <code>element</code> This the root element of the sandbox. Sandboxed elements do not have access to relational properties such as <code>parentNode</code>, <code>firstSibling</code>, <code>nextSibling</code>, etc. You can still use DOM methods and string properties like <code>innerHTML</code>. The <code>style</code> object can also be used, accessed, and modified. <code>document</code> This is a sandboxed document object that provides node creation and basic element searching facilities. The sandboxed document provides the following methods: <code>getElementById</code>, <code>createElement</code>, <code>createTextNode</code>, and <code>write</code>. <p>The following standard JavaScript/DOM functions/constructors, and their child functions when applicable, can be called. They can be used only in call position. They cannot be accessed in any other way. They generally behave as the standard JavaScript function, unless otherwise noted:</p> <ul> <li><code>isNaN</code></li> <li><code>isFinite</code></li> <li><code>parseInt</code></li> <li><code>parseFloat</code></li> <li><code>escape</code></li> <li><code>unescape</code></li> <li><code>encodeURI</code></li> <li><code>encodeURIComponent</code></li> <li><code>decodeURI</code></li> <li><code>decodeURIComponent</code></li> <li><code>alert</code></li> <li><code>confirm</code></li> <li><code>prompt</code></li> <li><code>Date</code></li> <li><code>RegExp</code></li> <li><code>Error</code></li> <li><code>Number</code></li> <li><code>Math</code></li> <li><code>setTimeout</code> - This only accepts a function, not a string.</li> <li><code>setInterval</code> - This only accepts a function, not a string.</li> <li><code>clearTimeout</code></li> <li><code>clearInterval</code></li> </ul> <p>The following special functions are available to compensate for the JavaScript syntax limitations imposed by the sandbox:</p> Function Description <code>get(obj,prop)</code> This is a special function to handle accessing properties in lieu of the <code>[]</code> operator. Calling <code>get(obj,prop)</code> is equivalent to <code>obj[prop]</code>. <code>set(obj,prop,value)</code> This is a special function to handle modifying properties in lieu of the <code>[]</code> operator. Calling <code>set(obj,prop,value)</code> is equivalent to <code>obj[prop]=value</code>. <code>forEach(obj,func)</code> This is a special function to iterate through all the properties in an object, or items in an array. For each item, the <code>func</code> function is called with the item as the first argument, the index as the second object, and the obj as the third object. <p>The following functions for DOM manipulation and extra language features are provided by the Dojo Toolkit library. This represents a safe subset of Dojo. All Dojo library functions are provided as top-level functions. Namespacing is unnecessary because scripts do have access to modify the global object and can't define global variables. Thus, you can call Dojo functions directly, for example, you can call <code>mixin(obj,mixinObj)</code>. You might also use the traditional syntax (<code>dojox.mixin(...)</code>). Available functions include:</p> <ul> <li><code>mixin</code></li> <li><code>require</code></li> <li><code>isString</code></li> <li><code>isArray</code></li> <li><code>isFunction</code></li> <li><code>isObject</code></li> <li><code>isArrayLike</code></li> <li><code>isAlien</code></li> <li><code>hitch</code></li> <li><code>delegate</code></li> <li><code>partial</code></li> <li><code>trim</code></li> <li><code>connect</code></li> <li><code>disconnect</code></li> <li><code>subscribe</code></li> <li><code>unsubscribe</code></li> <li><code>Deferred</code></li> <li><code>toJson</code></li> <li><code>fromJson</code></li> <li><code>style</code></li> <li><code>attr</code></li> <li><code>query</code> - This only searches within the sandbox.</li> <li><code>byId</code></li> <li><code>body</code> - This returns the root element of the sandbox.</li> </ul>"},{"location":"ref_jsapi_javascript_security.html#disabling-javascript-security","title":"Disabling JavaScript Security","text":"<p>Under some circumstances, the limitations imposed by the dojox.secure library might be too restrictive. Therefore, the dojox.secure library can be disabled server-wide by editing a Java\u2122 properties file called Leap_config.properties in the extensions directory (C:\\HCL\\Leap\\extensions on Windows\u2122, /opt/HCL/Leap/extensions on Linux\u2122). Set the value of the ibm.nitro.ApplicationCompilerService.secureJS key to false. Once the properties file is changed, the HCL Leap server should be restarted to ensure that the configuration takes effect. For more information, see Configuring the properties file.</p> <p>Note: Changing this configuration setting to false should only be done if all the app authors on the server are known trusted users. Disabling JavaScript Security on a deployment of Leap that allows unvetted users to create applications could pose a serious security risk.</p> <p>It should be noted that changes to this configuration setting are only applied to running applications when they are redeployed. </p> <p>Parent topic: Reference Objects and Functions</p>"},{"location":"ref_jsapi_objects_and_functions.html","title":"Reference Objects and Functions","text":"<p>Describes the Functions available on different parts of the HCL Leap object model.</p> <ul> <li>Interface objects The following topics describe and gives samples for interface objects that are used within the HCL Leap JavaScript\u2122 API.</li> <li>Data objects This topic describes and gives samples for data objects used within the HCL Leap JavaScript\u2122 API.</li> <li>JavaScript Security The dojox.secure library is used to restrict the JavaScript\u2122-provided clients to a safe sandbox so they cannot do anything malicious. However, this imposes a number of limitations.</li> </ul> <p>Parent topic: JavaScript API</p>"},{"location":"ref_jsapi_page_events.html","title":"Page Events","text":"<p>This topic describes the Page Events, and their parameters when using JavaScript\u2122 API in HCL Leap.</p> <p>There are many events available to hook into on a page that are accessed from the page Edit Properties dialog.</p>"},{"location":"ref_jsapi_page_events.html#javascripttm-objects","title":"JavaScript\u2122 objects","text":"Variable Full name Description Example Type app Application object Contains functions for accessing global general information <code>app.isSingleFormView()</code> GUI form Form object For accessing the pages and controlling page navigation <code>form.getPage('P_Page1');</code> GUI page Page object For accessing the Page and the items on it <code>page.F_Text.setContent('This a Label');</code> GUI BO Business Object object Top-level data object for the form <code>BO.F_Username.getValue();</code> DATA"},{"location":"ref_jsapi_page_events.html#page-events_1","title":"Page Events","text":""},{"location":"ref_jsapi_page_events.html#onhide","title":"onHide","text":"<p>Called when the page is hidden. This is usually a result of page navigation.</p>"},{"location":"ref_jsapi_page_events.html#onnavigateaway","title":"onNavigateAway","text":"<p>Called as the page is about to be switched away from this one. A pAllowSwitch variable is passed to this event that contains the following three properties:</p> <ul> <li>allow. Possible values are true, false and user-choice. Setting this property to false cancels the page switch.  Setting to user-choice will allow the user to continue despite any validation errors.</li> <li>doValidation. Possible values are true or false.  Setting this property to false cancels the page validation.</li> <li>issues. A list of messages that can be added to the validation dialog.</li> </ul> <p>Example</p> <p>Cancel the page switch if a check box is not checked:</p> <pre><code>if(!BO.F_Agree.getValue())\n   pAllowSwitch.allow = false;\n</code></pre> <p>Include custom messages in the validation dialog:</p> <pre><code>pNavOptions.issues.push(\"Custom issue number 1\");\npNavOptions.issues.push(\"Custom issue number 2\");\npNavOptions.issues.push(\"Custom issue number 3\");\n</code></pre> <p>Allow the user to navigate away from the page even if there are validation errors:</p> <pre><code>pNavOptions.allowSwitch = 'user-choice';\n</code></pre> <p>Disable all page validation:</p> <pre><code>pNavOptions.doValidation = false;\n</code></pre>"},{"location":"ref_jsapi_page_events.html#onremovefromnavigation","title":"onRemoveFromNavigation","text":"<p>Called when this page is removed from navigation by calling the form.removePageFromNavigation() method for this page.</p>"},{"location":"ref_jsapi_page_events.html#onrestorefromnavigation","title":"onRestoreFromNavigation","text":"<p>Called when a page is restored to navigation by calling the form.restorePageNavigation() method for this page.</p>"},{"location":"ref_jsapi_page_events.html#onshow","title":"onShow","text":"<p>Called every time the page is shown. This includes when the form is first displayed and when the user navigates to the page. A good location to update any display items.</p> <p>Note: When a form is first opened, this event is only called on the current displayed page.</p> <p>Parent topic: Running Custom JavaScript \u2013 Events</p>"},{"location":"ref_jsapi_ref_data_objects.html","title":"Data objects","text":"<p>This topic describes and gives samples for data objects used within the HCL Leap JavaScript\u2122 API.</p>"},{"location":"ref_jsapi_ref_data_objects.html#business-object-bo","title":"Business Object (BO)","text":"<p>The object that contains all the data for an instance of a form.</p>"},{"location":"ref_jsapi_ref_data_objects.html#boitemid","title":"BO.&lt;itemId&gt;","text":"<p>Accesses the Business Object Attribute data for an individual item on the form.</p> <p>Syntax <pre><code>BO.itemId\n</code></pre></p> <p>Example</p> <p>Set the value of a number item on the form: <pre><code>BO.F_Age.setValue(12);\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getchildren","title":"getChildren","text":"<p>Returns a list object that provides access to all the individual Business Object Attribute data. The list object has getLength() function, and get(index) function for accessing the objects in the list.</p> <p>Syntax <pre><code>BO.getChildren()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getcurrentstage","title":"getCurrentStage","text":"<p>Returns the current stage of the form.</p> <p>Syntax <pre><code>BO.getCurrentStage()\n</code></pre></p> <p>Example</p> <p>If the form is in the Submitted stage then show the user a custom message in the onLoad:</p> <pre><code>if(BO.getCurrentStage() === 'ST_Submitted')\n    alert('Reminder: This form is complete and cannot be modified');\n</code></pre>"},{"location":"ref_jsapi_ref_data_objects.html#getdataid","title":"getDataId","text":"<p>Returns the unique ID that represents this data item or will represent it if it has never been submitted.</p> <p>Syntax <pre><code>BO.getDataId()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getinvalidmessages","title":"getInvalidMessages","text":"<p>This function returns an array of the error messages of any invalid fields in the form. If there are no invalid fields, the function returns an empty array.</p> <p>Syntax <pre><code>BO.getInvalidMessages()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getvalid","title":"getValid","text":"<p>Returns the current value of the overridden valid state of the form as set by BO.setValid().</p> <p>Syntax <pre><code>BO.getValid()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#isvalid","title":"isValid","text":"<p>Returns true if every field in the form is valid and false otherwise. This is different from getValid() which returns the overridden valid state of the form as set by BO.setValid().</p> <p>Syntax <pre><code>BO.isValid()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#setvalid","title":"setValid","text":"<p>Changes the valid state of the object.</p> <p>Setting valid to \"false\" overrides the validity of the form and prevents submission, showing the user the message provided. </p> <p>Setting valid to \"true\" removes any previous override. However, it will not override other ways in which the form might be invalid.</p> <p>Syntax <pre><code>BO.setValid(valid, msg)\n</code></pre></p> <p>Parameters | Parameter     | Description | | :------------ | :---------- | | valid | True or false. | | msg | A string message to display when invalid |</p> <p>Example</p> <p>Place this code in the onItemChange event of a field to constrain the input to a specific value.</p> <pre><code>if(BOA.getValue() &lt; 15 || BOA.getValue() &gt; 35) {\n  BOA.setValid(false, \"The age must be between 16 and 35\");\n}\n</code></pre>"},{"location":"ref_jsapi_ref_data_objects.html#business-object-attribute-boa","title":"Business Object Attribute (BOA)","text":"<p>The object that contains the individual data mapped to items on the form.  'BOA' will return the business object for the item in scope where this is used.</p>"},{"location":"ref_jsapi_ref_data_objects.html#connectevent","title":"connectEvent","text":"<p>Used for connecting an event listener to a Business Object Attribute. You can define code to execute when the listener detects that the event is triggered. The only supported event for a Business Object Attribute is onChange.</p> <p>Note: If you connect an event, it must be disconnected using BOA.disconnectEvent(eventHandle).</p> <p>Syntax <pre><code>BOA.connectEvent (eventName, callbackFunction)\n</code></pre></p> <p>Parameters | Parameter     | Description | | :------------ | :---------- | | eventName     | Only supported event is 'onChange' | | callbackFunction | A function that is executed based on the service eventName |</p> <p>Example</p> <p>Place this in the onShow event of the field to display a message box when the item changes. <pre><code>var hdl = BOA.connectEvent(\"onChange\", function(newValue)\n{\n   alert(\"Field content is \" + newValue);\n   BOA.disconnectEvent(hdl);\n});\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#disconnectevent","title":"disconnectEvent","text":"<p>Disconnects the event handler specified by the passed-in event handle object that was returned by a BOA.connectEvent call. </p> <p>If you create a listener in the event of a form object, you must disconnect it. Otherwise, duplicate listeners are created every time the event is triggered.</p> <p>Syntax <pre><code>BOA.disconnectEvent (eventHandle)\n</code></pre></p> <p>Example <pre><code>var hdl = BOA.connectEvent(\"onChange\", function (newValue)\n{\n   alert(\"Field content is \" + newValue);\n   BOA.disconnectEvent(hdl);\n});\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getbo","title":"getBO","text":"<p>Returns the Business Object for the entire form.</p> <p>Syntax <pre><code>BOA.getBO()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getid","title":"getId","text":"<p>Returns the ID of this data item that is unique per form.</p> <p>Syntax <pre><code>BOA.getId()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getinvalidmessage","title":"getInvalidMessage","text":"<p>Returns the current error messages for this data, or null if the data is valid.</p> <p>Syntax <pre><code>BOA.getInvalidMessage()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getrequired","title":"getRequired","text":"<p>Gets a value set previously using setRequired().</p> <p>Syntax <pre><code>BOA.getRequired()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#gettype","title":"getType","text":"<p>Returns a string that indicates the type of data. For example, string, number, boolean, currency, time, date, timeStamp, or attachment.</p> <p>Syntax <pre><code>BOA.getType()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getvalid_1","title":"getValid","text":"<p>Gets a value set previously using setValid().</p> <p>Syntax <pre><code>BOA.getValid()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getvalue","title":"getValue","text":"<p>Returns the current value. The type of the returned value depends on the type of item.    - Boolean: Checkbox    - Number : Number, Currency, Numeric Slider    - Date: Date, Time, Timestamp    - Object: Attachment    - Multi-Value String: Select Many, Survey Question (when \"Allow selection of multiple values\" checked). Values will be delimited with \"#\"    - String: All other items</p> <p>Syntax <pre><code>BOA.getValue()\n</code></pre></p> <p>Example</p> <p>In the onItemChange event of 'F_SingleLine1' you could write the following to get its value <pre><code>BOA.getValue()\n</code></pre></p> <p>Other ways to get the same value: <pre><code>// app level scope\napp.getForm('F_Form1').getBO().F_SingleLine1.getValue();\n\n// form level scope\nform.getBO().F_SingleLine1.getValue();\n\n// page level scope\npage.F_SingleLine1.getValue();\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#ismissing","title":"isMissing","text":"<p>Returns true if this item is required and it has no value.</p> <p>Syntax <pre><code>BOA.isMissing()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#isrequired","title":"isRequired","text":"<p>Returns true if this item is required.</p> <p>Syntax <pre><code>BOA.isRequired()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#isvalid_1","title":"isValid","text":"<p>Returns true if the data is valid. Returns false if the data is invalid.</p> <p>Syntax <pre><code>BOA.isValid()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#setrequired","title":"setRequired","text":"<p>You can override non-required data to be required with this method. By passing \"true\", you cause its data to be required and prevent submission if it is not set. Setting the valid to \"false\" clears any previously overridden value.</p> <p>Note: If a Business Object Attribute has been set as required by a property or by a Rule, you cannot make it \"unrequired\".</p> <p>Syntax <pre><code>BOA.setRequired(required)\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#setvalid_1","title":"setValid","text":"<p>You can override valid data to be invalid with this method. By passing \"false\", you cause the data to be invalid, and prevent submission. You can optionally provide a custom error message. Setting the valid to \"true\" clears any previously overridden valid value.</p> <p>Note: You cannot set a Business Object Attribute to valid which actually has invalid data, or is set invalid by a rule.</p> <p>Syntax <pre><code>BOA.setValid(valid, msg)\n</code></pre></p> <p>Example</p> <p>Force the user to enter more than 3 characters for their name by adding this code to the items onItemChange: <pre><code>if(BOA.getValue().length &lt; 3)\n   BOA.setValid(false, 'Name must be at least 3 characters');\nelse \n   BOA.setValid(true);\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#setvalue","title":"setValue","text":"<p>Sets the value of this data item. The correct data type should be provided based on the Business Object Attribute\u2019s type. Some type conversion is done where possible, for example, a Number converted to a String.</p> <p>Note: The attachment data takes an object with a uid property, an id property, and a filename property. Modifying attachment data is not recommended in most circumstances.</p> <p>Syntax <pre><code>BOA.setValue(value)\n</code></pre></p> <p>Parameters | Parameter     | Description | | :------------ | :---------- | | value | Value to set based on datatype of the item |</p> <p>Example <pre><code>//string\nBO.F_SingleLine1.setValue(\"Sample String\");\nBO.F_Paragraph1.setValue(\"Sample String\");\n\n//number or currency\nBO.F_Number1.setValue(25);\nBO.F_Currency1.setValue(123.65);\n\n//date or timestamp\nBO.F_Date1.setValue(new Date());\nBO.F_TimeStamp1.setValue(new Date());\n\n//boolean\nBO.F_CheckBox1.setValue(true);\n\n//object\nBO.F_Attachment1.setValue({uid: 'ccb92c12-d435-4288-baff-878d8d3c2923', id: '25', fileName: 'myfile.txt'}); \n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#validate","title":"validate","text":"<p>Triggers the validation of the data item.</p> <p>Syntax <pre><code>BOA.validate()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#business-object-list-for-lists-of-business-objects","title":"Business Object List for lists of Business Objects","text":"<p>This object contains a list of Business Objects. It provides data to Table items rather than the standard Business Object Attribute. Each entry in the table corresponds to a Business Object in the list.</p>"},{"location":"ref_jsapi_ref_data_objects.html#add","title":"add","text":"<p>Adds a Business Object of the appropriate type to the list. Can be one created with a call to the createNew() method or removed from the list with a remove() call.</p> <p>Syntax <pre><code>BOL.add(bo)\n</code></pre></p> <p>Parameters</p> Parameter Description bo The business object for the row <p>Example <pre><code>var tbl = BO.F_Table1;\nvar tmpRow = tbl.createNew();\ntmpRow.F_SingleLine1.setValue(\"1\");\ntbl.add(tmpRow);\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#createnew","title":"createNew","text":"<p>Creates a new empty Business Object ready to be inserted into the list using the add() method.</p> <p>Syntax <pre><code>BOL.createNew()\n</code></pre></p> <p>Example <pre><code>var tbl = BO.F_Table1;\nvar tmpRow = tbl.createNew();\ntmpRow.F_SingleLine1.setValue(\"1\");\ntbl.add(tmpRow);\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#get","title":"get","text":"<p>Returns the Business Object at the specified index.</p> <p>Syntax <pre><code>BOL.get(index)\n</code></pre></p> <p>Parameters</p> Parameter Description index The index of the BO in this list.  Starting at 0."},{"location":"ref_jsapi_ref_data_objects.html#getbyid","title":"getById","text":"<p>Returns the Business Object with the given ID</p> <p>Syntax <pre><code>BOL.getById(boId)\n</code></pre></p> <p>Parameters</p> Parameter Description boId The ID of the BO in this list."},{"location":"ref_jsapi_ref_data_objects.html#getid_1","title":"getId","text":"<p>Returns the ID of this data item that is unique per form.</p> <p>Syntax <pre><code>BOL.getId()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getlength","title":"getLength","text":"<p>Returns the number of Business Objects in the list.</p> <p>Syntax <pre><code>BOL.getLength()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getrequired_1","title":"getRequired","text":"<p>Gets a value set previously using setRequired().</p> <p>Syntax <pre><code>BOL.getRequired()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#gettype_1","title":"getType","text":"<p>Returns a string that indicates the type of Business Object List data.</p> <p>Syntax <pre><code>BOL.getType()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#getvalid_2","title":"getValid","text":"<p>Gets a value set previously using setValid().</p> <p>Syntax <pre><code>BOL.getValid()\n</code></pre></p>"},{"location":"ref_jsapi_ref_data_objects.html#remove","title":"remove","text":"<p>Removes the Business Object from the list. Returns true if successful, false if not.</p> <p>Syntax <pre><code>BOL.remove(bo)\n</code></pre></p> <p>Parameters</p> Parameter Description bo The business object for the row"},{"location":"ref_jsapi_ref_data_objects.html#setrequired_1","title":"setRequired","text":"<p>You can override non-required data to be required with this method. By passing true, you cause its data to be required and prevent submission if it is not set. Setting the valid to false clears any previously overridden value.</p> <p>Note: If a Business Object Attribute has been set as required by a property or by a Rule, you cannot make it \"unrequired\".</p> <p>Syntax <pre><code>BOL.setRequired(required)\n</code></pre></p> <p>Parameters</p> Parameter Description required True or False"},{"location":"ref_jsapi_ref_data_objects.html#setvalid_2","title":"setValid","text":"<p>You can override valid data to be invalid with this method. By passing false, you cause its data to be invalid and prevent submission. You can optionally provide a custom error message. Setting valid to true clears any previously overridden valid value.</p> <p>Note: You cannot set a Business Object List to valid that actually has invalid data, or is set invalid by a rule.</p> <p>Syntax <pre><code>BOL.setValid(valid, msg)\n</code></pre></p> <p>Parameters</p> Parameter Description valid True or False. msg A message to display if the object is invalid <p>Parent topic: Reference Objects and Functions</p>"},{"location":"ref_jsapi_running_custom_js_events.html","title":"Running Custom JavaScript \u2013 Events","text":"<p>Custom JavaScript\u2122 is run in response to events in the form. These events can be triggered at the application, form, page, and item level in response to form lifecycle changes, and to user interactions. A list of the events available, and how to interact with the form using them is shown in the following list.</p> <ul> <li>Application Events This topic describes the Application Events, and their parameters when using JavaScript API in HCL Leap.</li> <li>Form Events This topic describes the Form Events, and their parameters when using JavaScript API in HCL Leap.</li> <li>Page Events This topic describes the Page Events, and their parameters when using JavaScript API in HCL Leap.</li> <li>Item Events This topic describes the Item Events, and their parameters when using JavaScript API in HCL Leap.</li> </ul> <p>Parent topic: JavaScript API</p>"},{"location":"ref_jsapi_running_external_js_files.html","title":"Running Custom JavaScript Files","text":"<p>Custom JavaScript\u2122 can also be loaded from attached JavaScript files. Any .js file that is added to the application in the Settings &gt; Files section is automatically loaded into your running application. An associated JavaScript file is evaluated once when the browser first loads the running application, and is not called in response to any events.</p>"},{"location":"ref_jsapi_running_external_js_files.html#javascripttm-objects","title":"JavaScript\u2122 objects","text":""},{"location":"ref_jsapi_running_external_js_files.html#app","title":"app","text":"<p>Contains functions for accessing global general information</p> <p>Example</p> <p>A common use case for external .js files is utility methods to be executed later in events by custom JavaScript. One example is a function to sum up all Number values in a section:</p> <pre><code>app.getSharedData().sumNumbers = function(section)\n{\n    var total = 0;\n    var children = section.getChildren();\n    for(var i=0; i&lt;children.getLength(); i++)\n    {\n        var child = children.get(i);\n        if(child.getType() === 'number')\n            total += child.getBOAttr().getValue();\n    }\n    return total;\n};\n</code></pre> <p>Then from an event where you want to sum all numbers in a section:</p> <pre><code>var sub = app.getSharedData().sumNumbers(page.F_Expense);\n</code></pre> <p>When JavaScript security is enabled: For added security, external JavaScript files that are referenced by URL do not load into the running application. Uploaded JavaScript files are evaluated in a safe sandbox and all content must adhere to the restrictions of the sandbox. See JavaScript Security for more details. For example, functions must be defined by using the following format: <code>app.getSharedData().blat = function (...) { ... }</code></p> <p>When JavaScript security is disabled: External JavaScript files that are referenced by URL are loaded by using a <code>&lt;script&gt;</code> tag and does not have access to the app variable. These scripts must use <code>window.NitroApplication</code> to access the Leap API functions. JavaScript files that are uploaded to the application are evaluated by using the <code>eval()</code> function.</p> <p>Parent topic: JavaScript API</p>"},{"location":"ref_jsapi_user_interface_objects.html","title":"Interface objects","text":"<p>The following topics describe and gives samples for interface objects that are used within the HCL Leap JavaScript\u2122 API.</p> <p>Note: When you use JavaScript to modify form items, the change appears only in the user interface, it does not persist to the submitted data. The user completing the form sees the modifications that are made by your JavaScript, however a user reviewing submitted data sees the original form items. If you want the changes to appear in the form any time it is viewed, the JavaScript must be attached to events that run each time that the form is opened.</p> <ul> <li> <p>Application objects </p> </li> <li> <p>Form objects </p> </li> <li> <p>Page and App Page objects </p> </li> <li> <p>Item objects </p> </li> <li> <p>Other objects </p> </li> </ul> <p>Parent topic: Reference Objects and Functions</p>"},{"location":"ref_other_objects.html","title":"Other objects","text":""},{"location":"ref_other_objects.html#service-configuration-object","title":"Service Configuration Object","text":"<p>This object represents a mapped service in the form and is retrieved using <code>form.getServiceConfiguration()</code>.</p>"},{"location":"ref_other_objects.html#callservice","title":"callService","text":"<p>Executes the service.</p> <p>Syntax <pre><code>service.callService()\n</code></pre></p> <p>Example <pre><code>var serviceConfig = form.getServiceConfiguration('SC_ServiceConfig');\nserviceConfig.callService();\n</code></pre></p>"},{"location":"ref_other_objects.html#connectevent","title":"connectEvent","text":"<p>The only supported event is  onCallFinished, which is called every time after the service mapping is executed. It is passed two parameters:   - pSuccess, which indicates whether the service call succeeded.   - pErrorObj, which is a JSON object (<code>{code: '', message: '', handled: ''}</code>) that contains details about the error (if thrown).</p> <p>If the error is being handled by javascript, setting <code>pErrorObj.handled = true</code> will suppress the error dialog.</p> <p>Resister these events in the Applications  **onStart ** event so that they are only registered once.</p> <p>Syntax <pre><code>service.connectEvent (eventName, callbackFunction)\n</code></pre></p> <p>Parameters</p> Parameter Description eventName Only supported event is 'onCallFinished' callbackFunction A function that is executed based on the service eventName <p>Example <pre><code>var form = app.getForm('F_Form1');\nvar serviceConfig = form.getServiceConfiguration('SC_ServiceConfig');\nserviceConfig.connectEvent('onCallFinished', function(pSuccess, pErrorObj)\n {\n  if (pSuccess) {\n    //do something when service is done\n  } else {    \n    //do something with the error\n    form.getBO().F_Error.setValue(pErrorObj.code + ': ' + pErrorObj.message); \n    pErrorObj.handled = true; //suppress error dialog\n  }\n});\n</code></pre></p>"},{"location":"ref_other_objects.html#disconnectevent","title":"disconnectEvent","text":"<p>Disconnects the event handler specified by the passed-in event handle object that was returned by a  service.connectEvent call. </p> <p>To avoid duplicate event handlers being connected, connect to events from within the application  onStart ** or form  onLoad** events. </p> <p>If you connect to an event outside of these two events, you should explicitly disconnect from the event using the  disconnectEvent method.</p> <p>Syntax <pre><code>service.disconnectEvent (eventHandle)\n</code></pre></p> <p>Parameters</p> Parameter Description eventHandle The object returned from the service.connectEvent call <p>Example <pre><code>var form = app.getForm('F_Form1');\nvar serviceConfig = form.getServiceConfiguration('SC_ServiceConfig');\nvar serviceHdl = serviceConfig.connectEvent('onCallFinished', function(pSuccess, pErrorObj)\n {\n  if (pSuccess) {\n    //do something when service is done\n  }\n  serviceConfig.disconnectEvent(serviceHdl);\n});\n</code></pre></p>"},{"location":"ref_other_objects.html#stage-action-button-object","title":"Stage Action Button Object","text":"<p>Represents an action button that is retrieved by calling <code>form.getStageActions()</code>.</p>"},{"location":"ref_other_objects.html#activate","title":"activate","text":"<p>Triggers this button, which cancels, submits or saves a draft of the form.</p> <p>Note: If a button is hidden by a Rule, you can try and activate it; however, the server will reject the submission.</p> <p>Syntax <pre><code>action.activate()\n</code></pre></p> <p>Example <pre><code>var actionButtons = form.getStageActions();\nfor (var i=0; i&lt;actionButtons.length; i++) {\n   var actionButton = get(actionButtons, i);\n   if (actionButton.getId() === 'S_Cancel') {\n      actionButton.activate();\n   }\n}\n</code></pre></p>"},{"location":"ref_other_objects.html#addclasses","title":"addClasses","text":"<p>Adds a list of custom class names to an action for dynamic CSS styling. </p> <p>If any of the given class names are invalid CSS class names, then no classes are added and false is returned.</p> <p>Syntax <pre><code>action.addClasses(classes)\n</code></pre></p> <p>Parameters</p> Parameter Description classes Single class name, a list of CSS class names separated by spaces or an array of class names <p>Example <pre><code>action.addClasses('emphasized error');\n</code></pre></p>"},{"location":"ref_other_objects.html#getactiontype","title":"getActionType","text":"<p>Returns a string that identifies the type of the button. Values are <code>'Cancel'</code>, <code>'Submit'</code>, and <code>'Save'</code>.</p> <p>Syntax <pre><code>action.getActionType()\n</code></pre></p>"},{"location":"ref_other_objects.html#getactive","title":"getActive","text":"<p>Returns true if this button is active, and false if it is disabled.</p> <p>Syntax <pre><code>action.getActive()\n</code></pre></p>"},{"location":"ref_other_objects.html#getclasses","title":"getClasses","text":"<p>Returns an Array of custom class names currently applied to an action.</p> <p>Syntax <pre><code>action.getClasses()\n</code></pre></p>"},{"location":"ref_other_objects.html#getid","title":"getId","text":"<p>Returns the unique ID (within the application) of this action button 'S_Submit'.</p> <p>Syntax <pre><code>action.getId()\n</code></pre></p>"},{"location":"ref_other_objects.html#gettitle","title":"getTitle","text":"<p>Returns the user-defined title of this button.</p> <p>Syntax <pre><code>action.getTitle()\n</code></pre></p>"},{"location":"ref_other_objects.html#getvisible","title":"getVisible","text":"<p>Returns true if this button is visible, or false if it is hidden by a rule or JavaScript\u2122.</p> <p>Syntax <pre><code>action.getVisible()\n</code></pre></p>"},{"location":"ref_other_objects.html#removeclasses","title":"removeClasses","text":"<p>Removes a list of custom class names from an action for dynamic CSS styling. The classes parameter can be a single class name, multiple class names separated by spaces, or an Array of class names.</p> <p>Syntax <pre><code>action.removeClasses (classes)\n</code></pre></p> <p>Example <pre><code>action.removeClasses('emphasized error');\n</code></pre></p>"},{"location":"ref_other_objects.html#setactive","title":"setActive","text":"<p>If active is true, then the button is made active. If false, the button is disabled.</p> <p>Syntax <pre><code>action.setActive(active)\n</code></pre></p>"},{"location":"ref_other_objects.html#setfocus","title":"setFocus","text":"<p>Causes this button to receive focus, if possible.</p> <p>Syntax <pre><code>action.setFocus()\n</code></pre></p>"},{"location":"ref_other_objects.html#settitle","title":"setTitle","text":"<p>Sets the title for the button.</p> <p>Syntax <pre><code>action.setTitle(title)\n</code></pre></p>"},{"location":"ref_other_objects.html#setvisible","title":"setVisible","text":"<p>Sets whether this action is visible.</p> <p>Note: If this item is made invisible by a rule, then you cannot unhide it by calling this function.</p> <p>Syntax <pre><code> action.setVisible(visible)\n</code></pre></p> <p>Parent topic: Interface objects</p>"},{"location":"ref_page_app_page_objects.html","title":"Page and App Page objects","text":""},{"location":"ref_page_app_page_objects.html#itemid","title":"itemId","text":"<p>Provides convenient direct access to all items on the page, including those inside Sections and Tab Folders.</p>"},{"location":"ref_page_app_page_objects.html#syntax","title":"Syntax","text":"<pre><code>page.&lt;itemId&gt;;\nappPage.&lt;itemId&gt;;\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example","title":"Example","text":"<p>Hide a specific button on the page:</p> <pre><code>page.F_NextButton.setVisible(false);\n</code></pre>"},{"location":"ref_page_app_page_objects.html#addclasses","title":"addClasses","text":"<p>Adds a list of custom class names to the page for dynamic CSS styling. The classes parameter can be a single class name, multiple class names separated by spaces, or an Array of class names. If any of the given class names are invalid CSS class names, then no classes are added and false is returned.</p>"},{"location":"ref_page_app_page_objects.html#syntax_1","title":"Syntax","text":"<pre><code>page.addClasses(classes)\nappPage.addClasses(classes)\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example_1","title":"Example","text":"<pre><code>page.addClasses('emphasized error');\n</code></pre>"},{"location":"ref_page_app_page_objects.html#connectevent","title":"connectEvent","text":"<p>Connects a function to an event on the page. The list of events is the same as for the page in the Design interface. Useful for utility functions defined in JavaScript\u2122 files to hook behavior into the page dynamically. Returns a handle object that represents the connection of the function to that event name. That handle can be used to disconnect this same event using page.disconnectEvent or appPage.disconnectEvent.</p>"},{"location":"ref_page_app_page_objects.html#syntax_2","title":"Syntax","text":"<pre><code>page.connectEvent(eventName,callbackFunction)\nappPage.connectEvent(eventName,callbackFunction)\n</code></pre>"},{"location":"ref_page_app_page_objects.html#disconnectevent","title":"disconnectEvent","text":"<p>Disconnects the event handler specified by the passed-in event handle object that was returned by a page.connectEvent or appPage.connectEvent call. To avoid duplicate event handlers being connected to pages, connect to page events from within the application onStart or form onLoad events. If you connect to a page event outside of these two events you should explicitly disconnect from the page event using the disconnectEvent method.</p>"},{"location":"ref_page_app_page_objects.html#syntax_3","title":"Syntax","text":"<pre><code>page.disconnectEvent(eventHandle)\nappPage.disconnectEvent (eventHandle)\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example_2","title":"Example","text":"<pre><code>var eventHdl = page.connectEvent(\"&lt;some event&gt;\", function(pSuccess, pErrorObj)\n {\n  if (pSuccess) {\n    //do something when service is done\n  }\n  page.disconnectEvent(eventHndl);\n});\n</code></pre>"},{"location":"ref_page_app_page_objects.html#getbo","title":"getBO","text":"<p>Returns the object that contains the Business Object data for the entire form.</p>"},{"location":"ref_page_app_page_objects.html#syntax_4","title":"Syntax","text":"<pre><code>page.getBO()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example_3","title":"Example","text":"<pre><code>var theBO = page.getBO();\ntheBO.F_SingleLine.setValue('new Value');\n</code></pre>"},{"location":"ref_page_app_page_objects.html#getchildren","title":"getChildren","text":"<p>Returns the list object that provides access to all direct children items for this page. For example, items in a Section on the page are not in the list, however the Section itself is. The list object has the getLength() function and get(index) function for accessing the objects in the list.</p>"},{"location":"ref_page_app_page_objects.html#syntax_5","title":"Syntax","text":"<pre><code>page.getChildren()\nappPage.getChildren()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example_4","title":"Example","text":"<p>Hide all button items on a page: <pre><code>var list = page.getChildren();\nfor (var i=0; i&lt;list.getLength(); i++) {\n   if list.get(i).getType() === 'button') {\n      list.get(i).setVisible(false);\n   }\n}\n</code></pre></p>"},{"location":"ref_page_app_page_objects.html#getclasses","title":"getClasses","text":"<p>Returns an Array of custom class names currently applied to the page.</p>"},{"location":"ref_page_app_page_objects.html#syntax_6","title":"Syntax","text":"<pre><code>page.getClasses()\nappPage.getClasses()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#getform","title":"getForm","text":"<p>Returns the form object to which this page belongs.</p>"},{"location":"ref_page_app_page_objects.html#syntax_7","title":"Syntax","text":"<pre><code>page.getForm()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#getid","title":"getId","text":"<p>Returns the unique ID, within the application, of this page. For example, P_Page1.</p>"},{"location":"ref_page_app_page_objects.html#syntax_8","title":"Syntax","text":"<pre><code>page.getId()\nappPage.getId()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#getserviceconfigurationids","title":"getServiceConfigurationIds","text":"<p>Returns an array of all the IDs for services mapped in this app page.</p>"},{"location":"ref_page_app_page_objects.html#syntax_9","title":"Syntax","text":"<pre><code>appPage.getServiceConfigurationIds()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example_5","title":"Example","text":"<pre><code>var serviceConfigs = appPage.getServiceConfigurationIds();\n</code></pre>"},{"location":"ref_page_app_page_objects.html#getserviceconfiguration","title":"getServiceConfiguration","text":"<p>Gets the service object for a particular service ID.</p>"},{"location":"ref_page_app_page_objects.html#syntax_10","title":"Syntax","text":"<pre><code>appPage.getServiceConfiguration (serviceId)\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example_6","title":"Example","text":"<p>Lookup and execute a service from JavaScript\u2122: <pre><code>var service = appPage.getServiceConfiguration('SC_ServiceConfig');\nservice.callService();\n</code></pre></p>"},{"location":"ref_page_app_page_objects.html#gettype","title":"getType","text":"<p>Returns a string identifying the object type. For example, \"page\".</p>"},{"location":"ref_page_app_page_objects.html#syntax_11","title":"Syntax","text":"<pre><code>page.getType()\nappPage.getType()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#getvisibility","title":"getVisibility","text":"<p>Returns true if the page is being shown, and false if it is hidden.</p>"},{"location":"ref_page_app_page_objects.html#syntax_12","title":"Syntax","text":"<pre><code>page.getVisibility()\n</code></pre>"},{"location":"ref_page_app_page_objects.html#removeclasses","title":"removeClasses","text":"<p>Removes a list of custom class names from the page for dynamic CSS styling. The classes parameter can be a single class name, multiple class names separated by spaces, or an Array of class names.</p>"},{"location":"ref_page_app_page_objects.html#syntax_13","title":"Syntax","text":"<pre><code>page.removeClasses(classes)\nappPage.removeClasses(classes)\n</code></pre>"},{"location":"ref_page_app_page_objects.html#example_7","title":"Example","text":"<pre><code>page.removeClasses('emphasized error');\n</code></pre> <p>Parent topic: Interface objects</p>"},{"location":"ref_rest_api_auto_deploy.html","title":"Application management REST API","text":"<p>The Application management REST API allows for programmatic import, export, upgrade, and delete of Leap applications.</p>"},{"location":"ref_rest_api_auto_deploy.html#authentication","title":"Authentication","text":"<p>To get the Swagger definition for the Application management REST API, use /apps-basic/anon|secure/org/app/swagger.json</p> <p>All REST API calls must be made as an authenticated user. If you want to exercise the API with code, then, you can use basic authentication. The authenticated user must be a valid user of Leap and must have the appropriate permission. The primary mechanism is to use basic authentication where the username and password are a Base64 encoded string.</p>"},{"location":"ref_rest_api_auto_deploy.html#rest-actions","title":"REST actions","text":"<p>The following table lists the types of actions that are available and the URLs associated with those actions.</p> URL HTTP Verb Header Action Name /apps-basic/secure/org/app/app-uid/archive?mode=source&amp;submitted=true GET Export /apps-basic/secure/org/app/app-uid/archive?replaceEmbeddedData=on&amp;runDatabaseUpgradeNow=on&amp;replaceSubmittedData=on&amp;freedomIdentifyKey=x POST Upgrade /apps-basic/secure/org/app?deploy=false&amp;importData=false&amp;freedomIdentifyKey=x POST Import /apps-basic/secure/org/app/app-uid?freedomIdentifyKey=x DELETE Delete /apps/secure/org/app/app-uid/archive/exportAppToFile?filePath=serverPath&amp;exportData=false\" GET ExportAppToFile /apps/secure/org/app/importAppFromFile POST ImportAppFromFile"},{"location":"ref_rest_api_auto_deploy.html#export","title":"Export","text":"<p>Exports the defined application as a .nitro_s file. You can use the following parameters to export the application:</p>"},{"location":"ref_rest_api_auto_deploy.html#submittedtrue","title":"<code>submitted=true</code>","text":"<p>Can be set to true or false. true returns the application and all submission data that exists in the application.</p> <p>Note: If no value is passed, then the default is true.</p>"},{"location":"ref_rest_api_auto_deploy.html#upgrade","title":"Upgrade","text":"<p>Allows the user to upgrade the content of an application to match the application that is contained in the POST request. You can use the following parameters to upgrade the application:</p>"},{"location":"ref_rest_api_auto_deploy.html#replacesubmitteddataoff","title":"<code>replaceSubmittedData=off</code>","text":"<p>Can be on or off. on replaces the existing submission data with the submission data contained in the application being uploaded.</p> <p>Note: The default for replaceSubmittedData is off.</p>"},{"location":"ref_rest_api_auto_deploy.html#freedomidentifykeyx","title":"<code>freedomIdentifyKey=x</code>","text":"<p>The value of x, must be a randomly generated, difficult to guess, single-use numerical value. The value of this URL parameter must match the value of the freedomIdentifyKey cookie. Requiring a cookie value that matches the URL parameter helps avoid possible browser vulnerabilities. See Data REST API Delete for more information.</p> <p>The upgraded application must be uploaded to the server as multipart/form-data in the body of the POST.</p>"},{"location":"ref_rest_api_auto_deploy.html#import","title":"Import","text":"<p>Imports the specified application into the Leap server. The user that performs the import is automatically added as an administrator. You can use the following parameters to import the application:</p>"},{"location":"ref_rest_api_auto_deploy.html#deployfalse","title":"<code>deploy=false</code>","text":"<p>Can be set to true or false. true automatically deploys the application as part of the import.</p> <p>Note: The default is false.</p>"},{"location":"ref_rest_api_auto_deploy.html#importdatafalse","title":"<code>importData=false</code>","text":"<p>Can be set to true or false. true imports the submission data, or submitted records, if they were included when the application was exported.</p> <p>Note: The default is false.</p>"},{"location":"ref_rest_api_auto_deploy.html#cleanidsfalse","title":"<code>cleanIds=false</code>","text":"<p>Can be set to true or false. true removes all groups and users from roles within the imported application ensuring that only the current authenticated user has access to the application.</p> <p>Note: The default is false.</p>"},{"location":"ref_rest_api_auto_deploy.html#freedomidentifykeyx_1","title":"<code>freedomIdentifyKey=x</code>","text":"<p>The value of x, must be a randomly generated, difficult to guess, single-use numerical value. The value of this URL parameter must match the value of the freedomIdentifyKey cookie. Requiring a cookie value that matches the URL parameter helps avoid possible browser vulnerabilities. See Data REST API Delete for more information.</p> <p>The application to be imported must be uploaded to the server as multipart/form-data.</p>"},{"location":"ref_rest_api_auto_deploy.html#delete","title":"Delete","text":"<p>Deletes the specified application from the server.</p>"},{"location":"ref_rest_api_auto_deploy.html#freedomidentifykeyx_2","title":"<code>freedomIdentifyKey=x</code>","text":"<p>The value of x, must be a randomly generated, difficult to guess, single-use numerical value. The value of this URL parameter must match the value of the freedomIdentifyKey cookie. Requiring a cookie value that matches the URL parameter helps avoid possible browser vulnerabilities. See Data REST API Delete for more information.</p>"},{"location":"ref_rest_api_auto_deploy.html#export-app-to-file","title":"Export App To File","text":"<p>If you have a Leap application that is very large (i.e. lots of submitted records and/or lots of attachments), then you may want to have your admin export the application directly to the server file system.  Saving the file directly to the server will avoid browser or HTTP time-outs that you might experience with large files.</p> <p>This endpoint is only accessible by users in the AdministrativeUsers security role.</p>"},{"location":"ref_rest_api_auto_deploy.html#filepathx","title":"<code>filePath=x</code>","text":"<p>The value of x must be a valid local path on the Leap server.</p>"},{"location":"ref_rest_api_auto_deploy.html#exportdatafalse","title":"<code>exportData=false</code>","text":"<p>Can be set to true or false. If true, all the data will be extracted with the application.</p> <p>The instruction can be issued from a browser where Leap is loaded.  Using the browser console enter the content as:</p> <pre><code>dojo.xhrGet({ \n  url : \"../app/&lt;appid&gt;/archive/exportAppToFile?filePath=&lt;exportPathOnServer&gt;&amp;exportData=&lt;true/false&gt;\" \n});\n</code></pre> <p>The application will be exported, there will be no confirmation message returned by the endpoint.</p>"},{"location":"ref_rest_api_auto_deploy.html#import-app-from-file","title":"Import App From File","text":"<p>If you have a Leap application that is very large (i.e. lots of submitted records and/or lots of attachments), then you may want to have your admin import the application directly from the server file system.  Loadin the file directly from the server will avoid browser or HTTP time-outs that you might experience with large files.</p> <p>This endpoint is only accessible by users in the AdministrativeUsers security role.</p>"},{"location":"ref_rest_api_auto_deploy.html#request-body","title":"<code>request-body</code>","text":"<p>The request body must be a JSON object.</p> <pre><code>{ \n    \"filePath\" : \"/apps/feb/_export_import/MyApp.nitro_s\",\n    \"cleanIds\" : false,\n    \"deploy\" : true,\n    \"importData\" : true\n}\n</code></pre> <ul> <li>filePath. The local path on the Leap server where the app resides</li> <li>cleanIds. Valid values are true and false.  If true, all user and groups will be purged from roles within the app</li> <li>deploy. Valid values are true and false.  If true, the app will be deployed.</li> <li>importData. Valid values are true and false. If true, the app data will be imported.</li> </ul> <p>The instruction can be issued from a browser where Leap is loaded.  Using the browser console enter the content as:</p> <pre><code>importFileData = { \n    \"filePath\" : \"/apps/feb/_export_import/MyApp.nitro_s\",\n    \"cleanIds\" : false,\n    \"deploy\" : true,\n    \"importData\" : true\n};  \ndojo.xhrPost({\n    postData : JSON.stringify(importFileData),\n    url : \"../app/importAppFromFile\",\n    headers : { \"Accept\": \"application/json\", \"Content-Type\" : \"application/json\"}\n});\n</code></pre> <p>The application will be imported, there will be no confirmation message returned by the endpoint.  Refresh the Manage page to see the application once the import is complete.</p>"},{"location":"ref_rest_api_auto_deploy.html#basic-application-flow","title":"Basic Application Flow","text":"<p>This is the basic flow of an application communicating with the Leap REST API:</p> <ol> <li>Establish a URLConnection with the URL that matches the action you want.</li> <li>Set the basic authentication credentials into the URLConnection.</li> <li>Set extra headers or body content if required for the action.</li> <li>Process the response.</li> </ol> <p>Parent topic: REST API reference</p>"},{"location":"ref_rest_api_ref.html","title":"REST API reference","text":"<p>The REST API can be used by other programs to communicate with Leap.</p> <p>To get the Swagger definition for all REST APIs, use /apps-basic/anon/org/api/swagger.json.</p> <ul> <li>Data access REST API The data access REST API exposes operations on application submitted data, also known as records.</li> <li>Application management REST API The Application management REST API allows for programmatic import, export, upgrade, and delete of Leap applications.</li> <li>Application statistics REST API Application statistics REST API exposes statistics data on all applications, such as an application's last updated date, record count, attachment size etc.</li> </ul> <p>Parent topic: Reference</p>"},{"location":"ref_send_email.html","title":"Send Email service","text":"<p>This topic provides reference information on the Send Email service in HCL Leap.</p>"},{"location":"ref_send_email.html#section_jkm_qck_d1c","title":"Purpose","text":"<p>The Send Email service provides a mechanism to send an email from a Leap application. The service enables an application author to bind fields from their form to the parameters of the service and it can be executed at any time, which is what distinguishes it from the submit activity email functionality (which can only be sent as part of a submit event).</p> <p>This feature is disabled by default and must be enabled by the administrator. To enable this service, add (or modify) the following property in the Leap_config.properties:</p> <pre><code>ibm.nitro.NitroConfig.enableEmailService=true\n</code></pre> <p>Leap does not need to be restarted, but it may take a few minutes for the service to appear in the authoring environment.</p>"},{"location":"ref_send_email.html#section_qgm_tck_d1c","title":"Service parameters","text":"Parameter Definition To One or more addresses to be used as the primary email target. CC One or more addresses to which the email will be sent as cc. BCC One or more addresses to which the email will be sent as bcc. Reply To The email address to be shown as the reply to address. Subject The text to be used for the email subject. Text Content Plain text content to be used for the email body. HTML Content HTML content to be used for the email body. Note: Both the plain text and html content are sent as part of the email if specified. It is up to the rendering email client to decide how and when to use the content provided."},{"location":"ref_send_email.html#section_hwm_zck_d1c","title":"Advanced service parameters","text":"<p>To access the advanced service parameters, select Advanced from the drop-down labelled View on the Inputs tab.</p> Parameter Definition To List This is a list parameter that can be connected to a list form item, like a table, to enable multiple addresses to be assigned to the email \u2018To\u2019 field. CC List This is a list parameter that can be connected to a list form item, like a table, to enable multiple addresses to be assigned to the email \u2018CC\u2019 field. BCC List This is a list parameter that can be connected to a list form item, like a table, to enable multiple addresses to be assigned to the email \u2018BCC\u2019 field."},{"location":"ref_send_email.html#section_zvw_cdk_d1c","title":"How to use","text":"<p>To use this service, complete the following steps while editing an application:</p> <ol> <li>Select Settings.</li> <li>Create a service configuration.</li> <li>Select the General service catalog.</li> <li>From the list of services, select Send Email.</li> <li>Map form items to the email service parameters</li> <li>On the Details tab, define a meaningful service id..</li> <li>Click OK.</li> </ol> <p>The service is then listed on the services page for that form. This service can be connected to a button click event or triggered from any item\u2019s javaScript event. You can also setup an \u2018onCallFinished\u2019 handler to run custom javaScript code after the service completes.</p>"},{"location":"ref_send_email.html#section_gx3_ndk_d1c","title":"Possible response values","text":"<p>The service does not return any parameters. The service could throw the following errors:</p> Error message *Definition* CLFNI1803E: Email must define at least one address ('to', 'cc' or 'bcc'). If the to, cc and bcc are empty CLFNI1804E: Email body may not be empty. If the text content and the html content are empty CLFNI1805E: Failed to send email. If an error is received from the mail server configured with Leap. <p>Parent topic: Services</p>"},{"location":"ref_service_basic_credentials_provider.html","title":"Basic Credentials Provider","text":"<p>This topic describes Basic Credentials Providers used within a Service Description.</p>"},{"location":"ref_service_basic_credentials_provider.html#purpose-of-the-basic-credentials-provider","title":"Purpose of the Basic Credentials Provider","text":"<p>The Basic Credentials Provider provides a mechanism that allows user name and password credentials to be gathered, and provided to a Service Transport. The credentials that are gathered are specific to a single user session with HCL Leap. These credentials are not shared between multiple sessions and are not accessible to other users or administrators of Leap.</p>"},{"location":"ref_service_basic_credentials_provider.html#when-to-use-the-basic-credentials-provider","title":"When to use the Basic Credentials Provider","text":"<p>When a Service Description needs a set of credentials and the credentials vary based on the user invoking the service call, use the Basic Credentials Provider.</p>"},{"location":"ref_service_basic_credentials_provider.html#how-to-configure-the-basic-credentials-provider","title":"How to Configure the Basic Credentials Provider","text":"<p>In general, the Basic Credentials Provider does not need any custom configuration to work. By configuring the Service Description to use the Basic Credentials Provider, Leap collects credentials, and makes them available to the Service Transport configured in the Service Description.</p>"},{"location":"ref_service_basic_credentials_provider.html#sharing-credentials-between-service-descriptions","title":"Sharing Credentials Between Service Descriptions","text":"<p>In some cases, several Service Descriptions might need to share a set of user credentials. Instead of having the user enter their credentials once per service, the Basic Credentials Provider can be configured to allow multiple Service Descriptions to share user-entered credentials using a realm.</p> <p>The realm is a property of the Basic Credentials Provider. Its value is the name of the realm to which entered credentials are associated. When multiple Service Descriptions share the realm value, they share the set of credentials.</p>"},{"location":"ref_service_basic_credentials_provider.html#using-the-basic-credentials-provider-in-a-service-description","title":"Using the Basic Credentials Provider in a Service Description","text":"<p>The provider ID for the Basic Credentials Provider to enter in a Service Description is: basic</p>"},{"location":"ref_service_basic_credentials_provider.html#credentials-provider-parameters","title":"Credentials Provider Parameters","text":"Name Description Mandatory Default realm The name of the realm to use to associate entered credentials so that they can be shared between multiple Service Descriptions. No N/A"},{"location":"ref_service_basic_credentials_provider.html#sample-service-description","title":"Sample Service Description","text":"<pre><code>&lt;serviceDescription&gt;\n  &lt;id&gt;make-http-request&lt;/id&gt;\n  &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n  &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n  &lt;name xml:lang=\"en-us\"&gt;Make an HTTP Request&lt;/name&gt;\n  &lt;description xml:lang=\"en-us\"&gt;Makes an HTTP request to the configured URL and returns the result&lt;/description&gt;\n  &lt;credentials providerId=\"basic\"&gt;\n    &lt;property name=\"realm\" value=\"myRealm\" /&gt;\n  &lt;/credentials&gt;\n  &lt;inbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;request-url&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;URL&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;URL to request.&lt;/description&gt;\n        &lt;mandatory&gt;true&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;request-method&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;Method&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;HTTP method to use, one of GET, PUT, POST, or DELETE.&lt;/description&gt;\n        &lt;mandatory&gt;true&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n  &lt;/inbound&gt;\n  &lt;outbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;response-entity&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;Response&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;Response returned by making a request to the configured URL.&lt;/description&gt;\n        &lt;mandatory&gt;false&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n  &lt;/outbound&gt;\n&lt;/serviceDescription&gt;\n</code></pre> <p>Parent topic: Services</p>"},{"location":"ref_service_cookie_credentials_provider.html","title":"Cookie Credentials Provider","text":"<p>This topic describes Cookie Credentials Provider used within a Service Description.</p>"},{"location":"ref_service_cookie_credentials_provider.html#purpose-of-the-cookie-credentials-provider","title":"Purpose of the Cookie Credentials Provider","text":"<p>The Cookie Credentials Provider provides a mechanism through which cookies between the Leap and the web browser can be made available to a Service Transport.</p>"},{"location":"ref_service_cookie_credentials_provider.html#when-to-use-the-cookie-credentials-provider","title":"When to use the Cookie Credentials Provider","text":"<p>The Cookie Credentials Provider is used when Leap and the endpoint of a Service share common Single Sign-On (SSO) credentials.</p> <p>For example, Leap and a service application are installed into the same SSO domain configured using Lightweight Third-Party Authentication (LTPA). The Cookie Credentials Provider is used to pass the LTPA tokens that were generated at login by Leap to the service application when a service call is made.</p>"},{"location":"ref_service_cookie_credentials_provider.html#how-to-configure-the-cookie-credentials-provider","title":"How to Configure the Cookie Credentials Provider","text":"<p>By default, the Cookie Credentials Provider does not make any cookies available to the Service Transport. In order to make cookies available to a Service Transport, the Cookie Credentials Provider must be configured. The value of the cookie\u2019s property is a comma-separated list of cookie names. Any request cookies that have the same name, based on a case insensitive comparison, as the names in the cookies property are made available to the Service Transport.</p>"},{"location":"ref_service_cookie_credentials_provider.html#using-the-cookie-credentials-provider-in-a-service-description","title":"Using the Cookie Credentials Provider in a Service Description","text":"<p>The provider ID for the Cookie Credentials Provider to enter in a Service Description is: cookie</p>"},{"location":"ref_service_cookie_credentials_provider.html#credentials-provider-parameters","title":"Credentials Provider Parameters","text":"Name Description Mandatory Default cookies A comma-separated list of cookie names available to the Service Transport No N/A"},{"location":"ref_service_cookie_credentials_provider.html#sample-service-description","title":"Sample Service Description","text":"<pre><code>&lt;serviceDescription&gt;\n  &lt;id&gt;make-http-request&lt;/id&gt;\n  &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n  &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n  &lt;name xml:lang=\"en-us\"&gt;Make an HTTP Request&lt;/name&gt;\n  &lt;description xml:lang=\"en-us\"&gt;Makes an HTTP request to the configured URL and returns the result&lt;/description&gt;\n  &lt;credentials providerId=\"cookie\"\\&gt;\n    &lt;property name=\"cookies\" value=\"LtpaToken,LtpaToken2\"/\\&gt;\n  &lt;/credentials\\&gt;\n  &lt;inbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;request-url&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;URL&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;URL to request.&lt;/description&gt;\n        &lt;mandatory&gt;true&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;request-method&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;Method&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;HTTP method to use, one of GET, PUT, POST, or DELETE.&lt;/description&gt;\n        &lt;mandatory&gt;true&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n  &lt;/inbound&gt;\n  &lt;outbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;response-entity&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;Response&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;Response returned by making a request to the configured URL.&lt;/description&gt;\n        &lt;mandatory&gt;false&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n  &lt;/outbound&gt;\n&lt;/serviceDescription&gt;\n</code></pre> <p>Parent topic: Services</p>"},{"location":"ref_service_deploying_service_description.html","title":"Deploying a Service Description","text":"<p>This topic contains information about how to deploy an HCL Leap Service Description.</p> <p>To deploy a Service Description, place the XML document in one of the following directories, or in a subdirectory of one of the following directories:</p> <ul> <li> <p>Windows\u2122:</p> <p>any drive\\HCL\\Leap\\ServiceCatalog\\1\\</p> </li> <li> <p>Linux\u2122, or AIX\u00ae:</p> <p>/opt/HCL/Leap/ServiceCatalog/1/</p> </li> </ul> <p>Important notes on directories:</p> <ul> <li>There must be an extensions directory in the same parent directory as the ServiceCatalog directory. Otherwise, the ServiceCatalog directory is not found. For example, /opt/HCL/Leap/extensions/.</li> <li>If the extensions directory or ServiceCatalog/1 directory does not exist, then the Leap server must be restarted after the directories are created.</li> <li>/opt/HCL/Leap/ is not case-sensitive.</li> </ul> <p>When the Leap server starts, the ServiceCatalog directory and its subdirectories are scanned for new, deleted, and changed Service Descriptions. New and changed Service Descriptions are loaded and registered with the Leap server, and become available immediately. Service Descriptions that fail to load, or do not have an appropriate Service Transport registered, are not available.</p> <p>Access to a service description may be given to a specific user, group, or special assignment (i.e. Authenticated, Anonymous, etc). The access control is made up of two parts: who may discover and work with the service while designing an application, and who may run the service. Users or Groups provided must be in the proper format - it is recommended to use the dialog (by clicking the button with the down arrow) when adding permissions. Adding or removing users does not require a server restart, but there will be a short delay before the changes take effect.</p> <p>Deleting Service Descriptions and changing Service Descriptions must be done with care. Applications might depend on any or all of the parameters for the Service Description, as well as data returned within the Service Description. Therefore, modifying the structure or ID of parameters, or how data is mapped into the parameters, can potentially cause failures within deployed applications.</p> <p>Deleted Service Descriptions are unregistered and immediately become unavailable to any applications, deployed or otherwise. It is critical that before deregistering a Service Description, a check is performed to ensure that there are no applications that are using the Service Description.</p> <p>In general, adding new parameters or mappings and changing names and descriptions does not cause failures. However, removing existing parameters, changing parameter mapping, or modifying IDs for Service Description, Service Transport, or a parameter, are likely to cause failures. A list of potentially safe and unsafe operations are summarized in Table 2.</p> <p>Table 1. Summary of potentially safe and unsafe changes</p> Potentially Safe Changes Potentially Unsafe Changes <ul> <li> Adding new parameters</li> <li> Changing the name of a parameter</li> <li> Changing the description of a parameter</li> <li> Changing the name of the Service Description</li> <li> Changing the description of the Service Description</li> <li> Adding support for an additional language within the Service Description</li> <li> Changing the Service Description default locale</li> </ul> <ul> <li> Removing existing parameters</li> <li> Changing the ID of an existing parameter</li> <li> Changing the ID of the Service Description</li> <li> Changing the Transport ID of the Service Description</li> <li> Changing the mapping of existing parameters.</li> <p>If significant changes must be made to a Service Description that is in use by deployed applications, a new Service Description must be created and the existing Service Description that remains intact. The new Service Description must be given a unique ID, and given a distinct name with a version number to indicate that this new Service Description is different from similarly named ones.</p> <p>Parent topic: Service Description</p>"},{"location":"ref_service_http_service_transport.html","title":"HTTP Service Transport","text":"<p>This topic provides reference information on HTTP Service Transports used in HCL Leap.</p>"},{"location":"ref_service_http_service_transport.html#purpose-of-the-http-service-transport","title":"Purpose of the HTTP Service Transport","text":"<p>The HTTP Service Transport provides a mechanism to communicate with HTTP servers. The transport allows configuration of the URL to request, HTTP method to use, query parameters, and request headers. When combined with the Leap service mapping engine, the HTTP Service Transport extracts data from an HTTP response and makes it available to your application.</p>"},{"location":"ref_service_http_service_transport.html#when-to-use-the-http-service-transport","title":"When to use the HTTP Service Transport","text":"<p>The HTTP Service Transport can be used to communicate with any standard HTTP server. There are some limits on what the HTTP Service Transport can provide, but in most cases, the HTTP Service Transport is all that is required to communicate with a basic HTTP server, or RESTful service.</p>"},{"location":"ref_service_http_service_transport.html#how-to-use-the-http-service-transport","title":"How to use the HTTP Service Transport","text":"<p>The HTTP Service Transport has numerous parameters to configure it to talk to many HTTP Servers. In many cases, only a subset of the available parameters is needed. However, all the parameters can be used for any Service Description. The following sections provide a high-level outline of the parameters needed to configure specific parts of your HTTP request.</p> <p>Configuring the Request Method</p> <p>All HTTP requests require a request method, which tells the receiving HTTP server what to do with the request. </p> <p>The HTTP Service Transport supports all the basic HTTP request methods, including: GET, PUT, POST, and DELETE. The HTTP Service Transport supports configuring the HTTP request method with the request-method parameter. If this parameter is missing, or does not contain a valid HTTP request method, then the default, GET is used.</p> <p>Configuring the Request URL</p> <p>A URL is required to make an HTTP request. There is no default for this parameter, so it must be provided to the HTTP Service Transport. There are several parameters that affect how the request URL is built: request-url, request-url-postfix, request-url-postfix-encoded, and two dynamic parameters: request-url-postfix-N and request-url-postfix-N-encoded. </p> <p>The HTTP Service Transport constructs the URL by starting with the value of request-url and appending postfixes. If request-url-postfix is present, its value is appended to the value of request-url. Before appending, the HTTP Service Transport URL encodes the value of request-url-postfix if the request-url-postfix-encoded flag is not present or if its value is anything other than true. Encoding allows values containing characters that are not valid to be placed into the URL without any harm. Choosing to not encode a value allows it to be appended without modification to the URL. </p> <p>For example, consider a Service Description that requires the path to a file as input. Since the path might contain slash (/) characters that must be preserved, then request-url-postfix-encoded is set to true. This instructs the HTTP Service Transport to leave the value alone. However, another Service Description might need to include a text string as a path component. In this case, the slash (/) or any other characters are encoded such that they do not interfere with the path. In this second case, the request-url-postfix-encoded parameter is set to false or omitted from the Service Description. </p> <p>In some cases, having a single postfix does not provide enough flexibility. Therefore, the dynamic parameters request-url-postfix-Nand request-url-postfix-N-encoded are used. The N in each of these parameters refers to its order. During processing, the HTTP Service Transport appends the value of these parameters starting with 0 until it finds a missing parameter. As with the single postfix, encoding is optionally performed on each of the parameters before it is added if the value of the request-url-postfix-N-encoded flag is not present or contains any value other than true. </p> <p>For example, if the Service Description contains parameters called request-url-postfix-0, request-url-postfix-1, and request-url-postfix-3, only request-url-postfix-0 and request-url-postfix-1 are appended to the URL.  While building the request URL if a parameter called request-url-postfix is found, the dynamic parameters are ignored. The Service Description developer must make a conscious choice to use these dynamic parameters.</p> <p>Configuring Request Parameters</p> <p>Query parameters are configured using parameters with the prefix request-query-. Text after the prefix is considered to be the name of the query parameter to pass. The value of the query parameter comes from the value of the transport parameter, and is encoded to prevent the URL from being disrupted. All parameters with the request-query- prefix are added to the URL. No guarantees are made as to the order in which the query parameters are added. For example, consider a search service that requires the search criteria term to be passed as a query parameter. In order to communicate with this service, the Service Description must have a parameter called request-query-term.</p> <p>Configuring Request Headers</p> <p>The HTTP Service Transport allows HTTP request headers to be configured using parameters with the prefix request-header-. Text after the prefix is considered to be the name of the header. The value of the request header is the value of the parameter. No escaping or encoding is performed on either the name or value of request headers. Therefore, header configuration must include only characters that are permissible.</p> <p>Configuring the Request Body</p> <p>HTTP allows a body, or entity, to be sent with PUT and POST requests. In order to allow a Service Description to include a request entity, the HTTP Service Transport sends the contents of the request-entity parameter with the request. The contents of this parameter are ignored if the content of request-method is not PUT or POST.</p> <p>Configuring HTTP Authentication</p> <p>The HTTP Service Transport supports HTTP Basic and HTTP Digest authentication schemes. There arethreetwo mechanisms through which the credentials can be configured: hard coded in the Service Description, provided through the Java 2 Connector (J2C) Authentication Credentials provider, or provided at run time through the Basic Credentials Provider. </p> <p>To hard code the credentials that the HTTP Service Transport uses to authenticate, the request-http-auth-username and request-http-auth-password parameters must be available. The values of these parameters are used during any HTTP authentication challenge for either HTTP Basic or HTTP Digest authentication. The HTTP Service Transport performs any hashing required. Therefore, the values of these parameters must be the plain text version of both the user name and password. </p> <p>Credentials can be provided at run time using the Basic Credentials Provider. Refer to the Service Description and Basic Credentials Provider help topic for more information. The HTTP Service Transport only uses credentials provided by the Basic Credentials Provider if the request-http-auth-username and request-http-auth-password parameters are empty. </p> <p>Credentials can be provided using the J2C Authentication Credentials Provider. Refer to the Java 2 Connector (J2C) Authentication Credentials Provider help topic for more information. </p> <p>Note: The HTTP Service transport can only use credentials provided by the Basic Credentials provideror the J2C Authentication Credentials Provider if the request-HTTP-auth-username and request-HTTP-auth-password parameters are empty. </p> <p>In addition to HTTP Basic and HTTP Digest authentication, the HTTP Service Transport supports Single Sign on (SSO) authentication using the Cookie Credentials Provider. In the case where the request made through the HTTP Service Transports needs to passLeap authentication cookies, the Cookie Credentials Provider can be used. In general, the Cookie Credentials Provider is configured to pass the LtpaToken and LtpaToken2 cookies. Consult the Service Description and Cookie Credentials Provider help topics for information.</p> <p>Receiving Response Status Information</p> <p>The HTTP Service Transport ensures that the HTTP status code and message are available for consumption. The HTTP status code, for example, 200, 404, or 500, is available in the outbound response-code parameter. Similarly, the outbound response-message parameter contains the status message returned, for example, OK, Not Found, or Server Error.</p> <p>Receiving Response Headers</p> <p>All the headers that are returned in the HTTP response are made available to the Service Description via dynamic parameters. Each header name is converted to lowercase and appended with response-header-. For example, the content-type header would be available as an outbound parameter called response-header-content-type. The parameter contains the value of the header. In the case where a header contains more than one value, the header values are collapsed into a single comma-separated list.</p> <p>Receiving the Response Body</p> <p>The entire response body, or entity, is made available via the outbound response-entity parameter.</p>"},{"location":"ref_service_http_service_transport.html#specifying-the-http-service-transport-in-a-service-description","title":"Specifying the HTTP Service Transport in a Service Description","text":"<p>The HTTP Service Transport can be used by specifying its unique ID as the value of the transportId element of the Service Description. The unique ID of the HTTP Service Transport is:</p> <ul> <li>HTTPServiceTransport</li> </ul>"},{"location":"ref_service_http_service_transport.html#supported-credentials-providers","title":"Supported Credentials Providers","text":"<p>The HTTP Service Transport supports the following Credentials Providers:</p> <ul> <li>Basic</li> <li>Cookie</li> <li>J2C</li> </ul>"},{"location":"ref_service_http_service_transport.html#transport-parameters","title":"Transport Parameters","text":"<p>Inbound</p> <p>Inbound parameters are provided to the HTTP Service Transport. </p> <p>Table 1. Available Inbound Parameters</p> Name Description Mandatory Type Default request-url Base URL to request. Yes String request-method HTTP verb to use when making the request. Acceptable values are GET, PUT, POST, or DELETE. No String GET request-url-postfix Postfix to append to the value of request-url. No String N/A request-url-postfix-encoded Flag indicating whether the value of request-postfix is encoded. If this parameter is missing or is set to false, the value is URL encoded. Yes Boolean FALSE request-url-postfix-N The N postfix to append to the value of request-url. This parameter is only considered if request-postfix is not present. No String N/A request-url-postfix-N-encoded Flag indicating whether the value of the corresponding request-postfix-N is encoded. If this parameter is missing or set to false, the value is URL encoded. No Boolean FALSE request-header-x The value for the request header x. For example, request-header-accept creates a request header called accept. No String N/A request-query-x The value for the query parameter called x. For example, request-query-term creates a query parameter called term. No String N/A request-entity The body of the request to send. The UTF-8 character set is used. No String N/A <p>Outbound</p> <p>Outbound parameters are returned from the transport as a result of the service invocation. </p> <p>Table 2. Available Outbound Parameters</p> Name Description Type response-code HTTP status code returned by the server. This could be any of the standard values, for example, 200, 400, and 500, or a non-standard code returned by the server. Integer response-message HTTP status message associated with the HTTP status code. The value of this parameter is determined by the server. Generally, this message is a standard status message, for example, OK, Not Found, or Server Error. String response-header-x The value of the response header named x in lowercase. For example, if the response contains the response header Content-Type: text/html then response-header-content-type contains the value text/html. String response-entity The entire response body from the HTTP request. It is assumed that the response uses the UTF-8, or ASCII character set. String"},{"location":"ref_service_http_service_transport.html#sample-service-description","title":"Sample Service Description","text":"<p>For more examples using the HTTP Service Transport, see Service Description.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;serviceDescription&gt;\n  &lt;id&gt;make-http-request&lt;/id&gt;\n  &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n  &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n  &lt;name xml:lang=\"en-us\"&gt;Make an HTTP Request&lt;/name&gt;\n  &lt;description xml:lang=\"en-us\"&gt;Makes an HTTP request to the configured URL and returns the result&lt;/description&gt;\n  &lt;inbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;request-url&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;URL&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;URL to request.&lt;/description&gt;\n        &lt;mandatory&gt;true&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;request-method&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;Method&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;HTTP method to use, one of GET, PUT, POST, or DELETE.&lt;/description&gt;\n        &lt;mandatory&gt;true&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n  &lt;/inbound&gt;\n  &lt;outbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;response-entity&lt;/id&gt;\n        &lt;name xml:lang=\"en-us\"&gt;Response&lt;/name&gt;\n        &lt;description xml:lang=\"en-us\"&gt;Response returned by making a request to the configured URL.&lt;/description&gt;\n        &lt;mandatory&gt;false&lt;/mandatory&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n  &lt;/outbound&gt;\n&lt;/serviceDescription&gt;\n</code></pre> <p>Parent topic: Services</p>"},{"location":"ref_service_j2c_credentials_provider.html","title":"Java 2 Connector (J2C) Authentication Credentials Provider","text":"<p>This topic describes J2C Authentication Credentials Providers that are used within a Service Description.</p>"},{"location":"ref_service_j2c_credentials_provider.html#purpose-of-the-j2c-credentials-provider","title":"Purpose of the J2C Credentials Provider","text":"<p>The J2C Authentication Credentials Provider provides a mechanism that allows user name and password credentials to be provided to a Service Transport without being hardcoded within the Service Description. The credentials are defined by the WebSphere\u00ae Application Server administrator and associated with an alias that is then used within the Service Description.</p>"},{"location":"ref_service_j2c_credentials_provider.html#when-to-use-the-j2c-credentials-provider","title":"When to use the J2C Credentials Provider","text":"<p>Use the J2C Authentication Credentials Provider when a Service Description needs to define a static set of credentials, typically used to access a backend resource or service, and not specific to a particular user starting the service.</p>"},{"location":"ref_service_j2c_credentials_provider.html#how-to-configure-the-j2c-credentials-provider","title":"How to Configure the J2C Credentials Provider","text":"<p>To use the J2C Authentication Credential Provider, the WebSphere Application Server administrator must first define a user identity (User ID, Password, and Alias name) within the JAAS \u2013 J2C authentication data section of the WebSphere Application Server administrative console. For an example of the WebSphere Application Server Network Deployment 8.5.5, see the WebSphere Application Server documentation.</p>"},{"location":"ref_service_j2c_credentials_provider.html#using-the-j2c-credentials-provider-in-a-service-description","title":"Using the J2C Credentials Provider in a Service Description","text":"<p>The provider ID for the J2C Credentials Provider to enter in a Service Description is: j2cAlias</p>"},{"location":"ref_service_j2c_credentials_provider.html#credentials-provider-parameters","title":"Credentials Provider Parameters","text":"Name Description Mandatory Default alias The Alias name of a user identity that contains the credentials that are required for the Service Description. Yes N/A"},{"location":"ref_service_j2c_credentials_provider.html#sample-service-description","title":"Sample Service Description","text":"<pre><code>&lt;serviceDescription&gt;\n   &lt;id&gt;watsonTranslateJ2C&lt;/id&gt;\n   &lt;defaultLocale&gt;en&lt;/defaultLocale&gt;\n   &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n   &lt;name xml:lang=\"en\"&gt;Watson Translator J2C&lt;/name&gt;\n   &lt;description xml:lang=\"en\"&gt;\n    Translate text using the bluemix Watson Service\n   &lt;/description&gt;\n    &lt;credentials providerId=\"j2cAlias\"&gt;\n        &lt;property name=\"alias\" value=\"someNode01/BlueMixTranslateService\"/&gt;\n    &lt;/credentials&gt;\n   &lt;inbound&gt;\n       &lt;parameters&gt;\n            &lt;parameter&gt;\n                &lt;id&gt;text&lt;/id&gt;\n                &lt;type&gt;STRING&lt;/type&gt;\n                &lt;name xml:lang=\"en\"&gt;Text&lt;/name&gt;\n                &lt;description xml:lang=\"en\"&gt;Text to be translated&lt;/description&gt;\n                &lt;mandatory&gt;true&lt;/mandatory&gt;\n            &lt;/parameter&gt;\n            &lt;parameter&gt;\n                &lt;id&gt;model_id&lt;/id&gt;\n                &lt;type&gt;STRING&lt;/type&gt;\n                &lt;name xml:lang=\"en\"&gt;Model ID&lt;/name&gt;\n                &lt;description xml:lang=\"en\"&gt;Translation to be performed (ex. 'en-fr' to translate from English to French)&lt;/description&gt;\n                &lt;mandatory&gt;true&lt;/mandatory&gt;\n            &lt;/parameter&gt;\n        &lt;/parameters&gt;\n    &lt;serviceMapping&gt;\n      &lt;constants&gt;\n        &lt;constant&gt;\n          &lt;id&gt;request-url&lt;/id&gt;\n          &lt;value&gt;https://gateway.watsonplatform.net/language-translation/api/v2/translate&lt;/value&gt;\n        &lt;/constant&gt;\n        &lt;constant&gt;\n          &lt;id&gt;request-method&lt;/id&gt;\n          &lt;value&gt;GET&lt;/value&gt;\n        &lt;/constant&gt;\n      &lt;/constants&gt;\n\n      &lt;mapping xmlns=\"\"&gt;\n        &lt;mapping target=\"transport:request-url\" source=\"constant:request-url\"/&gt;\n        &lt;mapping target=\"transport:request-method\" source=\"constant:request-method\"/&gt;\n        &lt;mapping target=\"transport:request-query-txt\" source=\"parameter:text\"/&gt;\n        &lt;mapping target=\"transport:request-query-model_id\" source=\"parameter:model_id\"/&gt;\n      &lt;/mapping&gt;\n    &lt;/serviceMapping&gt;\n  &lt;/inbound&gt;\n\n   &lt;outbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n        &lt;id&gt;response-entity&lt;/id&gt;\n        &lt;type&gt;STRING&lt;/type&gt;\n        &lt;name xml:lang=\"en\"&gt;Translated Text&lt;/name&gt;\n        &lt;description xml:lang=\"en\"&gt;Text containing new translation.&lt;/description&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n   &lt;/outbound&gt;\n&lt;/serviceDescription&gt;\n</code></pre> <p>Parent topic: Services</p>"},{"location":"ref_service_localizing_service_description.html","title":"Localizing Service Descriptions","text":"<p>The name and description elements allow you to localize an HCL Leap Service Description in multiple languages using duplicate elements, each with a different xml:lang attribute and contents.</p> <p>Service Descriptions can be localized in two ways: using the xml:lang attribute, or providing translations in a separate .properties file. However, these approaches can be cumbersome if the Service Description is to be localized into many languages. An alternative is to use the key attribute on the name, and description elements.</p> <p>The value of the key attribute denotes the key in a Java\u2122 style .properties file that maps the key to the value to display for the name or description element.</p> <p>Service Description <pre><code>&lt;name key=\"email.service.name\"&gt;&lt;/name&gt;\n&lt;description key=\"email.service.description\"&gt;&lt;/description&gt;\n</code></pre></p> <p>Properties file: <pre><code>email.service.name=Send Email Service\nemail.service.description=This service enables the user to send an email\nemail.parameter.to.name=To\nemail.parameter.to.description=Email addresses separated with comma\n</code></pre></p> <p>When the Service Description is loaded, Leap loads the associated .properties files, and uses their contents as the messages to display for the name and description elements.</p> <p>When a Service Description uses this approach, the .properties files and Service Description must be placed in the same deployment directory. Changes to the .properties files are not automatically reloaded if they are changed. In order to refresh with new strings, the Service Description XML file must be changed or its modification date changed.</p> <p>Naming the .properties files is important because the Leap looks for .properties files with specific names. The name of the .properties file that contains the default strings, if none are specified for a specific locale, is the same as the base name of the Service Description XML file, but with a .properties extension. For the locale-specific .properties files, the name is similar but includes an underscore followed by a locale specifier after the base name but before the .properties extension.</p> <p>For example, if the Service Description XML file is CurrencyConvService.xml, then the default .properties file is CurrencyConvService.properties and the French messages are in a file named CurrencyConvService_fr.properties. For details on locale specifier formats, refer to the documentation of java.util.Locale.</p> <p>Parent topic: Service Description</p>"},{"location":"ref_service_mapping_service_description.html","title":"Mapping Data for a Service Description","text":"<p>The serviceMapping element of the Service Description contains all the information needed for the HCL Leap server to map data from the Service Description inbound data to the Service Transport</p>"},{"location":"ref_service_mapping_service_description.html#mapping-data","title":"Mapping Data","text":"<p>Each serviceMapping consists of two elements: constants, and mapping. The constants element, defines constant values that can be mapped into the output structure. The mapping element and its child mapping elements allow mapping of the Service Description parameters to the Service Transport, or the Service Transport data to the Service Description parameters.</p> <p>All the named constants available during mapping must be declared within the optional constants element. If no constants are required during mapping, the constants element can be omitted. If the constants element is present, it can contain one or more constant elements. Each constant element contains two elements: id and value, which specify the ID of the constant and its value.</p> <p>The id of a constant must contain characters that are allowed in a URL path, which are [A-Z], [a-z], [0-9], hyphen (-), and underscore (_).</p> <p>The text of the value element is used as the value of the constant. Any XML or JSON markup that exists inside the value element is not present at run time. Literal XML values can be produced by either wrapping the contents of the element in a CDATA section, or escaping any angle brackets.</p> <p>Mapping Service Description parameters to Service Transport parameters, and vice versa, is defined using mapping elements. A root mapping element must be placed as a child of serviceDescription. This root mapping contains other mapping elements that describe how data is to be mapped. The source and target of a mapping are declared using attributes on the mapping element. These attributes are: source, sourceType, sourceRef, target, targetType, and targetRef. Each mapping element can also have child mapping elements that allow repeating structures and large XML or JSON documents to be produced.</p>"},{"location":"ref_service_mapping_service_description.html#mapping-structure","title":"Mapping Structure","text":"<p>The input and output of both Service Descriptions and Service Transports is a simple map of key value pairs. A value can be either a string, or a list of maps of key value pairs. Leap does not support a map as a value. A value of a key in one map cannot be another map, it must be either a string or a list of maps. The mapping elements within a Service Description instruct Leap on how to produce one such structure from another, potentially extracting values from strings treated as XML or JSON.</p>"},{"location":"ref_service_mapping_service_description.html#mapping-definition","title":"Mapping Definition","text":"<p>Each mapping element within a Service Description describes how Leap must map data from a source to a destination. Each mapping is made up of a source, and a target. The value of the source and target attributes is a colon separated value containing the scheme of the value and its name. Valid values for the scheme depend on the binding in which the mapping is located, and whether the scheme refers to the source or target of the mapping. For inbound mapping, the source scheme must be parameter or constant, and the target must be transport. For outbound mapping, the source scheme must be transport or constant, and the target must be parameter. A summary of the valid schemes and their contexts are listed in Table 1. The name component of a scheme identifies the key to use when looking up a value or where to place the result.</p> <p>Table 1. Summary of valid schemes and their contexts </p> Scheme Inbound Inbound Outbound Outbound Type Source Target Source Target constant Yes No Yes No parameter Yes No No Yes transport No Yes Yes No <p>Both the source and target have a type which instructs Leap how to work with the value. Both ends of a mapping can contain a reference, which allows a subset of the source to be placed at a specific location within the target. Valid values for type are string, xml, json and list, with string being the default. If the type is xml or json, the reference represents an XPath expression that determines which nodes are affected by the mapping. A source reference is used to extract a subset of the value identified by the source scheme. A target reference is used to construct the path where the value extracted from the source is placed. If there are no nodes that match a target reference, the node and its missing parent nodes are created. For this reason, only simple XPath predicates, those that use only the and operator, are permitted. In all other cases, the value of the reference is not used and is omitted. </p> <p>Each mapping element can also contain sub-mappings, which allow repeating structures to be iterated over and built. At run time, Leap server processes the mapping elements in top-down order. Nested mappings evaluate their source and target in the context of their parent source or target mapping.</p>"},{"location":"ref_service_mapping_service_description.html#examples","title":"Examples","text":"<p>Given a service response like: <pre><code>&lt;people&gt;\n    &lt;person&gt;\n        &lt;fullName&gt;Doe, John&lt;/fullName&gt;\n        &lt;email&gt;jdoe@acme.com&lt;/email&gt;\n        &lt;addressBlock&gt;\n            &lt;address1&gt;123 Someplace Rd&lt;/address1&gt;\n            &lt;address2&gt;Suite 220&lt;/address2&gt;\n            &lt;city&gt;Somecity&lt;/city&gt;\n            &lt;state&gt;Somestate&lt;/state&gt;\n            &lt;postalZip&gt;12345&lt;/postalZip&gt;\n            &lt;/addressBlock&gt;\n    &lt;/person&gt;\n&lt;/people&gt;\n</code></pre></p> <p>And service outputs defined as: <pre><code>&lt;parameters&gt;\n  &lt;parameter&gt;\n    &lt;id&gt;firstName&lt;/id&gt;\n    &lt;name xml:lang=\"en\"&gt;First Name&lt;/name&gt;\n    &lt;description xml:lang=\"en\"&gt;&lt;/description&gt;\n    &lt;mandatory&gt;false&lt;/mandatory&gt;\n    &lt;type&gt;INTEGER&lt;/type&gt;\n  &lt;/parameter&gt;\n  &lt;parameter&gt;\n    &lt;id&gt;lastName&lt;/id&gt;\n    &lt;name xml:lang=\"en\"&gt;Last Name&lt;/name&gt;\n    &lt;description xml:lang=\"en\"&gt;&lt;/description&gt;\n    &lt;mandatory&gt;false&lt;/mandatory&gt;\n    &lt;type&gt;STRING&lt;/type&gt;\n  &lt;/parameter&gt;\n  &lt;parameter&gt;\n    &lt;id&gt;AddressBlock&lt;/id&gt;\n    &lt;name xml:lang=\"en\"&gt;Address Block&lt;/name&gt;\n    &lt;description xml:lang=\"en\"&gt;The entire address returned as one string.&lt;/description&gt;\n    &lt;mandatory&gt;false&lt;/mandatory&gt;\n    &lt;type&gt;STRING&lt;/type&gt;\n  &lt;/parameter&gt;\n&lt;/parameters&gt;\n</code></pre></p> <p>Group properties into a single output</p> <p>In this example, you can see that an XPath function was used to concatenate two of the XML elements together and mapped it to a single output parameter. <pre><code>&lt;mapping source=\"transport:response-entity\" \n         sourceRef=\"concat(people/person/addressBlock/address1,'&amp;#xA;',people/person/addressBlock/address2,'&amp;#xA;',people/person/addressBlock/city,', ',people/person/addressBlock/state,'&amp;#xA;',people/person/addressBlock/zipPostal)\" \n         sourceType=\"XML\" \n         target=\"parameter:AddressBlock\" \n         targetType=\"STRING\"\n/&gt;\n</code></pre></p> <p>Splitting one property into multiple output parameters</p> <p>We can break the fullName attribute into first and last name parameters within the service description. <pre><code>&lt;mapping source=\"transport:response-entity\" \n         sourceRef=\"normalize-space(substring-after(people/person/fullName,','))\" \n         sourceType=\"XML\" \n         target=\"parameter:fitsName\" \n         targetType=\"STRING\"\n/&gt;\n\n&lt;mapping source=\"transport:response-entity\" \n         sourceRef=\"substring-before(people/person/fullName, ',')\" \n         sourceType=\"XML\" \n         target=\"parameter:lastName\" \n         targetType=\"STRING\"\n/&gt;\n</code></pre></p> <p>Specifying a POST template and dynamically inserting values</p> <p>Given the following inbound parameters: <pre><code>&lt;parameter&gt;\n  &lt;id&gt;title&lt;/id&gt;\n  &lt;name xml:lang=\"en\"&gt;Title&lt;/name&gt;\n  &lt;description xml:lang=\"en\"&gt;Title of the Blog post.&lt;/description&gt;\n  &lt;mandatory&gt;false&lt;/mandatory&gt;\n  &lt;type&gt;STRING&lt;/type&gt;\n&lt;/parameter&gt;\n&lt;parameter&gt;\n  &lt;id&gt;blog-content&lt;/id&gt;\n  &lt;name xml:lang=\"en\"&gt;Blog Content&lt;/name&gt;\n  &lt;description xml:lang=\"en\"&gt;The content to post to the Blog.&lt;/description&gt;\n  &lt;mandatory&gt;false&lt;/mandatory&gt;\n  &lt;type&gt;STRING&lt;/type&gt;\n&lt;/parameter&gt; \n&lt;parameter&gt;\n  &lt;id&gt;tags&lt;/id&gt;\n  &lt;name xml:lang=\"en\"&gt;Tags&lt;/name&gt;\n  &lt;description xml:lang=\"en\"&gt;The list of tags to be added to the blog post&lt;/description&gt;\n  &lt;mandatory&gt;false&lt;/mandatory&gt;\n  &lt;type&gt;LIST&lt;/type&gt;\n  &lt;parameters&gt;\n        &lt;parameter&gt;\n              &lt;id&gt;tag&lt;/id&gt;\n              &lt;type&gt;STRING&lt;/type&gt;\n              &lt;name xml:lang=\"en\"&gt;Tag&lt;/name&gt;\n              &lt;description xml:lang=\"en\"&gt;The tag to add to the blog post&lt;/description&gt;\n          &lt;/parameter&gt;\n    &lt;/parameters&gt;\n&lt;/parameter&gt;\n</code></pre></p> <p>We define the template that will be used for the POST request as a constant. <pre><code>&lt;constant&gt;\n      &lt;id&gt;post-template&lt;/id&gt;\n     &lt;value&gt;&lt;![CDATA[&lt;a:entry xmlns:a=\"http://www.w3.org/2005/Atom\"&amp;gt;&lt;a:title type=\"text\"&gt;&lt;/a:title&gt;&lt;a:content type=\"html\"&gt;&lt;/a:content&gt;&lt;/a:entry&gt;]]&gt;&lt;/value&gt;\n&lt;/constant&gt;\n</code></pre></p> <p>Assign the template to the transport:request-entity target <pre><code>&lt;mapping target=\"transport:request-entity\" targetType=\"XML\" sourceType=\"NOOP\" source=\"constant:post-template\" /&gt;\n</code></pre></p> <p>Insert inbound parameters into the template before it gets sent. <pre><code>&lt;mapping sourceType=\"NOOP\" target=\"transport:request-entity\" targetType=\"XML\"&gt;\n  &lt;mapping source=\"parameter:title\" sourceType=\"STRING\" targetRef=\"a:entry/a:title\"/&gt;\n  &lt;mapping source=\"parameter:blog-content\" sourceType=\"STRING\" targetRef=\"a:entry/a:content\"/&gt;\n\n  &lt;!-- This denotes that there is a list of tags that will create multiple category elements --&gt;\n  &lt;!-- it inherits the target of request-entity --&gt;\n  &lt;mapping source=\"parameter:tags\" targetRef=\"a:entry/a:category\"&gt;\n    &lt;mapping source=\"parameter:tag\" sourceType=\"STRING\" targetRef=\"@term\"/&gt;\n  &lt;/mapping&gt;\n&lt;/mapping&gt;\n</code></pre></p> <p>The targetRef uses XPath to reference a specific element in the prototypical instance and replace it with the source.  When this mapping gets resolved the XML that gets posted to the server looks like:</p> <pre><code>&lt;a:entry xmlns:a=\"http://www.w3.org/2005/Atom\"&gt;\n  &lt;a:title type=\"text\"&gt;Content from title parameter&lt;/a:title&gt;\n  &lt;a:content type=\"html\"&gt;Content from blog-content parameter&lt;/a:content&gt;\n&lt;/a:entry&gt;\n</code></pre> <p>Inserting \"tags\" is a bit more complicated because that is a list and we need to make sure that all the items of the list get inserted into the instance.  The first part is to link the \"tags\" parameter to the repeating element in your instance, in this case .  Then we can link the inner tag parameter to the term attribute. The end result might be something like:</p> <pre><code>&lt;a:entry xmlns:a=\"http://www.w3.org/2005/Atom\"&gt;\n  &lt;a:title type=\"text\"&gt;This is a sample blog post from an app!&lt;/a:title&gt;\n  &lt;a:content type=\"html\"&gt;This is a sample blog post from an app!&lt;/a:content&gt;\n  &lt;a:category term=\"sample\"/&gt;\n  &lt;a:category term=\"rest_api\"/&gt;\n  &lt;a:category term=\"awesome\"/&gt;\n&lt;/a:entry&gt;\n</code></pre>"},{"location":"ref_service_mapping_service_description.html#run-time-mapping","title":"Run time Mapping","text":"<p>At runtime, Leap server performs the following operations for each mapping element. Each mapping element is evaluated in the order in which it occurs within the root mapping element.</p> <ol> <li>Look up the source.</li> <li>Convert the source value if required (parse as XML or JSON).</li> <li>Resolve the source reference.</li> <li>Look up the target, if present.</li> <li>Convert the target value if required (parent as XML or JSON).</li> <li>Resolve the target reference.</li> <li>Map the source value to the target value.</li> <li>Evaluate child mapping elements.</li> </ol> <p>To look up the source, the Leap server first needs to determine the scheme. If the scheme is constant, the identified constant is looked up and returned. If there is no constant with the given name, an empty string is used. If the scheme is parameter or transport, then the current context is searched for the named item. For top-level mapping elements, this is the root of the parameter structure. For child mapping elements, this is the result of the lookup, conversion, and resolve operation on its parent. If the named value cannot be found in the current context, the parent context is checked until there are no more parent contexts. If the value does not exist in any context, an empty string is used.</p> <p>The value returned by the lookup operation is then converted into the type specified for the source or target. If the conversion produced an XML or JSON value, the reference is resolved, which returns a subset of the original value.</p> <p>The same lookup, conversion, and resolve operations are then performed on the target of the mapping. Once both the source and target are resolved, the mapping operation begins. Generally, the cardinality of the target matches the source. For example, if a list is the source, then the target must be a list. Similarly, if a single value is the source, then the target must be a single value.</p> <p>When the source is a single value, that value is assigned directly to the target value. When the source is a list, a new list is created to contain the results. For each item in the source list, the child mappings of the current mapping element are evaluated. The results of these mappings are added to the list being constructed. When all the source items are evaluated, the list is assigned to the target value.</p> <p>For more information on creating a Service Description that returns JSON, see the Leap wiki.</p> <p>Parent topic: Service Description</p>"},{"location":"ref_service_service_description.html","title":"Service Description","text":"<p>A Service Description provides a specific interface to a Service Transport. The Service Description describes the inputs and outputs when you configure services within the HCL Leap mapping user interface.</p>"},{"location":"ref_service_service_description.html#elements-of-a-service-description","title":"Elements of a Service Description","text":"<p>A Service Description is represented as an XML document that follows an XML schema. This single XML document contains all the information for a single Service Description: name, description, input and output parameters, and input and output mapping. For a full listing of the XML schema, refer to Appendix A - Service Description schema. The top-level element in a Service Description is the serviceDescription element. This element, and all of its childs, must be in the XML namespace with a URI of http://www.ibm.com/xmlns/prod/forms/services/serviceDescription/1.0.</p> <p>ID</p> <p>Each Service Description must contain a unique id that identifies it to the Leap server. The id can contain any characters that are valid as a component of a URL path. These characters include:</p> <ul> <li>Alphabetical letters \u2013 [A-Z], and [a-z]<ul> <li>Numerals \u2013 [0-9]</li> <li>Hyphens \u2013 [-]</li> <li>Underscore \u2013 [_]</li> </ul> </li> </ul> <p>Because a Service Description ID is a surrogate for the Service Description itself, this ID does not must be descriptive. Any UUID is a valid choice for a Service Description ID because it guarantees uniqueness and contains only characters that are valid in a URL path component.</p> <p>Transport ID</p> <p>A Service Description must reference a Service Transport to perform its underlying operation. Each Service Transport has its own unique transportId that uniquely identifies it to the Leap server. The ID for a Service Transport must be made available by its developer.</p> <p>Name and Description</p> <p>To help users build Leap applications with services, each Service Description contains both a name, and a description. The name and description elements allow you to localize a Leap Service Description in multiple languages using duplicate elements, each with a different xml:lang attribute and contents.See Localizing Service Descriptions for information about how to provide names and descriptions in multiple languages.</p> <p>Default Locale</p> <p>If the Service Description is not localized in the language of a particular user, the defaultLocale contains the locale in which the name and description must be presented. For example, if a user asks for the Service Description in French, but the Service Description has only English and Spanish strings, the English is returned if en is set as the defaultLocale.</p> <p>Credentials</p> <p>The credentials contains the configuration for a Credentials Provider. The ID of the credentials provider is specified in the providerId attribute. The credentials element can contain zero or more property elements to configure the properties of the specified Credentials Provider. </p> <p>Each property element must contain a name attribute whose value is the name of the property being configured, and a value attribute that contains the value of the property. Not all Credentials Providers are applicable to all Service Transports. Therefore, the documentation for each Service Transport must be consulted before you configure the credentials element. If the configured Service Transport does not understand the provider that is specified by providerId, the Service Description is not available.</p> <p>Bindings</p> <p>Every Service Description must specify its input and output structures. These structures outline the ID, name, description, and type of each parameter and any subparameters. In addition to the parameter structure, bindings might also contain a section that declares how data going into the Service Transport is mapped from the input structure and how data coming from the Service Transport is mapped to the output structure.</p> <p>There are two top-level elements for bindings: inbound, and outbound. Inbound defines the binding for data coming into the Service Description from the Builder Application. Outbound defines the data going to the Leap application from the Service Description. Only one of each of these elements can be present within a single Service Description, and each must be placed as a child of the serviceDescription element.</p> <p>Directly underneath inbound and outbound are two elements that define the main components of a binding: parameters and serviceMapping. The parameters element contains all the information that is related to the parameters. The contents of the serviceMapping element instructs Leap how to map data coming from the parameters into data for the transport and vice versa.</p> <p>Parameters</p> <p>The parameters element contains zero or more parameter elements. Each parameter element defines a single parameter coming into or being returned from the Service Description. Each parameter element must have an id, type, name, and description. The id element uniquely identifies the parameter within the binding. The type element specifies the type of data that is expected to be contained within the parameter. The following data types are supported: STRING, BOOLEAN, DECIMAL, FLOAT, DOUBLE, INTEGER, DATETIME, TIME, DATE, and LIST.</p> <p>As with the name and description child elements of the serviceDescription element, these childs of parameter specify the name and description of the parameter that is used in Leap. These elements can also be localized using the xml:lang attribute.</p> <p>Optionally, the mandatory element can be included for inbound bindings to specify whether the parameter must be bound before starting the Service Description. Valid values for this element are true and false, with the latter being the default.</p> <p>Each parameter element can have a child element that is called parameters which is a container for child parameters. The contents of the parameters element is one or more parameter elements. If a parameter contains subparameters, its type is set to LIST. At run time, the parameter contains a list of structures with each of the subparameters.</p> <p>Service Mapping</p> <p>The serviceMapping element contains all the information that is needed for the Leap server to map data between the Service Description parameters, and the Service Transport. For more information, see Mapping Data for a Service Description.</p>"},{"location":"ref_service_service_description.html#xml-namespaces","title":"XML Namespaces","text":"<p>XML namespace declarations must be defined on the serviceMapping element or higher.</p>"},{"location":"ref_service_service_description.html#service-description-schema","title":"Service Description Schema","text":"<p>Provided is the schema definition for the service description XML file.  This can be used to better understand the structure and format of the service description XML file.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;schema xmlns=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://www.ibm.com/xmlns/prod/forms/services/serviceDescription/1.0\" xmlns:tns=\"http://www.ibm.com/xmlns/prod/forms/services/serviceDescription/1.0\" elementFormDefault=\"qualified\"&gt;\n\n    &lt;simpleType name=\"id\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                Represents a unique identifier in its context. IDs must only contain characters that are\n                valid in a URL. To ensure that the contents are unique and only contain valid URL characters\n                a UUID (Universally Unique IDentified) should be\n                used as its contents for any global uses.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;restriction base=\"string\"&gt;&lt;/restriction&gt;\n    &lt;/simpleType&gt;\n\n    &lt;complexType name=\"localizedType\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                Represents a localized string of the Service Description. This type can be used in one of two\n                ways, controlled by which attributes are present.\n\n                If @key is present this element is merely used as a vehicle for a bundle key that resolves\n                to\n                the localized information at runtime. Any other attributes and content are ignored. If @key\n                is present there should be one and only one of the element of this type. For more information\n                on how to use the localized service descriptions see the\n                class\n                documentation for\n                com.ibm.form.nitro.service.services.IServiceDescriptionBuilder.\n\n                If @key is not present this element contains the name of the service description localized to\n                the locale specified in the @xml:lang attribute. If @key is not\n                present there should be one\n                element of this type for each supported locale.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;simpleContent&gt;\n            &lt;extension base=\"string\"&gt;\n                &lt;attribute name=\"key\" type=\"string\" use=\"optional\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            Java resource bundle key that resolves to the localized string at runtime. See the class\n                            documentation for com.ibm.form.nitro.service.services.IServiceDescriptionBuilder for more\n                            information.\n                &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/attribute&gt;\n            &lt;/extension&gt;\n        &lt;/simpleContent&gt;\n\n    &lt;/complexType&gt;\n\n    &lt;element name=\"serviceDescription\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                serviceDescription is the root element for a Service Description document. All Service\n                Description documents must have one and only one &amp;lt;serviceDescription&amp;gt; element.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;complexType&gt;\n            &lt;sequence&gt;\n                &lt;element name=\"id\" type=\"string\" maxOccurs=\"1\" minOccurs=\"1\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            The id that uniquely identifies the Service Description. For information regarding\n                            its contents see the documentation of the &amp;lt;id&amp;gt; element.\n                        &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/element&gt;\n                &lt;element name=\"transportId\" type=\"string\" maxOccurs=\"1\" minOccurs=\"1\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            The id that uniquely identifies the Service Transport. For information regarding\n                            its contents see the documentation of the &amp;lt;id&amp;gt; element.\n                        &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/element&gt;\n                &lt;element name=\"defaultLocale\" type=\"string\" maxOccurs=\"1\" minOccurs=\"1\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            The default locale for the service description. At runtime values in this locale\n                            will be used if strings for a more specific locale cannot be found.\n                        &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/element&gt;\n                &lt;element name=\"name\" type=\"tns:localizedType\" maxOccurs=\"unbounded\" minOccurs=\"1\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            The localized name of the service description. If this element contains @key then\n                            there should be only one &amp;lt;name&amp;gt; element as a child of the\n                            &amp;lt;serviceDescription&amp;gt; element. Otherwise, there should be one for each\n                            locale.\n                            For more information regarding this element see the documentation for\n                            localizedType.\n                        &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/element&gt;\n                &lt;element name=\"description\" type=\"tns:localizedType\" maxOccurs=\"unbounded\" minOccurs=\"1\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            The localized description of the service description. If this element contains\n                            @key then there should be only one &amp;lt;description&amp;gt; element as a child of the\n                            &amp;lt;serviceDescription&amp;gt; element. Otherwise, there should be one for\n                            each\n                            locale.\n                        &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/element&gt;\n\n                &lt;element name=\"inbound\" type=\"tns:bindingType\" maxOccurs=\"1\" minOccurs=\"0\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            The inbound binding information for the service description. This binding\n                            describes what data is expected to be given to the service description from a\n                            Nitro form and how the service description will map the incoming data into the\n                            parameters that the underlying service transport expects.\n                        &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/element&gt;\n                &lt;element name=\"outbound\" type=\"tns:bindingType\" maxOccurs=\"1\" minOccurs=\"0\"&gt;\n                    &lt;annotation&gt;\n                        &lt;documentation&gt;\n                            The outbound binding information for the service description. This binding\n                            describes what data is expected to be returned to the Nitro form from the\n                            service description and how it will map the data coming from the underlying\n                            service transport into that format.\n                        &lt;/documentation&gt;\n                    &lt;/annotation&gt;\n                &lt;/element&gt;\n            &lt;/sequence&gt;\n        &lt;/complexType&gt;\n    &lt;/element&gt;\n\n    &lt;complexType name=\"bindingType\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                A binding contains all of the information about the parameters that are coming into or out\n                of a service description as well as how data will be mapped from the incoming data to the\n                transport and vice-versa.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"parameters\" type=\"tns:parametersType\" maxOccurs=\"1\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        Contains all of the parameter definitions for the binding.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"serviceMapping\" type=\"tns:serviceMappingType\" maxOccurs=\"1\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        Contains the service mapping information for the binding.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n        &lt;/sequence&gt;\n    &lt;/complexType&gt;\n\n    &lt;complexType name=\"parametersType\"&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"parameter\" type=\"tns:parameterType\" maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        A single parameter for the service description. For more information see the\n                        documentation for the parameterType type.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n        &lt;/sequence&gt;\n    &lt;/complexType&gt;\n\n    &lt;complexType name=\"parameterType\"&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"id\" type=\"tns:id\" maxOccurs=\"1\" minOccurs=\"1\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        The id of the parameter. This value is local to the Service Description and therefore\n                        does not (and should not) be a UUID. For information regarding its contents see the\n                        documentation of the &amp;lt;id&amp;gt; element.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"name\" type=\"tns:localizedType\" maxOccurs=\"unbounded\" minOccurs=\"1\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        The localized name of the Service Parameter. If this element contains @key then there\n                        should be only one &amp;lt;name&amp;gt; element as a child of the &amp;lt;parameter&amp;gt; element.\n                        Otherwise, there should be one for each locale. For more\n                        information regarding this\n                        element see the documentation for localizedType.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"description\" type=\"tns:localizedType\" maxOccurs=\"unbounded\" minOccurs=\"1\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        The localized description of the Service Parameter. If this element contains @key\n                        then there should be only one &amp;lt;name&amp;gt; element as a child of the &amp;lt;parameter&amp;gt;\n                        element. Otherwise, there should be one for each locale. For\n                        more information\n                        regarding this element see the documentation for localizedType.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"mandatory\" type=\"boolean\" maxOccurs=\"1\" minOccurs=\"1\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        Determines if the parameter is mandatory. The value of this element is ignored if\n                        &amp;lt;incoming&amp;gt; is false.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"type\" type=\"tns:typeType\" maxOccurs=\"1\" minOccurs=\"1\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        Determines the type of the data that should be mapped to the parameter. For more\n                        information see the documentation for the typeType type. \n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"advanced\" type=\"boolean\" maxOccurs=\"1\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        If provided, determines if the parameter is presented as 'Advanced',\n                        otherwise assumed false.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n        &lt;/sequence&gt;\n    &lt;/complexType&gt;\n\n    &lt;simpleType name=\"typeType\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                Defines the different data types that are supported.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;restriction base=\"string\"&gt;\n            &lt;enumeration value=\"STRING\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"BOOLEAN\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"DECIMAL\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"INTEGER\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"FLOAT\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"DOUBLE\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"DURATION\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"DATETIME\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"TIME\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"DATE\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"LIST\"&gt;&lt;/enumeration&gt;\n        &lt;/restriction&gt;\n    &lt;/simpleType&gt;\n\n    &lt;complexType name=\"serviceMappingType\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                Defines the mapping for a binding. For more information see the mapping documentation.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"constants\" type=\"tns:constantsType\" maxOccurs=\"1\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        Contains &amp;lt;constant&amp;gt; elements that define any constant values that can be\n                        injected into output of the mapping via a mapping element.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"mapping\" type=\"tns:topLevelMappingType\" maxOccurs=\"1\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        Top level mapping element that contains all of the mapping elements for the binding.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n        &lt;/sequence&gt;\n    &lt;/complexType&gt;\n\n    &lt;complexType name=\"constantsType\"&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"constant\" type=\"tns:constantType\" maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        Defines a constant value for a service mapping.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n        &lt;/sequence&gt;\n    &lt;/complexType&gt;\n\n    &lt;complexType name=\"constantType\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                Defines a constant value for a service mapping.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"id\" type=\"string\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        The unique identifier of the constant. This should be a short descriptive string.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n            &lt;element name=\"value\" type=\"string\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n                        The value of the constant. The textual content of this element will be used as the\n                        value for the constant. If you need to have XML as a value that can be injected into\n                        a parameter you must either escape the XML within this element\n                        or wrap the contents in\n                        a CDATA section.\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n        &lt;/sequence&gt;\n    &lt;/complexType&gt;\n\n    &lt;complexType name=\"mappingType\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                Defines a mapping from a source to a target. Data will be taken from the source at the\n                reference specified (if applicable) and applied to the target at the reference specified (if\n                applicable). Any type conversions will be applied as\n                needed.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"mapping\" type=\"tns:mappingType\" maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\n                &lt;annotation&gt;\n                    &lt;documentation&gt;\n\n                    &lt;/documentation&gt;\n                &lt;/annotation&gt;\n            &lt;/element&gt;\n        &lt;/sequence&gt;\n        &lt;attribute name=\"source\" type=\"tns:mappingSchemeType\"&gt;\n            &lt;annotation&gt;\n                &lt;documentation&gt;\n                    Defines the scheme of the source (where to get the data for the mapping from). The\n                    source scheme must be either 'constant' or 'parameter'.\n                &lt;/documentation&gt;\n            &lt;/annotation&gt;\n        &lt;/attribute&gt;\n        &lt;attribute name=\"sourceRef\" type=\"string\"&gt;\n            &lt;annotation&gt;\n                &lt;documentation&gt;\n                    Defines the reference to retrieve data from within the value found by the source\n                    attribute. References take the form of a path reference. \n                &lt;/documentation&gt;\n            &lt;/annotation&gt;\n        &lt;/attribute&gt;\n        &lt;attribute name=\"sourceType\" type=\"tns:mappingTypeType\"&gt;\n            &lt;annotation&gt;\n                &lt;documentation&gt;\n                    Defines the type of the source value.\n                &lt;/documentation&gt;\n            &lt;/annotation&gt;\n        &lt;/attribute&gt;\n        &lt;attribute name=\"target\" type=\"tns:mappingSchemeType\"&gt;\n            &lt;annotation&gt;\n                &lt;documentation&gt;\n                    Defines the scheme of the target (where to get the data for the mapping from). The\n                    source scheme must be 'out'.\n                &lt;/documentation&gt;\n            &lt;/annotation&gt;\n        &lt;/attribute&gt;\n        &lt;attribute name=\"targetRef\" type=\"string\"&gt;\n            &lt;annotation&gt;\n                &lt;documentation&gt;\n                    Defines the reference to retrieve data from within the value found by the target\n                    attribute. References take the form of a path reference. \n                &lt;/documentation&gt;\n            &lt;/annotation&gt;\n        &lt;/attribute&gt;\n        &lt;attribute name=\"targetType\" type=\"tns:mappingTypeType\"&gt;\n            &lt;annotation&gt;\n                &lt;documentation&gt;\n                    Defines the type of the target value.\n                &lt;/documentation&gt;\n            &lt;/annotation&gt;\n        &lt;/attribute&gt;\n    &lt;/complexType&gt;\n\n    &lt;complexType name=\"topLevelMappingType\"&gt;\n        &lt;annotation&gt;\n            &lt;documentation&gt;\n                The top level mapping element contains mapping elements.\n            &lt;/documentation&gt;\n        &lt;/annotation&gt;\n        &lt;sequence&gt;\n            &lt;element name=\"mapping\" type=\"tns:mappingType\" maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;&lt;/element&gt;\n        &lt;/sequence&gt;\n    &lt;/complexType&gt;\n\n    &lt;simpleType name=\"mappingTypeType\"&gt;\n        &lt;restriction base=\"string\"&gt;\n            &lt;enumeration value=\"xml\"&gt;&lt;/enumeration&gt;\n            &lt;enumeration value=\"string\"&gt;&lt;/enumeration&gt;\n        &lt;/restriction&gt;\n    &lt;/simpleType&gt;\n\n    &lt;simpleType name=\"mappingSchemeType\"&gt;\n        &lt;restriction base=\"string\"&gt;\n            &lt;pattern value=\"^parameter:.*\"&gt;&lt;/pattern&gt;\n            &lt;pattern value=\"^out:.*\"&gt;&lt;/pattern&gt;\n            &lt;pattern value=\"^constant:.*\"&gt;&lt;/pattern&gt;\n        &lt;/restriction&gt;\n    &lt;/simpleType&gt;\n&lt;/schema&gt;\n</code></pre>"},{"location":"ref_service_service_description.html#sample-service-descriptions","title":"Sample Service Descriptions","text":"<p>Each example in this section includes a list of the Service Descriptions and a discussion of how each Service Description operates. The Service Descriptions in this section rely solely on the Service Transports that are shipped with the Leap server. Where applicable, sample and setup instructions are included.</p> <p>Example 1: Simple Mapping</p> <p>The following Service Description uses the HTTP Service Transport to make a request to a web server and return the content type of the response. In this example, the URL to which the request is made comes as an inbound parameter from the Builder application.</p> <pre><code>1: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  \n2: &lt;serviceDescription&gt;  \n3:   &lt;id&gt;get-content-type&lt;/id&gt;  \n4:   &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;  \n5:   &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;  \n6:   &lt;name xml:lang=\"en-us\"&gt;Get Content Type&lt;/name&gt;  \n7:   &lt;description xml:lang=\"en-us\"&gt;  \n8:  Retrieves the content type of the response from an HTTP server for the configured URL.  \n9:   &lt;/description&gt; \n10:   &lt;inbound&gt; \n11:     &lt;parameters&gt; \n12:       &lt;parameter&gt; \n13:         &lt;id&gt;request-url&lt;/id&gt; \n14:         &lt;type&gt;STRING&lt;/type&gt; \n15:         &lt;name xml:lang=\"en-us\"&gt;URL&lt;/name&gt; \n16:         &lt;description xml:lang=\"en-us\"&gt;URL to request.&lt;/description&gt; \n17:         &lt;mandatory&gt;true&lt;/mandatory&gt; \n18:       &lt;/parameter&gt; \n19:     &lt;/parameters&gt; \n20:   &lt;/inbound&gt; \n21:   &lt;outbound&gt; \n22:     &lt;parameters&gt; \n23:       &lt;parameter&gt; \n24:         &lt;id&gt;response-header-content-type&lt;/id&gt; \n25:         &lt;type&gt;STRING&lt;/type&gt; \n26:         &lt;name xml:lang=\"en-us\"&gt;Content Type&lt;/name&gt; \n27:         &lt;description xml:lang=\"en-us\"&gt;Content Type of the response.&lt;/description&gt; \n28:       &lt;/parameter&gt; \n29:     &lt;/parameters&gt; \n30:   &lt;/outbound&gt; \n31: &lt;/serviceDescription&gt;\n</code></pre> <p>All Service Descriptions begin with a serviceDescription element, and in this example, it is defined in line 2. The serviceDescription element contains all the information that is needed for the Leap server to work with the Service Description. The unique ID of this Service Description is get-content-type as defined in line 3. The unique ID is not exposed to a user, but it must be unique.  Line 5 declares the ID of the Service Transport to use, which is HTTPServiceTransport, and this is the unique ID of the HTTP Service Transport. Lines 7 and 8 define the name and description of the Service Description, which are presented to the user when designing applications.</p> <p>Lines 10-20 define the inbound bindings, and lines 21-30 define the outbound bindings. As mentioned previously, the inbound bindings refer to the parameters that are flowing from the application to the Service Transport. The outbound bindings refer to the parameters that are flowing in the opposite direction.</p> <p>Lines 11-19 contain all the inbound parameters, of which there is only one.  The parameter that is defined in lines 12-18 represents the URL to which a request is made. According to the HTTP Service Transport documentation, the parameter that contains the URL to which the request is made must be called request-url.</p> <p>Line 13 defines the id of the parameter so that it matches the expectations of the HTTP Service Transport.</p> <p>The name and description are defined in lines 15 and 16, and line 17 specifies that this parameter must be supplied in order for this Service Description to operate.</p> <p>Lines 21-30 define the outbound parameters for the Service Description. In this case, there is only one output parameter: the content type of the response. The HTTP Service Transport dynamically creates new parameters that are based on the information that is returned in the HTTP response. In particular, response headers are converted to lowercase and are prefixed with response-header-. Since this Service Description is interested in the Content-Type header, the outbound parameter response-header-content-type is created in lines 23-28 to contain this data.</p> <p>Example 2: Augmenting Parameters with Constants</p> <p>The following Service Description returns the same information as Example 1. However, in this case, we do not want the Leap application to supply the URL. Instead, the URL is declared using a constant, and mapped into the inbound parameters for the Service Transport.</p> <pre><code>1: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n2: &lt;serviceDescription&gt;\n3:   &lt;id&gt;get-content-type-with-constant&lt;/id&gt;\n4:   &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n5:   &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n6:   &lt;name xml:lang=\"en-us\"&gt;Get Content Type with Constant&lt;/name&gt;\n7:   &lt;description xml:lang=\"en-us\"&gt;\n8:  Retreives the content type of the response from an HTTP server.\n9:   &lt;/description&gt;\n10:   &lt;inbound&gt;\n11:     &lt;serviceMapping&gt;\n12:       &lt;constants&gt;\n13:         &lt;constant&gt;\n14:           &lt;id&gt;url-to-request&lt;/id&gt;\n15:           &lt;value&gt;http://www.ibm.com&lt;/value&gt;\n16:         &lt;/constant&gt;\n17:       &lt;/constants&gt;\n18:       &lt;mapping&gt;\n19:         &lt;mapping source=\"constant:url-to-request\" sourceType=\"string\" target=\"transport:request-url\" targetType=\"string\"/&gt;\n20:       &lt;/mapping&gt;\n21:     &lt;/serviceMapping&gt;\n22:   &lt;/inbound&gt;\n23:   &lt;outbound&gt;\n24:     &lt;parameters&gt;\n25:       &lt;parameter&gt;\n26:         &lt;id&gt;response-header-content-type&lt;/id&gt;\n27:         &lt;type&gt;STRING&lt;/type&gt;\n28:         &lt;name xml:lang=\"en-us\"&gt;Content Type&lt;/name&gt;\n29:         &lt;description xml:lang=\"en-us\"&gt;Content Type of the response.&lt;/description&gt;\n30:       &lt;/parameter&gt;\n31:     &lt;/parameters&gt;\n32:   &lt;/outbound&gt;\n33: &lt;/serviceDescription&gt;\n</code></pre> <p>Like Example 1, the Service Description makes a request to an HTTP server and returns the content type of the response. However, this Service Description differs from the Example 1 because there are no input parameters to this service. The request-url HTTP Service Transport parameter is mapped into the transport via a constant.</p> <p>Lines 12-17 define the constants section. There is a single constant that is defined in lines 13-16. This constant has an id of url-to-request specified in line 14, and a value of http://www.ibm.com, specified in line 15. The id of the constant is used when creating the parameter structure that is passed to the Service Transport. This constant is referenced in line 19 within the mapping section.</p> <p>Lines 18-20 contain the mapping information. Since there is only one parameter to be sent, there is only one mapping, which is defined in line 19. This mapping specifies that the value of the Service Transport parameter named request-url is specified by the value of the constant named url-to-request.</p> <p>Example 3: Lists of Data</p> <p>The following Service Description demonstrates the use of nested parameters. This example is the same as the Service Description used for the Countries by Region service that is shipped with Leap. This example describes how to specify a region and return a list of the names of countries within that region.</p> <pre><code>1: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n2: &lt;serviceDescription&gt;\n3:   &lt;id&gt;countries-by-region&lt;/id&gt;\n4:   &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n5:   &lt;transportId&gt;4647b8cf-093f-11e0-89dd-001e4cf83606&lt;/transportId&gt;\n6:   &lt;name xml:lang=\"en-us\"&gt;\n7:  Countries by Region using Service Description\n8:   &lt;/name&gt;\n9:   &lt;description xml:lang=\"en-us\"&gt;\n10:     Given a region, return a list of country information in that region.\n11:   &lt;/description&gt;\n12:   &lt;inbound&gt;\n13:     &lt;parameters&gt;\n14:       &lt;parameter&gt;\n15:         &lt;id&gt;region&lt;/id&gt;\n16:         &lt;type&gt;STRING&lt;/type&gt;\n17:         &lt;name xml:lang=\"en-us\"&gt;Region&lt;/name&gt;\n18:         &lt;description xml:lang=\"en-us\"&gt;\n19:           One of \"Africa\", \"America, North\", \"America, South\", \"Asia\", \"Europe\", or \"Oceania\"\n20:         &lt;/description&gt;\n21:         &lt;mandatory&gt;true&lt;/mandatory&gt;\n22:       &lt;/parameter&gt;\n23:     &lt;/parameters&gt;\n24:   &lt;/inbound&gt;\n25:   &lt;outbound&gt;\n26:     &lt;parameters&gt;\n27:       &lt;parameter&gt;\n28:         &lt;id&gt;countries&lt;/id&gt;\n29:         &lt;type&gt;LIST&lt;/type&gt;\n30:         &lt;name xml:lang=\"en-us\"&gt;Countries\"&lt;/name&gt;\n31:         &lt;description xml:lang=\"en-us\"&gt;List of country information&lt;/description&gt;\n32:         &lt;parameters&gt;\n33:           &lt;parameter&gt;\n34:             &lt;id&gt;name&lt;/id&gt;\n35:             &lt;type&gt;STRING&lt;/type&gt;\n36:             &lt;name xml:lang=\"en-us\"&gt;Name&lt;/name&gt;\n37:             &lt;description xml:lang=\"en-us\"&gt;Name of Country&lt;/description&gt;\n38:           &lt;/parameter&gt;\n39:         &lt;/parameters&gt;\n40:       &lt;/parameter&gt;\n41:     &lt;/parameters&gt;\n42:   &lt;/outbound&gt;\n43: &lt;/serviceDescription&gt;\n</code></pre> <p>As with the other Service Description examples, this Service Description has its own unique ID, defined in line 3, a name, which is defined in lines 6-8, and a description, which is defined in lines 9-11. This Service Description uses the sample Countries by Region Service Transport, which is shipped with the Leap , and is identified by its id in line 5.</p> <p>Because this Service Description has a single inbound parameter, the parameters element, in lines 13-23, of the inbound bindings in lines 12-24. parameters contains only a single parameter, which is defined in lines 14-22. The id of this parameter is region, which is what is expected by the Countries by Region Service Transport.</p> <p>Since there can be multiple countries within a region, the outbound bindings, which are defined in lines 25-42, must contain a list parameter to contain all the information for each country. The outbound structure for this Service Description consists of a parameter that is called countries that contains a list of maps. Each of the maps that are contained within the countries list consists of a single name key that contains the name of a country. This structure is defined within the parameters element, which is defined in lines 26-41, of the outbound bindings section. The top-level parameter, countries, is defined between lines 27 and 40. Since the countries parameter contains other parameters, its type is set as LIST in line 29. All the parameters of the list entries are defined within the parameters element inside the countries parameter that is defined in lines 32-39. The single name subparameter is defined in lines 33-38.</p> <p>Since the inbound and outbound bindings directly match what is returned by the Countries by Region Service Transport, there is no need for any mapping information. This service can be set up such that the name subparameter is mapped to list-like items such as drop-down options or an item in a table.</p> <p>Example 4: Mapping XML into Parameters</p> <p>The following Service Description extracts data from an XML document that is returned from an HTTP request using the HTTP Service Transport.</p> <pre><code>1: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n2: &lt;serviceDescription&gt;\n3:   &lt;id&gt;address-lookup&lt;/id&gt;\n4:   &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n5:   &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n6:   &lt;name xml:lang=\"en-us\"&gt;Address Lookup&lt;/name&gt;\n7:   &lt;description xml:lang=\"en-us\"&gt;Returns information related to a postal code or address.&lt;/description&gt;\n8:   &lt;inbound&gt;\n9:  &lt;parameters&gt;\n10:       &lt;parameter&gt;\n11:         &lt;id&gt;address&lt;/id&gt;\n12:         &lt;type&gt;STRING&lt;/type&gt;\n13:         &lt;name xml:lang=\"en-us\"&gt;Address or Postal Code&lt;/name&gt;\n14:         &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n15:         &lt;mandatory&gt;true&lt;/mandatory&gt;\n16:       &lt;/parameter&gt;\n17:     &lt;/parameters&gt;\n18:     &lt;serviceMapping&gt;\n19:       &lt;constants&gt;\n20:         &lt;constant&gt;\n21:           &lt;id&gt;request-url&lt;/id&gt;\n22:           &lt;value&gt;http://maps.googleapis.com/maps/api/geocode/xml&lt;/value&gt;\n23:         &lt;/constant&gt;\n24:         &lt;constant&gt;\n25:           &lt;id&gt;false-constant&lt;/id&gt;\n26:           &lt;value&gt;false&lt;/value&gt;\n27:         &lt;/constant&gt;\n28:         &lt;constant&gt;\n29:           &lt;id&gt;request-method&lt;/id&gt;\n30:           &lt;value&gt;GET&lt;/value&gt;\n31:         &lt;/constant&gt;\n32:       &lt;/constants&gt;\n33:       &lt;mapping&gt;\n34:         &lt;mapping target=\"transport:request-url\" source=\"constant:request-url\"/&gt;\n35:         &lt;mapping target=\"transport:request-method\" source=\"constant:request-method\"/&gt;\n36:         &lt;mapping target=\"transport:request-query-address\" source=\"parameter:address\"/&gt;\n37:         &lt;mapping target=\"transport:request-query-sensor\" source=\"constant:false-constant\"/&gt;\n38:       &lt;/mapping&gt;\n39:     &lt;/serviceMapping&gt;\n40:   &lt;/inbound&gt;\n41:   &lt;outbound&gt;\n42:     &lt;parameters&gt;\n43:       &lt;parameter&gt;\n44:         &lt;id&gt;latitude&lt;/id&gt;\n45:         &lt;type&gt;STRING&lt;/type&gt;\n46:         &lt;name xml:lang=\"en-us\"&gt;Latitude&lt;/name&gt;\n47:         &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n48:       &lt;/parameter&gt;\n49:       &lt;parameter&gt;\n50:         &lt;id&gt;longitude&lt;/id&gt;\n51:         &lt;type&gt;STRING&lt;/type&gt;\n52:         &lt;name xml:lang=\"en-us\"&gt;Longitude&lt;/name&gt;\n53:         &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n54:       &lt;/parameter&gt;\n55:       &lt;parameter&gt;\n56:         &lt;id&gt;address-information&lt;/id&gt;\n57:         &lt;type&gt;LIST&lt;/type&gt;\n58:         &lt;name xml:lang=\"en-us\"&gt;Address Information&lt;/name&gt;\n59:         &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n60:         &lt;parameters&gt;\n61:           &lt;parameter&gt;\n62:             &lt;id&gt;long-name&lt;/id&gt;\n63:             &lt;type&gt;STRING&lt;/type&gt;\n64:             &lt;name xml:lang=\"en-us\"&gt;Long Name&lt;/name&gt;\n65:             &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n66:           &lt;/parameter&gt;\n67:           &lt;parameter&gt;\n68:             &lt;id&gt;short-name&lt;/id&gt;\n69:             &lt;type&gt;STRING&lt;/type&gt;\n70:             &lt;name xml:lang=\"en-us\"&gt;Short Name&lt;/name&gt;\n71:             &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n72:           &lt;/parameter&gt;\n73:           &lt;parameter&gt;\n74:             &lt;id&gt;type-1&lt;/id&gt;\n75:             &lt;type&gt;STRING&lt;/type&gt;\n76:             &lt;name xml:lang=\"en-us\"&gt;Type&lt;/name&gt;\n77:             &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n78:           &lt;/parameter&gt;\n79:           &lt;parameter&gt;\n80:             &lt;id&gt;type-2&lt;/id&gt;\n81:             &lt;type&gt;STRING&lt;/type&gt;\n82:             &lt;name xml:lang=\"en-us\"&gt;Type(2)&lt;/name&gt;\n83:             &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n84:           &lt;/parameter&gt;\n85:         &lt;/parameters&gt;\n86:       &lt;/parameter&gt;\n87:     &lt;/parameters&gt;\n88:     &lt;serviceMapping&gt;\n89:       &lt;mapping&gt;\n90:         &lt;mapping source=\"transport:response-entity\" \n91:                  sourceRef=\"GeocodeResponse/result[1]/geometry/location/lat\" \n92:                  sourceType=\"xml\" \n93:                  target=\"parameter:latitude\"/&gt;\n94:         &lt;mapping source=\"transport:response-entity\" \n95:                  sourceRef=\"GeocodeResponse/result[1]/geometry/location/lng\" \n96:                  sourceType=\"xml\" \n97:                  target=\"parameter:longitude\"/&gt;\n98:         &lt;mapping source=\"transport:response-entity\" \n99:                  sourceRef=\"GeocodeResponse/result[1]/address_component\" \n100:                 sourceType=\"xml\" \n101:                 target=\"parameter:address-information\"&gt;\n102:          &lt;mapping sourceRef=\"long_name\" target=\"parameter:long-name\"/&gt;\n103:          &lt;mapping sourceRef=\"short_name\" target=\"parameter:short-name\"/&gt;\n104:          &lt;mapping sourceRef=\"type[1]\" target=\"parameter:type-1\"/&gt;\n105:          &lt;mapping sourceRef=\"type[2]\" target=\"parameter:type-2\"/&gt;\n106:        &lt;/mapping&gt;\n107:      &lt;/mapping&gt;\n108:    &lt;/serviceMapping&gt;\n109:   &lt;/outbound&gt;\n110: &lt;/serviceDescription&gt;\n</code></pre> <p>This Service Description performs a reverse address lookup using a free Google web service. As with the other Service Description examples, the standard prologue of id, transportId, name, and description is specified in lines 3-7. This service has a single parameter, address, that can be assigned by an application, as specified in lines 10-16. Since this parameter is required to perform the address look-up, it is marked as mandatory in line 15.</p> <p>Since this Service Description uses the HTTP Service Transport, a request-url must be specified. The URL used in this request takes the form http://maps.googleapis.com/maps/api/geocode/xml?address=[address]&amp;sensor=[true|false]. Because there are query parameters that must be sent, this Service Description uses the HTTP Service Transport support for query parameters by prefixing the name of the parameter with request-query-. However, because some of these query parameters are not exposed to the user, you must create a mapping section to map some constant values. The inbound binding constant section, in lines 19-32, defines the three constants that are used: request-url, lines 20-23, false-constant, lines 24-27, and request-method, lines 28-31. These constants contain the URL to which to request is made, a constant string value false for the sensor query parameter, and the request method. While some of these constants, including request-url and request-method, match the name of the parameter to which they are applied, there is no requirement that they match. Parameter names that match do not automatically get a constant value if it has the same name. All mapping must be explicitly defined.</p> <p>In lines 33-38, the mapping section of the inbound binding maps the constants and Service Description parameters to the Service Transport parameters. Each of the mapping elements is fairly self-explanatory: the request-url constant is mapped to the request-url transport parameter; the request-method constant is mapped to the request-method transport parameter; the address parameter is mapped to the request-query-address transport parameter; and the constant false-constant is mapped to the sensor transport parameter.</p> <p>The HTTP Service Transport then builds a URL out of the request-url, request-query-address, and request-query-sensor parameters, and makes a request to that URL using the HTTP method given in the request-method parameter. The response body that is returned by this request is placed in the response-entity transport parameter, which is then taken apart by the mapping section of the outbound bindings.</p> <p>This service expects the response-entity to be similar to the following:</p> <pre><code>1: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n2: &lt;GeocodeResponse&gt; \n3:  &lt;status&gt;OK&lt;/status&gt; \n4:  &lt;result&gt; \n5:   &lt;type&gt;street_address&lt;/type&gt; \n6:   &lt;formatted_address&gt;1 New Orchard Rd, Armonk, NY, USA&lt;/formatted_address&gt; \n7:   &lt;address_component&gt; \n8:    &lt;long_name&gt;1&lt;/long_name&gt; \n9:    &lt;short_name&gt;1&lt;/short_name&gt; \n10:    &lt;type&gt;street_number&lt;/type&gt; \n11:   &lt;/address_component&gt; \n12:   &lt;address_component&gt; \n13:    &lt;long_name&gt;New Orchard Rd&lt;/long_name&gt; \n14:    &lt;short_name&gt;New Orchard Rd&lt;/short_name&gt; \n15:    &lt;type&gt;route&lt;/type&gt; \n16:   &lt;/address_component&gt; \n17:   &lt;address_component&gt; \n18:    &lt;long_name&gt;Armonk&lt;/long_name&gt; \n19:    &lt;short_name&gt;Armonk&lt;/short_name&gt; \n20:    &lt;type&gt;locality&lt;/type&gt; \n21:    &lt;type&gt;political&lt;/type&gt; \n22:   &lt;/address_component&gt; \n23:   &lt;address_component&gt; \n24:    &lt;long_name&gt;Westchester&lt;/long_name&gt; \n25:    &lt;short_name&gt;Westchester&lt;/short_name&gt; \n26:    &lt;type&gt;administrative_area_level_2&lt;/type&gt; \n27:    &lt;type&gt;political&lt;/type&gt; \n28:   &lt;/address_component&gt; \n29:   &lt;address_component&gt; \n30:    &lt;long_name&gt;New York&lt;/long_name&gt; \n31:    &lt;short_name&gt;NY&lt;/short_name&gt; \n32:    &lt;type&gt;administrative_area_level_1&lt;/type&gt; \n33:    &lt;type&gt;political&lt;/type&gt; \n34:   &lt;/address_component&gt; \n35:   &lt;address_component&gt; \n36:    &lt;long_name&gt;United States&lt;/long_name&gt; \n37:    &lt;short_name&gt;US&lt;/short_name&gt; \n38:    &lt;type&gt;country&lt;/type&gt; \n39:    &lt;type&gt;political&lt;/type&gt; \n40:   &lt;/address_component&gt; \n41:   &lt;geometry&gt; \n42:    &lt;location&gt; \n43:     &lt;lat&gt;41.1083018&lt;/lat&gt; \n44:     &lt;lng&gt;-73.7204677&lt;/lng&gt; \n45:    &lt;/location&gt; \n46:    &lt;location_type&gt;ROOFTOP&lt;/location_type&gt; \n47:    &lt;viewport&gt; \n48:     &lt;southwest&gt; \n49:      &lt;lat&gt;41.1051542&lt;/lat&gt; \n50:      &lt;lng&gt;-73.7236153&lt;/lng&gt; \n51:     &lt;/southwest&gt; \n52:     &lt;northeast&gt; \n53:      &lt;lat&gt;41.1114494&lt;/lat&gt; \n54:      &lt;lng&gt;-73.7173201&lt;/lng&gt; \n55:     &lt;/northeast&gt; \n56:    &lt;/viewport&gt; \n57:   &lt;/geometry&gt; \n58:  &lt;/result&gt; \n59: &lt;/GeocodeResponse&gt;\n</code></pre> <p>There is much data in this response, but only some of it is needed for this Service Description. The latitude, longitude, and a list of the address information from the first result is required. To get only the required information, the Service Description outlines the parameters that it expects to return in the parameters section, in lines 42-87. The Service Description then uses the mapping section, in lines 88-108, to extract the required data from the response-entity transport parameter. Each of the parameters in the parameters section is self-explanatory. Latitude and longitude are top-level parameters because there is only one of each of them in a single result. However, there are several address_component elements, each of which are returned. Therefore, the address-information parameter is a list parameter that contains subparameters, one for each of the pieces of information in an address_component that the Service Description wants to make available.</p> <p>In lines 88-108, the service mapping section defines all the mapping that must be performed to extract the data from the XML response. Latitude, which is specified in lines 90-93, and longitude, which is specified in lines 94-97, each extract the data using a single XPath expression. The source type for each is set to XML. Mapping of a repeating structure is accomplished in a similar fashion. Lines 98-101 define the mapping for the address-information parameter. The XPath expression for address-information returns a nodeset as there are several nodes that match the expression GeocodeResponse/result/address_component. For each node that is returned, a new structure is created to contain the result of each of the submappings. Each of the submappings places its target into the newly created structure. Since the source of each of the submappings is one of the matched nodes, the mapping elements do not specify a source. It is assumed to be the inherited context. Similarly, the reference is evaluated within the context of the source, which is inherited. After each of the submappings is evaluated for a single source, the structure is added to a running list and the submappings are evaluated again for the next result in the source list. When all the sources are processed, the list that was collecting the results of the map is assigned to the address-information parameter.</p> <p>Example 5. Service Description for JSON response</p> <p>This example uses the same lookup service but receives a JSON response instead of XML.</p> <p>This service description provides three different kinds of output based on what the Google API returns:</p> <ol> <li> <p>Individual output parameters that will automatically select the first item returned</p> </li> <li> <p>A list of the search results that contains fields for all of the return parameters</p> </li> <li> <p>A list that returns the address components in the raw format of the service</p> </li> </ol> <p>This demonstrates the variety of output formats and the flexibility that you have in manipulating the response data to suit your needs.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;serviceDescription&gt;\n  &lt;id&gt;address-lookup-json&lt;/id&gt;\n  &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n  &lt;transportId&gt;HTTPServiceTransport&lt;/transportId&gt;\n  &lt;name xml:lang=\"en-us\"&gt;Address Lookup (JSON)&lt;/name&gt;\n  &lt;description xml:lang=\"en-us\"&gt;Returns information related to a postal code or address.&lt;/description&gt;\n  &lt;inbound&gt;\n    &lt;parameters&gt;\n      &lt;parameter&gt;\n            &lt;id&gt;address&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Address or Postal Code&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The address you want to search for&lt;/description&gt;\n            &lt;mandatory&gt;true&lt;/mandatory&gt;\n        &lt;/parameter&gt;\n      &lt;parameter&gt;\n            &lt;id&gt;components&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Components to Return&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;&lt;![CDATA[A filter consists of a list of component:value pairs separated by a pipe (|). Only the results that match all the filters will be returned.\n                The components that can be filtered include:\n    i) route matches long or short name of a route.\n    ii) locality matches against both locality and sublocality types. \n    iii) administrative_area matches all the administrative_area levels. \n    iv) postal_code matches postal_code and postal_code_prefix.\n    v) country matches a country name or a two letter ISO 3166-1 country code.]]&gt;&lt;/description&gt;\n            &lt;mandatory&gt;false&lt;/mandatory&gt;\n      &lt;/parameter&gt;\n    &lt;/parameters&gt;\n    &lt;serviceMapping&gt;\n      &lt;constants&gt;\n            &lt;constant&gt;\n              &lt;id&gt;request-url&lt;/id&gt;\n              &lt;value&gt;http://maps.googleapis.com/maps/api/geocode/json&lt;/value&gt;\n            &lt;/constant&gt;\n            &lt;constant&gt;\n              &lt;id&gt;false&lt;/id&gt;\n              &lt;value&gt;false&lt;/value&gt;\n            &lt;/constant&gt;\n            &lt;constant&gt;\n              &lt;id&gt;request-method&lt;/id&gt;\n              &lt;value&gt;GET&lt;/value&gt;\n            &lt;/constant&gt;\n            &lt;constant&gt;\n              &lt;id&gt;ignore_empty&lt;/id&gt;\n              &lt;value&gt;true&lt;/value&gt;\n            &lt;/constant&gt;\n      &lt;/constants&gt;\n      &lt;mapping xmlns=\"\"&gt;\n            &lt;mapping target=\"out:request-url\" source=\"constant:request-url\"/&gt;\n            &lt;mapping target=\"out:request-method\" source=\"constant:request-method\"/&gt;\n            &lt;mapping target=\"out:request-query-address\" source=\"parameter:address\"/&gt;\n            &lt;mapping target=\"out:request-query-components\" source=\"parameter:components\"/&gt;\n            &lt;mapping target=\"out:request-query-sensor\" source=\"constant:false\"/&gt;\n            &lt;mapping target=\"transport:request-ignore-empty-query\" source=\"constant:ignore_empty\" sourceType=\"STRING\" targetType=\"STRING\"/&gt;\n      &lt;/mapping&gt;\n    &lt;/serviceMapping&gt;\n  &lt;/inbound&gt;\n  &lt;outbound&gt;\n    &lt;parameters&gt;\n        &lt;parameter&gt;\n            &lt;id&gt;status&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Status Code&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The \"status\" field within the Geocoding response object contains the status of the request, and may contain debugging information to help you track down why geocoding is not working. The \"status\" field may contain the following values:\n    i) \"OK\" indicates that no errors occurred; the address was successfully parsed and at least one geocode was returned. \n    ii) \"ZERO_RESULTS\" indicates that the geocode was successful but returned no results. This may occur if the geocoder was passed a non-existent address. \n    iii) \"OVER_QUERY_LIMIT\" indicates that you are over your quota.\n    iv) \"REQUEST_DENIED\" indicates that your request was denied.\n    v) \"INVALID_REQUEST\" generally indicates that the query (address, components or latlng) is missing. \n    vi) \"UNKNOWN_ERROR\" indicates that the request could not be processed due to a server error. The request may succeed if you try again.&lt;/description&gt;\n      &lt;/parameter&gt;\n      &lt;parameter&gt;\n            &lt;id&gt;formatted-address&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Street Address&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The fully formatted street address.&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;street-number&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Street Number&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The street number of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;street-name&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Street Name&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The street name of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;city&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;City&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The city of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;state&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;State&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The state of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;country&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Country&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The country of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;postal-code&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Zip/Postal Code&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The zip/postal code of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;latitude&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Latitude&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The latitude of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;longitude&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Longitude&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The longitude of the specified address&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;latitude-longitude&lt;/id&gt;\n            &lt;type&gt;STRING&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Latitude and Longitude&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;The latitude and longitude of the address in one formatted string&lt;/description&gt;\n      &lt;/parameter&gt;\n\n      &lt;!-- --&gt;\n      &lt;parameter&gt;\n            &lt;id&gt;results&lt;/id&gt;\n            &lt;type&gt;LIST&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Results&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n            &lt;parameters&gt;\n              &lt;parameter&gt;\n                    &lt;id&gt;list-formatted-address&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Street Address&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The fully formatted street address.&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-street-number&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Street Number&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The street number of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-street-name&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Street Name&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The street name of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-city&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;City&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The city of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-state&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;State&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The state of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-country&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Country&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The country of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-postal-code&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Zip/Postal Code&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The zip/postal code of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-latitude&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Latitude&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The latitude of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-longitude&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Longitude&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The longitude of the specified address&lt;/description&gt;\n              &lt;/parameter&gt;\n\n              &lt;parameter&gt;\n                    &lt;id&gt;list-latitude-longitude&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Latitude and Longitude&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The latitude and longitude of the address in one formatted string&lt;/description&gt;\n              &lt;/parameter&gt;\n            &lt;/parameters&gt;\n      &lt;/parameter&gt;\n      &lt;!-- --&gt;\n\n      &lt;parameter&gt;\n            &lt;id&gt;address-information&lt;/id&gt;\n            &lt;type&gt;LIST&lt;/type&gt;\n            &lt;name xml:lang=\"en-us\"&gt;Address Information&lt;/name&gt;\n            &lt;description xml:lang=\"en-us\"&gt;&lt;/description&gt;\n            &lt;parameters&gt;\n              &lt;parameter&gt;\n                    &lt;id&gt;long-name&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Long Name&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The long name of an address component&lt;/description&gt;\n              &lt;/parameter&gt;\n              &lt;parameter&gt;\n                    &lt;id&gt;short-name&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Short Name&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The short name of an address component&lt;/description&gt;\n              &lt;/parameter&gt;\n              &lt;parameter&gt;\n                    &lt;id&gt;type-1&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Type&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The type of an address component&lt;/description&gt;\n              &lt;/parameter&gt;\n              &lt;parameter&gt;\n                    &lt;id&gt;type-2&lt;/id&gt;\n                    &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;name xml:lang=\"en-us\"&gt;Type(2)&lt;/name&gt;\n                    &lt;description xml:lang=\"en-us\"&gt;The secondary type of an address component&lt;/description&gt;\n              &lt;/parameter&gt;\n            &lt;/parameters&gt;\n      &lt;/parameter&gt;\n\n    &lt;/parameters&gt;\n    &lt;serviceMapping xmlns=\"\"&gt;\n      &lt;mapping&gt;\n        &lt;!-- Returns the first item and breaks out each component into its own output parameter --&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"status\" sourceType=\"json\" target=\"parameter:status\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/formatted_address\" sourceType=\"json\" target=\"parameter:formatted-address\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/address_components[types='street_number']/long_name\" sourceType=\"json\" target=\"parameter:street-number\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/address_components[types='route']/long_name\" sourceType=\"json\" target=\"parameter:street-name\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/address_components[types='locality']/long_name\" sourceType=\"json\" target=\"parameter:city\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/address_components[types='administrative_area_level_1']/long_name\" sourceType=\"json\" target=\"parameter:state\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/address_components[types='country']/long_name\" sourceType=\"json\" target=\"parameter:country\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/address_components[types='postal_code']/long_name\" sourceType=\"json\" target=\"parameter:postal-code\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/geometry/location/lat\" sourceType=\"json\" target=\"parameter:latitude\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results[1]/geometry/location/lng\" sourceType=\"json\" target=\"parameter:longitude\"/&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"concat(results[1]/geometry/location/lat, ',', results[1]/geometry/location/lng)\"  sourceType=\"json\" target=\"parameter:latitude-longitude\"/&gt;\n\n        &lt;!-- Returns all items as a table with each of its components defined as columns --&gt;\n        &lt;!-- the parent element is \"results\" all the children element can then be referenced as children to this root element --&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results\" sourceType=\"json\" target=\"parameter:results\"&gt;\n          &lt;mapping sourceRef=\"status\" sourceType=\"json\" target=\"parameter:status\"/&gt;\n            &lt;mapping sourceRef=\"formatted_address\" sourceType=\"json\" target=\"parameter:list-formatted-address\"/&gt;\n            &lt;mapping sourceRef=\"address_components[types='street_number']/long_name\" sourceType=\"json\" target=\"parameter:list-street-number\"/&gt;\n            &lt;mapping sourceRef=\"address_components[types='route']/long_name\" sourceType=\"json\" target=\"parameter:list-street-name\"/&gt;\n            &lt;mapping sourceRef=\"address_components[types='locality']/long_name\" sourceType=\"json\" target=\"parameter:list-city\"/&gt;\n            &lt;mapping sourceRef=\"address_components[types='administrative_area_level_1']/long_name\" sourceType=\"json\" target=\"parameter:list-state\"/&gt;\n            &lt;mapping sourceRef=\"address_components[types='country']/long_name\" sourceType=\"json\" target=\"parameter:list-country\"/&gt;\n            &lt;mapping sourceRef=\"address_components[types='postal_code']/long_name\" sourceType=\"json\" target=\"parameter:list-postal-code\"/&gt;\n            &lt;mapping sourceRef=\"geometry/location/lat\" sourceType=\"json\" target=\"parameter:list-latitude\"/&gt;\n            &lt;mapping sourceRef=\"geometry/location/lng\" sourceType=\"json\" target=\"parameter:list-longitude\"/&gt;\n            &lt;mapping sourceRef=\"concat(geometry/location/lat, ',', geometry/location/lng)\"  sourceType=\"json\" target=\"parameter:list-latitude-longitude\"/&gt;\n        &lt;/mapping&gt;\n\n        &lt;!-- All the objects are returned in this table structure that mimics the JSON return structure --&gt;\n        &lt;mapping source=\"transport:response-entity\" sourceRef=\"results/address_components\" sourceType=\"json\" target=\"parameter:address-information\"&gt;\n          &lt;mapping sourceRef=\"long_name\" target=\"parameter:long-name\"/&gt;\n          &lt;mapping sourceRef=\"short_name\" target=\"parameter:short-name\"/&gt;\n          &lt;mapping sourceRef=\"types[1]\" target=\"parameter:type-1\"/&gt;\n          &lt;mapping sourceRef=\"types[2]\" target=\"parameter:type-2\"/&gt;\n        &lt;/mapping&gt;\n\n      &lt;/mapping&gt;\n    &lt;/serviceMapping&gt;\n  &lt;/outbound&gt;\n&lt;/serviceDescription&gt;\n</code></pre> <p>Note a few things:</p> <ol> <li> <p>The outer mapping references the root results element</p> </li> <li> <p>All the rows will be represented by the child mappings.  The child mappings use relative references to specify where the source comes from (sourceRef).  This means that the \"results\" list object will contain all the rows that are returned from the service call.  Each row will have the parameters that are defined by all the inner/child mappings.</p> </li> <li> <p>XPath is used to parse the JSON results and place each data item into its own named parameter,  for example:  <pre><code>address_components[types='route']/long_nameequals list-street-name\n</code></pre></p> </li> <li> <p>A new output parameter was added and set to the concatenation of the latitude and longitude.</p> </li> <li> <p>Localizing Service Descriptions The name and description elements allow you to localize an HCL Leap Service Description in multiple languages using duplicate elements, each with a different xml:lang attribute and contents.</p> </li> <li>Mapping Data for a Service Description The serviceMapping element of the Service Description contains all the information needed for the HCL Leap server to map data from the Service Description inbound data to the Service Transport</li> <li>Deploying a Service Description This topic contains information about how to deploy an HCL Leap Service Description.</li> <li>Troubleshooting a service description How to troubleshoot a custom service description that is not working.</li> </ol> <p>Parent topic: Services</p>"},{"location":"ref_service_troubleshooting_service_description.html","title":"Troubleshooting a service description","text":"<p>This page is dedicated to helping you learn how to successfully create a service description file that connects to a web service. </p> <p>Enable additional logging</p> <p>The first step to any troubleshooting is to enable the trace logging. Add the trace string \"com.ibm.form.*=finest\" using the appropriate method according to your deployment.</p> <p>Now you can execute the service and there will be a trace file that contains more detailed information about the service call.</p> <p>Verify service URL</p> <p>Within the logs you will see how the URL is built up (with whatever parameters you supply) <pre><code>[17/04/14 13:49:12:534 EDT] 00001884 HTTPServiceTr 1 com.ibm.form.nitro.service.services.example.HTTPServiceTransport run Request URL is https://server:port/context\n</code></pre></p> <p>Identify how the parameters/constants are resolved</p> <p>Take this declaration in the XML: <pre><code>&lt;constant&gt;\n  &lt;id&gt;Content-Type&lt;/id&gt;\n  &lt;value&gt;&lt;![CDATA[text/xml; charset=utf-8]]&gt;&lt;/value&gt;\n&lt;/constant&gt;\n ```\n\nYou would then see this in the trace.log:\n\n```text\n[17/04/14 13:49:12:503 EDT] 00001884 Mapper        3 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Looking up source value with scheme constant:Content-Type\n[17/04/14 13:49:12:503 EDT] 00001884 Mapper        3 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Source value is not a list, performing simple mapping\n[17/04/14 13:49:12:504 EDT] 00001884 Mapper        1 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Target value is com.ibm.form.nitro.service.services.impl.mapping.MapValue@5adb4933\n[17/04/14 13:49:12:504 EDT] 00001884 Mapper        3 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Resolving target transport:request-header-Content-Type\n[17/04/14 13:49:12:504 EDT] 00001884 Mapper        1 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Source value is text/xml; charset=utf-8\n[17/04/14 13:49:12:505 EDT] 00001884 Mapper        3 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Target value is not a string, or xml\n[17/04/14 13:49:12:505 EDT] 00001884 Mapper        3 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Setting reference null to text/xml; charset=utf-8\n</code></pre></p> <p>Verify the content sent by the service: <pre><code>[17/04/14 13:49:12:514 EDT] 00001884 Mapper        1 com.ibm.form.nitro.service.services.impl.mapping.Mapper visit Source value is &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"&amp;gt;&amp;lt;SOAP-ENV:Body&amp;gt;&lt;tns:UpdateListItems xmlns:tns=\"http://namespace/soap/\"&amp;gt;&amp;lt;tns:listName/&amp;gt;&amp;lt;tns:updates&amp;gt;&lt;Batch OnError=\"Continue\" ListVersion=\"1\"&gt;&lt;Method ID=\"1\" Cmd=\"New\"&gt;&lt;Field Name=\"Title\"&gt;223456&lt;/Field&gt;&lt;/Method&gt;&lt;/Batch&gt;&lt;/tns:updates&gt;&lt;/tns:UpdateListItems&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;\n</code></pre></p> <p>Identify root cause of service failure <pre><code>[17/04/14 13:49:12:539 EDT] 00001884 StandardExcep E com.ibm.form.nitro.platform.StandardExceptionMapper toResponse 4ef795f1-8929-44ab-a7b9-366453cc2401\n                                 com.ibm.form.nitro.service.exception.AppAdminUserException: Unable to successfully execute service call. Reason: java.util.ArrayList incompatible with java.lang.String\n</code></pre></p> <p>The error in this case, means that the service description has a string variable and it is trying to be assigned to a \"list\" or vice versa.  After inspecting the xml file, we can see that there was an error in the servicemapping.  The following was the line in error</p> <pre><code>&lt;mapping source=\"parameter:listName\" \n         sourceType=\"NOOP\" \n         target=\"transport:request-entity\" \n         targetRef=\"SOAP-ENV:Envelope/SOAP-ENV:Body/tns:UpdateListItems/tns:listName\" \n         targetType=\"STRING\" \n&gt;  \n</code></pre> <p>This mapping did not have a closing tag - therefore it was assumed to be a list object (rather then a string).  The fix was to add a trailing slash:</p> <pre><code>&lt;mapping source=\"parameter:listName\" \n         sourceType=\"NOOP\" \n         target=\"transport:request-entity\" \n         targetRef=\"SOAP-ENV:Envelope/SOAP-ENV:Body/tns:UpdateListItems/tns:listName\" \n         targetType=\"STRING\" \n/&gt;  \n</code></pre> <p>Parent Topic: Service Description</p>"},{"location":"ref_service_wsdl_ovr.html","title":"Using the service description tool for WSDL web service","text":"<p>This tool is used to build a service description to expose services for WSDL based web service.</p>"},{"location":"ref_service_wsdl_ovr.html#overview","title":"Overview","text":"<p>This tool is built specifically for users who have a WSDL that defines the web service. The user can supply the WSDL file and the tool generates the service descriptions for each operation defined in the WSDL. The tool generates a service description for each operation for each binding for each service port. It is a command line tool.</p>"},{"location":"ref_service_wsdl_ovr.html#requirements","title":"Requirements","text":"<p>You must have a valid WSDL file to use this tool. You can point to the file on the web with a URL or on a local machine with a file path.</p> <p>The binding style for your WSDL must be RPC/Encoded or Document/Literal and must be declared in the file. The tool reads the binding style with the following attributes on its XPath values:</p> <pre><code>wsdl:binding/soap:binding/@style=[document|rpc] \nwsdl:binding/wsdl:operation/wsdl:input/@use= [literal|encoded].\n</code></pre> <p>You can use a WSDL file that declares the schema within the file, or you can use an external schema that is included or imported using a file path or URL. The tool scans for a schema file mySchema.xsd base on the relative path you specify.</p> <ul> <li>WSDL service description tool parameters Build a command to expose services for a WSDL based web device.</li> <li>Troubleshooting the WSDL service description generator - FAQ Use the following information to help you troubleshoot your WSDL service description generator.</li> </ul> <p>Parent topic: Services</p>"},{"location":"ref_service_wsdl_param.html","title":"WSDL service description tool parameters","text":"<p>Build a command to expose services for a WSDL based web device.</p>"},{"location":"ref_service_wsdl_param.html#running-the-wsdl-service-description-tool","title":"Running the WSDL service description tool","text":"<p>At the command line prompt, type the following command to activate the tool:</p> <pre><code>java -jar serviceDescriptionGenerator.jar -wsdlFile=webService.wsdl\n</code></pre> <p>In this command,</p> <p>serviceDescriptionGenerator.jar: is the name of the executable .jar file.</p> <p>-wsdlFile:  the command you use if the WSDL file is local.</p> <p>webService.wsdl  is the file name of the WSDL file.</p> <p>Use the following options to customize the commands for your file:</p> <p>Table 1. WSDL command optionsSummary of the support commands </p> Command Description Note -wsdlFile Specifies the file location of the WSDL file You must use either this option or the -wsdlUri option in the command you enter -wsdlUri Specifies the URI of the WSDL file You must use either this option or the -wsdlFile option in the command you enter. -saveTo You can specify a location where the generated service descriptions will be created with this command. The default is the current working directory. Optional -defaultLocale You can specify the locale used to generate the service description. Optional The default is English. -transformNames You can convert the service description parameter names to a more readable format. It supports camelCase, underscores and dashes. Optional The default is false. The possible values are true or false. -credentialProvider Adds a credential provider to all generated service description. The values are basic and cookie. -realm Use when the credential provider is set to basic. Optional -cookies Use when the credential provider is set to cookie. Optional -log Set the logging level of messages displayed to the user. The default is WARNING. The possible values are ALL, CONFIG, FINE, FINER, FINEST, INFO, OFF, SEVERE, and WARNING. -help Displays a quick reference of the commands for the tool. Optional"},{"location":"ref_service_wsdl_param.html#schema-data-type-interpretation","title":"Schema Data Type Interpretation","text":"<p>In cases where an element or attribute type is a union of two or more schema data types, the parameter type will be set to string.</p> <p>The schema data type <code>xsd:anyType</code> is valid schema data type. However, there is no equivalent parameter type for it. Therefore, the tool is unable to create the equivalent parameter for any elements and attributes with this type.</p> <p>A parameter type depends on its schema data type. The following table lists the equivalent schema data types for a given parameter type.</p> <p>Table 2. Schema data types and its equivalent service parameter data type </p> Service Description Parameter Type Schema Data Type String <ul> <li> string&gt;</li> <li> gYearMonth</li> <li> gMonthDay</li> <li> gYear</li> <li> gDay</li> <li> gMonth</li> <li> hexBinary</li> <li> base64Binary</li> <li> anyURI</li> <li> QName</li> <li> NOTATION</li> <li> normalizedString</li> <li> token</li> <li> language</li> <li> Name</li> <li> NMTOKEN</li> <li> NCName</li> <li> NMTOKENS</li> <li> ID</li> <li> IDREF</li> <li> ENTITY</li> </ul> Integer <ul> <li> integer</li> <li> nonPositiveInteger</li> <li> long</li> <li> nonNegativeInteger</li> <li> negativeInteger</li> <li> int</li> <li> short</li> <li> byte</li> <li> unsignedLong</li> <li> postiveInteger</li> <li> unsignedInt</li> <li> unsignedShort</li> <li> unsignedByte</li> </ul> Boolean Boolean  Decimal Decimal  Float |Float  Double Double  Duration Duration  DateTime DateTime  Time Time  Date Date  <p>The parameter description contains any restrictions of an element or attribute. The description contains the schema data type, all restrictions and all values of each restriction.</p> <p>Parent topic: Using the service description tool for WSDL web service</p>"},{"location":"ref_services_toc.html","title":"Services","text":"<p>The following topics provide reference information about adding services to HCL Leap.</p> <ul> <li>Basic Credentials Provider This topic describes Basic Credentials Providers used within a Service Description.</li> <li>Cookie Credentials Provider This topic describes Cookie Credentials Provider used within a Service Description.</li> <li>Java 2 Connector (J2C) Authentication Credentials Provider This topic describes J2C Authentication Credentials Providers that are used within a Service Description.</li> <li>Service Description A Service Description provides a specific interface to a Service Transport. The Service Description describes the inputs and outputs when you configure services within the HCL Leap mapping user interface.</li> <li>Using the service description tool for WSDL web service This tool is used to build a service description to expose services for WSDL based web service.</li> <li>HTTP Service Transport This topic provides reference information on HTTP Service Transports used in HCL Leap.</li> <li>Send Email service This topic provides reference information on the Send Email service in HCL Leap.</li> </ul> <p>Parent topic: Reference</p>"},{"location":"reference_toc.html","title":"Reference","text":"<p>The documents in this section provide reference material and samples for HCL Leap.</p> <ul> <li>REST API reference The REST API can be used by other programs to communicate with Leap.</li> <li> <p>JavaScript API </p> </li> <li> <p>Services The following topics provide reference information about adding services to HCL Leap.</p> </li> <li>Embedding items in an iframe You can use iFrames to embed charts and applications in a web page.</li> <li>Embedding API The Embedding API can be used to embed a Leap form directly in another webpage without using an &lt;iframe&gt;. The Leap form will be inserted into the DOM of the hosting page and can be interacted with using the Leap JavaScript API or any custom JavaScript. Additionally, the style of items in the Leap form can be customized by the CSS of the hosting page.</li> <li>Creating customized Cascading Style Sheets You can apply your own custom Cascading Style Sheet (CSS) to the rendering of your HCL Leap application. To create a custom theme, you must be familiar with the basic concepts of CSS.</li> <li>Custom Widget API This API provides a mechanism to incorporate custom widgets into the HCL Leap product.</li> </ul>"},{"location":"ru_creating_rules_in_your_form.html","title":"Creating rules in your application","text":"<p>Rules help you gather the correct information from users and organize your information after data is entered in a form. You can create composite rules that govern how your form, and the data in your form behaves.</p> <p>With the Rules feature, you can create a dynamic user experience that ensures accurate data capture, and enforcement of business rules. Rules allow you to guide the user through the form by hiding questions, or pages, that are not relevant. Rules also allow you to enforce your business validation rules within the form to ensure that data is valid before the form is submitted. The following steps describe how to set rules that require users to enter more information depending on how the first question is answered.</p>"},{"location":"ru_creating_rules_in_your_form.html#rule-dialog","title":"Rule Dialog","text":"<ol> <li> <p>The rule may be given a custom name by entering it into the Rule Name field.</p> </li> <li> <p>Each Rule can perform multiple actions; hide/show, enable/disable, required/not required, valid/not valid.  When you define an action, the inverse is also true.  For example in the above screenshot, if marital status equals \u201cMarried\u201d of \"Common-law\" then name of spouse will be shown which also means if marital status is \u201cSingle\u201d or not selected then name of spouse will be hidden.</p> </li> <li> <p>The action action to perform, see Rule Actions.</p> </li> <li> <p>The field that is part of the condition.</p> </li> <li> <p>The operator, see Rule Operators.</p> </li> <li> <p>The field value that is part of the condition.</p> </li> <li> <p>Apply will create the rule but leave the dialog open, Apply and Close will create the rule and close the dialog, and Cancel will close the dialog and it will not keep any changes made since the last time \u201cApply\u201d was clicked or the dialog was opened.  If you navigate to a different rule, before applying your changes you will see a dialog warning of unsaved changes.  If you click \u201cApply Changes\u201d then your rule modifications will be saved.  If you click \u201cDiscard Changes\u201d then any changes made will be thrown away.  If you click \u201cCancel\u201d then the attempt to navigate away from the current rule will be canceled.</p> </li> <li> <p>Add or remove additional actions.</p> </li> <li> <p>Edit a condition.</p> </li> <li> <p>Change the relationship of the conditions.  If there are multiple conditions they will either be evaluated where all must be true (\"AND\") or where only one must be true (\"OR\").</p> </li> <li> <p>Filters the rules shown on the left based on the field selected.</p> </li> <li> <p>Changes the sort order of the rules.</p> </li> <li> <p>A saved rule.  Clicking on the 'X' will prompt the user about deleting the rule; clicking 'yes' will delete the rule.</p> </li> <li> <p>Click 'Add Rule' to add a new rule.</p> </li> </ol> <p>Note: As you create rules it is important to remember that rules can affect each other and in some cases completely counteract what you have defined.  You should never refer to the same item in the \u201cPerform this action\u201d section for multiple rules.  The general rule here is that if there are conflicts then the \u201clast\u201d rule wins.</p>"},{"location":"ru_creating_rules_in_your_form.html#rule-operators","title":"Rule Operators","text":"<p>The operator defines how the operands will be evaluated.  The available operators will change based on the items referenced within the rule.</p> Operator Description After Returns true if the date specified is \u201cafter\u201d the exact value or the value of the other form item specified. Before Returns true if the date specified is \u201cbefore\u201d the exact value or the value of the other form item specified. Between Checks if the value of the selected field falls alphabetically between either two fixed values or other form items.  i.e. \u201cRed\u201d is between \u201cGreen\u201d and \u201cYellow\u201d because \u201cR\u201d is between \u201cG\u201d and \u201cY\u201d in the alphabet.  Case matters here, as the string is evaluated against the alphabet by first scanning the uppercase letters (A-Z) and then the lowercase (a-z).  For example if you specified between \u201cGreen\u201d and \u201cbrown\u201d, then \u201cRed\u201d would be valid but \u201cred\u201d would not, because the alphabet range would be A-Z + a-b. Contains Does the specified string contain the fixed value or other field value. This function recognizes case. Day is Compares the day of the date specified with an exact value or the value of another item. Does not equal Does not include Ends With Does the specified string end with the fixed value or other field value. This function recognizes case. Equals Does the specified string equal the fixed value or other field value. Case matters, \u201cc\u201d does not equal \u201cC\u201d. Follows Does the specified string come after the fixed value or other field value in the alphabet. i.e. \u201cRed\u201d follows \u201cGreen\u201d.  This function recognizes case. Includes Matches Does the specified string match after the fixed value or other field value.  Similar to contains, it is true if the specified string can be found anywhere in the value.  This function recognizes case. Month is Compares the month of the date specified with an exact value or the value of another item. Precedes Does the specified string come before the fixed value or other field value in the alphabet. i.e. \u201cRed\u201d precedes \u201cYellow\u201d.  This function recognizes case. Starts with Does the specified string start with the fixed value or other field value. This function recognizes case. Has value Has no value Year is Compares the year of the date specified with an exact value or the value of another item."},{"location":"ru_creating_rules_in_your_form.html#numbercurrency-operators","title":"Number/Currency Operators","text":"<p>These are the operators for number and currency fields.</p> Operator Between Does not equal Equals Greater than Greater than or equals Less than Less than or equals"},{"location":"ru_creating_rules_in_your_form.html#single-line-multi-line-operators","title":"Single Line / Multi-Line Operators","text":"<p>These are the operators for single-line and multi-line fields.</p> Operator Between Contains Ends with Equals Follows Matches Precedes Starts with Has value Has no value"},{"location":"ru_creating_rules_in_your_form.html#select-one-checkbox-dropdown-operators","title":"Select One / Checkbox / Dropdown Operators","text":"<p>These are the operators for select one, checkbox and dropdown fields.</p> Operator Equals Does not equal Has value Has no value"},{"location":"ru_creating_rules_in_your_form.html#select-many-operators","title":"Select Many Operators","text":"<p>These are the operators for select many fields.</p> Operator Matches Does not match Includes Does not include Has value Has no value"},{"location":"ru_creating_rules_in_your_form.html#time-timestamp-operators","title":"Time / Timestamp Operators","text":"<p>These are the operators for time and timestamp fields.</p> Operator After Before Between Has value Has no value"},{"location":"ru_creating_rules_in_your_form.html#date-operators","title":"Date Operators","text":"<p>These are the operators for date fields.</p> Operator After Before Between Day is Equals Has value Has no value Month is Year is"},{"location":"ru_creating_rules_in_your_form.html#rule-actions-behaviors","title":"Rule Actions / Behaviors","text":"<p>Rules can be set for the following actions/behaviors:</p>"},{"location":"ru_creating_rules_in_your_form.html#show-or-hide","title":"Show or Hide","text":"<p>You can set data entry items, buttons, and containers to be hidden, or visible.</p>"},{"location":"ru_creating_rules_in_your_form.html#enable-or-disable","title":"Enable or Disable","text":"<p>You can set buttons and data entry items as enabled or disabled.</p>"},{"location":"ru_creating_rules_in_your_form.html#valid-or-not-valid","title":"Valid or Not Valid","text":"<p>In a data entry item, such as a Single Line Entry field, you can set conditions on what type of information is acceptable. For example, in a timesheet application, you can set a rule that the check-out time cannot occur before a check in time.</p>"},{"location":"ru_creating_rules_in_your_form.html#required-or-not-required","title":"Required or Not required","text":"<p>You can choose whether you want data entry items to be mandatory, or optional.</p>"},{"location":"ru_creating_rules_in_your_form.html#additional-general-information-on-rules","title":"Additional general information on Rules","text":"<ul> <li>You can add multiple Boolean operators, such as AND, and OR, for each rule. However, you cannot mix the two conditions in a rule.</li> <li>You can name and rename rules. It is useful to give each rule a unique and descriptive name. If you have several rules with similar operations, a descriptive name lets you quickly find the specific rule without having to open each one to view the details.</li> <li>You can search rules based on form item.</li> <li>To set a new rule, use the Edit rules icon in each form item. You can also create rules for pages and buttons. You can use the icon to open a rule and edit it.</li> <li>After a rule is set, a checkmark appears on the Rule icon for the form item, as well as any form item involved in the rule. This makes it easy to see which form items are used in rules.</li> <li>If you attempt to delete a form item that is used in a rule. If you agree, you delete the rule. If you duplicate a field, the rule is duplicated with it.</li> <li>A field's value is not cleared if its behavior changes because of a rule.  You may need to explicitly clear the value if you do not want the previously entered value to be saved.</li> </ul> <p>Note: When you set rules for Number or Currency form items, you must set the default value of the form item to zero in the Properties side panel. In the Properties side panel, set the minimum value to zero. If the Number or Currency form item is blank, it does not default to zero, and any rule you set does not work properly.</p> <ul> <li>Setting rules on form items You can set rules that govern how form items appear in a form.</li> <li>Setting rules on pages in an application You can set rules that govern how pages are shown or hidden in a form.</li> <li>Setting rules on Stages You can direct the workflow of an application by setting rules on buttons within Stages.</li> </ul>"},{"location":"ru_creating_rules_in_your_form.html#examples","title":"Examples","text":""},{"location":"ru_creating_rules_in_your_form.html#rule-with-an-and-condition","title":"Rule with an 'and' condition","text":"<p>This example demonstrates a rule using an 'and' condition.  The field will be visible and required if both questions are 'Yes'.</p> <p></p> <p>The next image shows the rule in action.</p> <p></p>"},{"location":"ru_creating_rules_in_your_form.html#rule-with-an-or-condition","title":"Rule with an 'or' condition","text":"<p>This example demonstrates a rule using an 'or' condition. The field will be visible and required if either of the questions are 'Yes'.</p> <p></p> <p>The next image shows the rule in action.</p> <p></p>"},{"location":"ru_creating_rules_in_your_form.html#handling-more-complex-logic","title":"Handling more complex logic","text":"<p>The Rules dialog does have its limitations and you may find that you have certain scenarios where you need additional flexibility.  You can create your own customized behavior by using JavaScript.</p> <p>Within JavaScript we can create any complex comparison.  There are a few things that you need to know to get started creating your own logic:</p> <ul> <li>The AND operator in JavaScript is &amp;&amp;</li> <li>The OR Operator in JavaScript is ||</li> <li>You can control the order that conditions are evaluated by wrapping them in parenthesis. The example below, the condition will be true if a=1 AND b=2 OR if c=3 AND d=4.</li> </ul> <pre><code>if ( (a == 1 &amp;&amp; b == 2) || (c == 3 &amp;&amp; d == 4) ) {\n  // do something\n}\n</code></pre> <p>Parent topic: Adding dynamic behavior</p>"},{"location":"ru_set_rule_on_form_items.html","title":"Setting rules on form items","text":"<p>You can set rules that govern how form items appear in a form.</p> <p>The following steps describe how to add form items to your application and to create a sample rule on a form item. The rule will show a field if a user selects a specific input. For example, if the employee is full-time, fields appear requesting additional information. If the employee is not full-time, the fields remain hidden.</p> <ol> <li> <p>Add a Select One item to your form.</p> </li> <li> <p>Click the item\u2019s title to change it to \u201cAre you a full-time worker?\u201d. Click the check box beside Required to indicate that the user must fill in this form item to submit the form.</p> </li> <li> <p>In the properties side panel, under Options:</p> <ol> <li> <p>Change the Displayed Value of the first row to Yes.</p> </li> <li> <p>Click the Add option button to insert a second option row.</p> </li> <li> <p>Change the Displayed Value of the second row to No.</p> </li> </ol> </li> <li> <p>Add a Single Line entry to the form. Click the box to the left of the title.</p> <p>A red asterisk appears to indicate the item is mandatory and must be completed for the user to submit the form.</p> </li> <li> <p>Change the title to \u201cWhere is your work site located?\u201d</p> </li> <li> <p>Click the Edit Rules icon for \u201cWhere is your work site located?\u201d</p> <p>The Rules window opens.</p> <ol> <li> <p>Click Add Rule.</p> <p>If you intend to have several rules on a form, you should give each rule a unique name so it is easy to find. For this example, leave the name as Rule 1</p> </li> <li> <p>In the Perform this action: section, the name of the form item is automatically inserted as the item on which you want to set the rule. Select Show from the action menu.</p> </li> <li> <p>In the When the following condition is true: section, select Are you a full time employee? from the first menu, and then Equals in the second menu.</p> </li> <li> <p>To the right of A fixed value, select the Yes radio button.</p> </li> <li> <p>Click Apply and Close.</p> </li> </ol> </li> <li> <p>Add a Single Line entry to the form. Click the box to the left of the title.</p> <p>A red asterisk appears to indicate the item is mandatory and must be completed for the user to submit the form.</p> </li> <li> <p>Change the title to \u201cWhat is your job title?\u201d</p> </li> <li> <p>Click the Edit Rules icon for \u201cWhere is your work site located?\u201d</p> <p>The Rules window opens.</p> <ol> <li> <p>Click Add Rule.</p> <p>Note that this rule is named Rule 2.</p> </li> <li> <p>In the Perform this action: section, the name of the form item is automatically inserted. Select Show from the action menu.</p> </li> <li> <p>In the When the following condition is true: menu, select Are you a full time employee? from the first menu, and then Equals in the second menu.</p> </li> <li> <p>To the right of A fixed value, select the Yes radio button.</p> </li> <li> <p>Click Apply and Close</p> </li> </ol> <p>The rule is set so that if the user states they are a full-time worker, the additional fields appear and request information on the work location and job title.</p> </li> </ol> <p>Parent topic: Creating rules in your application</p>"},{"location":"ru_setting_rules_on_pages_in_an_application.html","title":"Setting rules on pages in an application","text":"<p>You can set rules that govern how pages are shown or hidden in a form.</p> <p>Before using the following steps, create an application with two pages.</p> <p>Rules in the HCL Leap can help you administer a form so different groups of users are asked for different information. You can add multiple Boolean conditions, such as AND, or OR, for each rule. The following example hides form pages from users whose salary does not meet the rule qualification of $30,000. To use the following steps, you must have multiple pages in your form.</p> <ol> <li> <p>On Page 1 of your form, add a Currency item to your form and title it Salary.</p> </li> <li> <p>Click the Rules button on Page 2 of your form.</p> </li> <li> <p>Click Add Rule.</p> </li> <li> <p>In Perform this action: make no changes.</p> <p>The default value is \u201chide\u201d.</p> </li> <li> <p>In When the following condition is true, select Show items on all pages, and select Salary.</p> </li> <li> <p>Select Less than from the menu.</p> </li> <li> <p>Leave A fixed value in the next menu and type 30000 in the blank field.</p> </li> <li> <p>Click Apply and Close to save your changes and close the Rules window.</p> <p>The rule is now set so when a user enters less than $30,000, they are not shown the second page of the form.</p> </li> </ol> <p>Parent topic: Creating rules in your application</p>"},{"location":"ru_setting_rules_on_stage_actions.html","title":"Setting rules on Stages","text":"<p>You can direct the workflow of an application by setting rules on buttons within Stages.</p> <p>In a stage, you can build two approval buttons that appear identical, but send the user to a different page or stage. Which button appears to the user is determined by information the user enters, and the rules set on the form. To use the following instructions you must have stages created for your form. The instructions describe how to use rules and stages to create a button that provides multiple functionality for form designers away from the visual display to a user. The Submit button requests different information from users based on whether they make more or less than $30,000.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Click the Visibility button at the top of the screen, select the desired stage (i.e. Start), and click anywhere in the section at the bottom of the page where the submit buttons are shown.</p> </li> <li> <p>Click the Edit Rules icon for the desired submit button.</p> </li> <li> <p>Open the Rules window for the Submit button of the Start stage.</p> </li> <li> <p>Click Add Rule.</p> </li> <li> <p>In the Perform this action section, leave the defaults of Start - Submit in the first menu, and Hide in the second menu.</p> </li> <li> <p>In When the following condition is true, select Show items on all pages, then selectSalary.</p> </li> <li> <p>Set the operation to Less than.</p> </li> <li> <p>Leave A fixed value in the next menu and type 30000 in the blank field.</p> </li> <li> <p>Click Apply and Close to save your changes and close the Rules window.</p> <p>The rule is now set so users will not see the Submit button if they makes less that $30,000.</p> </li> <li> <p>Click the Add Action icon to add another Submit button.</p> <p>A duplicate Submit button appears.</p> </li> <li> <p>Follow steps 2 through 9, but set the operation to Greater than or equals.</p> </li> </ol> <p>The form developer sees two different buttons that perform two different actions. When you preview the form, only one Submit button appears. You can now create stages and form pages specific to the user\u2019s salary.</p> <p>Parent topic: Creating rules in your application</p>"},{"location":"rules_widgets.html","title":"Rules","text":"<p>App authors will be able to incorporate custom widgets in rules.</p>"},{"location":"rules_widgets.html#section_yp4_scn_jyb","title":"Display Widgets","text":"<p>Actions:</p> <ul> <li>Show</li> <li>Hide</li> </ul>"},{"location":"rules_widgets.html#section_pwd_w2n_jyb","title":"Data Widgets","text":"<p>Actions:</p> <ul> <li>Show</li> <li>Hide</li> <li>Enable</li> <li>Disable</li> <li>Valid</li> <li>Not Valid</li> <li>Required</li> <li>Not Required</li> </ul> <p>Condition Operators:</p> <ul> <li>Based on widget's datatype.</li> </ul> <p>Parent topic: Custom Widget API</p>"},{"location":"sad_allowing_users_to_save.html","title":"Saving work as a draft","text":"<p>Some applications cannot be completed by the user in one session. If your application is very large or complicated, you can allow users to save their work as a draft before submitting it.</p> <p>In any stage, you can enable authenticated users to save their work as a draft. When a user returns to a saved draft in a form, a message asks whether to start a new form, or continue working on the draft. You can add an option for users to email themselves a link to their own draft. A user can save one draft on any stage at any time. The draft is also reflected in View Data.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Click Add a save draft button.</p> <p>A Save Draft button appears with the Submit button.</p> </li> <li> <p>Click on the Save Draft button. In the Properties side panel, click the Include email option in display message check box to ask users if they want to be sent an email with a URL of their draft.</p> <p>Note: The Save Draft button must be added manually to each stage of the form.</p> </li> </ol> <p>Parent topic: Adding stages to an application</p>"},{"location":"se_cancel_submit-event.html","title":"Cancel submit event","text":"<p>Have you ever wanted to update the form with some programmatic content after the user clicks submit but before the form gets submitted?  </p> <p>In this example we want to assign the form a unique ID right at the time the user submits the form.  Using the validateButtonPressed event we can cancel the submit event, perform our asynchronous service call to get our next form ID and then programmatically submit the form.  A global variable is used to determine if the form is complete and can be submitted.</p> <p>In the validateButtonPressed event:</p> <pre><code>// check the global variable that indicates a submission is allowed - this gets set by our service handler once the ID has been retrieved\n\nif(app.getSharedData().submitAllowed) {\n  app.getSharedData().submitAllowed = false; //we have to reset the global variable for subsequent submissions within the same browser session\n  return true;\n} else { \n  // We get here the first time the user clicks submit.  We call the async service and return false which cancels the submit event\n  form.getServiceConfiguration('SC_ServiceConfig1').callService();\n  return false;\n}\n</code></pre> <p>In the form onLoad event place a listener for the service that is getting your ID:</p> <pre><code>//this gets called when the service is complete\n\nvar srv = form.getServiceConfiguration('SC_ServiceConfig1');\nsrv.connectEvent(\"onCallFinished\", function(success)\n{\n  if(success) {\n\n   // set the global flag to true so that when we programmatically trigger the submit it is allowed to proceed\n   app.getSharedData().submitAllowed = true;\n\n   // set ID to next number\n   BO.F_SingleLine0.setValue(parseFloat(BO.F_Number.getValue()) + 1);\n\n   // trigger the submit button\n   var actionButtons = form.getStageActions();\n   for(var i=0; i&lt;actionButtons.length; i++) {\n     if(get(actionButtons, i).getId() === 'S_Submit')\n       get(actionButtons, i).activate();\n  }\n});    \n</code></pre> <p>Parent Topic: Incorporating web services into your applications</p>"},{"location":"se_permission_for_sharing_data_with_other_apps.html","title":"Defining permissions to share data with other applications","text":"<p>HCL Leap applications can share data through services with other Leap applications. To allow other applications access to the data from the application you are designing, you must define the security permissions.</p> <p>When setting permissions, you are defining access to the data based on the application, and user, that calls the service. For example, you create an application called \u201cProduct Names\u201d. You want your \u201cPurchase Order\u201d application to read the data stored in the \u201cProduct Names\u201d application, and use the data to populate a drop-down list. In the \u201cProduct Names\u201d application, create a \u201cPurchase Order\u201d user group in Roles, then give that Read access. You can also allow other applications to write data to the \u201cProduct Names\u201d application. For another application to write data, it must have Write access.</p> <p>For more information about creating roles, see Defining basic security roles for users. For more information on using other Leap applications as services, see Integrating your application with existing Leap applications.</p> <ol> <li> <p>Go to the Access tab.</p> </li> <li> <p>Select Design Settings.</p> </li> <li> <p>For a specific role, click the Read, Write, or both check boxes.</p> </li> </ol> <p>Parent topic: Securing</p>"},{"location":"se_security_toc.html","title":"Securing","text":"<p>When building applications, user roles require various levels of security access. A manager is able to review submitted forms, but an administrator can delete them. The following topics describe how to set security levels for all levels of users.</p> <p>Leap allows application designers to compose applications that combine user interfaces, data records, and a stages-based lifecycle. The Leap security settings govern access to applications and data by defining who can edit, maintain, deploy applications, and access data for submitted forms.</p> <p>You can define your security rules using the Access tab from within the Design environment. These topics describe the Leap security concepts and how to use the Access tab to grant access to users in your organization.</p> <ul> <li>Defining basic security roles for users Create roles for users in your organization so they can work with data that is relevant to them.</li> <li>Assigning users or groups to roles Give the users in your organization permission to work with the data relevant to them by assigning them roles.</li> <li>Setting Stage permissions Setting Stage permissions defines the \u201cCreate\u201d, \u201cRead\u201d, \u201cUpdate\u201d, and \u201cDelete\u201d permissions for each role in a stage.</li> <li>Defining permissions to share data with other applications HCL Leap applications can share data through services with other Leap applications. To allow other applications access to the data from the application you are designing, you must define the security permissions.</li> <li>Assigning users to maintain the application To define who can edit an HCL Leap application, use the design settings in the Access tab.</li> <li>Setting up security for anonymous access Using the correct permissions, you can allow anonymous users to access a form.</li> </ul>"},{"location":"se_triggering_a_web_service_from_a_button.html","title":"Triggering a service","text":"<p>You can use a service to add information to a form automatically after a user triggered event.  Services can be triggered from almost anywhere within a Leap application.  </p>"},{"location":"se_triggering_a_web_service_from_a_button.html#triggeringawebservicefromabutton","title":"From a button","text":"<p>To use a service call when the user clicks a button:</p> <ol> <li> <p>Add a Button to your form from the Palette if your form does not yet have one.</p> </li> <li> <p>Select the newly added button.</p> <p>The Properties side panel opens.</p> </li> <li> <p>Select Call a service when clicked.</p> <p>A menu opens where you can:</p> <ul> <li>Select an existing web service from the menu. If you select an existing service from the menu, go to step 8.</li> <li>Create a service call by clicking Add/Edit Service Configuration. To configure a service, go to step 5.</li> <li> <p>When you click Add/Edit Service Configuration, the Service Configuration window opens.</p> </li> <li> <p>Enter the URL of your service</p> </li> <li>Select Or, select a service and select a URL from a list of available services</li> <li> <p>Click the Inputs tab.</p> </li> <li> <p>Select a source from the Select source: window.</p> </li> <li> <p>Select a target from the Select target: window.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> <p>The connected source and target are shown in the Assigned Inputs section of the page.</p> </li> </ul> </li> <li> <p>Click the Outputs tab.</p> <ol> <li> <p>Select a source from the Select source: window.</p> </li> <li> <p>Select a target from the Select target: window.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> </li> </ol> <p>The connected source and target are displayed in the Assigned Outputs section of the page.</p> </li> <li> <p>Click OK to exit the Service Configuration window.</p> </li> </ol>"},{"location":"se_triggering_a_web_service_from_a_button.html#when-the-value-of-a-form-item-changes","title":"When the value of a form item changes","text":"<p>Triggering a service when the value of a field changes is a common use case.  For example, you may want to validate field content as soon as it is entered, giving the user immediate feedback rather then waiting till they try to submit.</p> <ol> <li> <p>Click the item from which you want to trigger the service.</p> </li> <li> <p>In the Properties page, click the Events tab.</p> </li> <li> <p>Click the onItemChange event.</p> </li> <li> <p>Select the \"Call a Service\" check box and select the service from the drop down list.  If the service does not exist, you can click \"Add/Edit Service Configuration\" to create one.</p> </li> </ol>"},{"location":"se_triggering_a_web_service_from_a_button.html#when-a-new-form-is-launched","title":"When a new form is launched","text":"<p>You may want to call a service to populate the form when it is loaded for the first time.  For example, you might want to pre-populate information about the current user by calling a service that queries the corporate employee directory.  The danger in simply calling a service like this in the Form onLoad event is that it will get called in every stage so the original information would get replaced with the user that opened the form in the later stage.  To avoid this you should use the onNew event:</p> <ol> <li>Click a blank space on the design canvas.</li> <li>In the Properties pane, click the \"Call a service to pre-populate\" checkbox.</li> <li>Select the service from the \"On display of new form\" drop down list.  This will only trigger the service when a new form is created and ignore it on loads in a subsequent stage.  If the service does not exist, you can click \"Add/Edit Service Configuration\" to create one.</li> </ol> <p>Note: if you want to call a service on every subsequent load of a form (but not when it is created) then you could use the On re-load of existing form dropdown list.</p>"},{"location":"se_triggering_a_web_service_from_a_button.html#using-javascript","title":"Using javaScript","text":"<p>You can trigger a service call at anytime with JavaScript.  The syntax will change depending on where you are placing the code.  </p> <pre><code>form.getServiceConfiguration(\"&lt;Service ID&gt;\").callService();\n</code></pre> <p>The service ID can be found on the Settings tab, under the Services section on the left navigation section \u2013 click on the link that matches the form where the service was created.  A Service Configuration dialog will appear, the ID is on the Details tab.</p> <p>The basic structure for connecting an event is:</p> <pre><code>var srv = form.getServiceConfiguration('SC_serviceA');\nsrv.connectEvent(\"onCallFinished\", function(success, errorObj){\n  if(success) {\n    try {\n      // code to execute when the service completes\n    } catch(err) {\n      alert(\"SC_theService: \" + err);\n    }\n  } else {\n    // executed if an error occurs\n    // set errorObj.handled to true in the errorObj\n  }\n});\n</code></pre> <p>This code is available as a code template, which can be accessed by pressing ctrl+space twice. </p> <p>There are multiple places where you can put this code but it needs to be adjusted based on the context of where it is located.</p>"},{"location":"se_triggering_a_web_service_from_a_button.html#when-another-service-finishes","title":"When another service finishes","text":"<p>You may encounter a situation where you need to call a second service after you have received the result of the first service.  Because the service calls are asynchronous, occur at the same time, you have to connect to an event that will execute the provided code when the service completes.</p> <pre><code>var srv = form.getServiceConfiguration('SC_serviceA');\nsrv.connectEvent(\"onCallFinished\", function(success, errorObj){\n  if(success) {\n    try {\n      form.getServiceConfiguration('SC_serviceB').callService();\n    } catch(err) {\n      alert(\"SC_theService: \" + err);\n    }\n  } else {\n    // executed if an error occurs\n    // set errorObj.handled to true in the errorObj\n  }\n});\n</code></pre>"},{"location":"se_triggering_a_web_service_from_a_button.html#application-onstart-event","title":"Application onStart event","text":"<p>A good place to trigger a service when any of the forms in an application are launched is in the application onStart event.</p> <p>The form keyword does not exist at this level, therefore you have to explicitly retrieve the form for which you want to reference.</p> <p>The onStart event is executed for every form within an application.  If you try to retrieve a service that does not exist then you will get an error.  Therefore when implementing the listener in this event you must confirm that the form exists before trying to retrieve the service:</p> <pre><code>var form = app.getForm('&lt;Form ID&gt;');\nif(form !== null)\n{\n  var srv = form.getServiceConfiguration('SC_theService');\n  srv.connectEvent(\"onCallFinished\", function(success, errorObj){\n  if(success) {\n    try {\n      // put code in here to execute when service is done\n    } catch(err) {\n      alert(\"SC_theService: \" + err);\n    }\n  } else {\n    // executed if an error occurs\n    // set errorObj.handled to true in the errorObj\n  }\n});\n}\n</code></pre>"},{"location":"se_triggering_a_web_service_from_a_button.html#form-onload-event","title":"Form onLoad event","text":"<p>The form onLoad is only called when that form is loaded:     -  so you won't have to worry about checking to see if the form exists.     - you don't have to disconnect the event handler</p> <pre><code>var srv = form.getServiceConfiguration('SC_theService');\nsrv.connectEvent(\"onCallFinished\", function(success, errorObj){\nif(success) {\n  try {\n    // put code in here to execute when service is done\n  } catch(err) {\n    alert(\"SC_theService: \" + err);\n  }\n} else {\n  // executed if an error occurs\n  // set errorObj.handled to true in the errorObj\n}\n</code></pre>"},{"location":"se_triggering_a_web_service_from_a_button.html#item-event","title":"Item event","text":"<p>When you connect to an event from within an item it might get executed multiple times within a single session.  </p> <p>For example, you might connect to the 'conCallFinished' event in the onItemChange event of a field.  In this context, a new instance of the event handler will be created when the field changes.  You must disconnect the event handler, after it executes.  If you forget to do this you may see erratic behavior or code being executed multiple times.</p> <pre><code>var srv = form.getServiceConfiguration('SC_theService');\nsrv.connectEvent(\"onCallFinished\", function(success, errorObj){\n  if(success) {\n    try {\n      // put code in here to execute when service is done\n    } catch(err) {\n      alert(\"SC_theService: \" + err);\n    }\n  } else {\n    // executed if an error occurs\n    // set errorObj.handled to true in the errorObj\n  }\n  srv.disconnectEvent(hdl);\n});\n</code></pre> <p>Parent topic: Incorporating web services into your applications</p>"},{"location":"se_using_a_service_to_populate_a_drop_down.html","title":"Using a service to populate form items","text":"<p>You can use a web service to populate to a Drop Down, Select One, and Select Many form item.</p> <p>The following instructions describe how to populate a Drop Down, however the same instructions apply for populating the Select One and Select Many form items.</p> <ol> <li> <p>Select Drop Down from the Palette and drop it onto your form.</p> </li> <li> <p>Select the newly added dropdown.</p> <p>The Properties side panel opens.</p> </li> <li> <p>Click the Events tab.</p> </li> <li> <p>From the Client Side: list, select an action to associate with the service.</p> <p>A window for the web service opens. From this window, you can:</p> <ul> <li>Select a predefined action, such as Run a Formula, Call a Service, or both.</li> <li>Insert your own custom code in the Custom Actions area.</li> <li>Select Call a Service.</li> </ul> <p>From this menu, you can:</p> <ul> <li>Select an existing web service from the menu. If you select an existing service from the menu, go to step 9.</li> <li>Create a web service call by clicking Add/Edit Service Configuration. To configure a web service, go to step 6.</li> <li> <p>Cick Add/Edit Service Configuration, to open the Service Configuration window.</p> </li> <li> <p>Enter the URL of your service</p> </li> <li>Select Or, select a service and select a URL from a list of available services</li> <li> <p>Click the Inputs tab.</p> </li> <li> <p>Select a source from the Select source: window.</p> </li> <li> <p>Select a target from the Select target: window.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> <p>The connected source and target are shown in the Assigned Inputs section of the page.</p> </li> </ul> </li> <li> <p>Click the Outputs tab.</p> <ol> <li> <p>Select a source from the Select source: window.</p> </li> <li> <p>Select a target from the Select target: window.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> </li> </ol> <p>The connected source and target are shown in the Assigned Outputs section of the page.</p> </li> <li> <p>Click OK to exit the Service Configuration.</p> </li> <li> <p>All form item data is stored in database columns. For Drop Down, Select One, Select Many, and Survey items, the data column must be large enough to accommodate the largest value a user can select. The amount of space that is allocated to a database column is based on the larger of either the Storage Size parameter (50 characters), or the largest defined static value. As it is possible to pull information from a web service or from JavaScript\u2122 into the previously listed form items, Leap cannot calculate the largest size needed. To set larger database columns, modify the Saved Value character limit field to ensure that it is large enough to hold the largest value expected.</p> </li> <li> <p>Change the size of the Saved Value character limit field to the required number of characters.</p> </li> </ol> <p>Parent topic: Incorporating web services into your applications</p>"},{"location":"ser_add_service_catalog.html","title":"Adding a Service Catalog","text":"<p>A Service Catalog serves two purposes. First, a Service Catalog is a programmatic mechanism to dynamically provide Service Descriptions to HCL Leap instead of using static XML files. Second, a Service Catalog is linked to a Service Catalog Group and provides a mechanism to assign Service Descriptions to a specific Service Catalog Group.</p> <p>A Service Catalog is implemented in much the same manner as a Service Catalog Group. You first create an implementation of the IServiceCatalog interface. The recommended approach is to extend the AbstractServiceCatalog class. Your implementation and supporting files are then packaged into an OSGi bundle and deployed to the extensions directory on the Leap server. Refer to Setting up your development environment before using the following instructions.</p> <ol> <li> <p>Create a Java class</p> <p>The following example of a custom Service Catalog provides the description of a single sample service called Hello Service. This service has one input parameter and one output parameter. This custom Service Catalog is linked with the sample Service Catalog Group described in the Service Catalog Group help topic by returning the com.mycompany.services.MyServiceCatalogGroup.id from the getGroupId() method. The Hello Service service is started when My Services is selected by the application designer from the Service Catalog dropdown in the Service Configuration dialog.</p> <pre><code>package com.mycompany.services;\n\nimport com.ibm.form.nitro.service.model.*;\nimport com.ibm.form.nitro.service.services.*;\nimport java.util.*;\n\npublic class MyServiceCatalog\n    extends AbstractServiceCatalog\n    implements IServiceCatalog\n{\n    private Collection&lt;IServiceDescription&gt; mServiceDescriptions = null;\n\n    public String getGroupId()\n    {\n        return \"com.mycompany.services.MyServiceCatalogGroup.id\";\n    }\n\n    public void setServiceDescriptionBuilderFactory(IServiceDescriptionBuilderFactory pServiceDescriptionBuilderFactory)\n    {\n        if (this.mServiceDescriptions == null)\n        {\n            this.mServiceDescriptions = new ArrayList&lt;IServiceDescription&gt;();\n            try\n            {\n                IServiceDescriptionBuilder builder1 =\n                    pServiceDescriptionBuilderFactory.newDescriptionBuilder();\n                builder1.setId(\"com.mycompany.services.Hello\").setDefaultLocale(Locale.ENGLISH);\n                builder1.setName(Locale.ENGLISH, \"Hello Service\");\n                builder1.setDescription(Locale.ENGLISH, \"This service says 'Hello' to a given person\");\n                builder1.setTransportId(\"com.mycompany.services.HelloServiceTransport.id\");\n\n                // service inputs\n                IServiceBindingBuilder inboundBindingBuilder = builder1.newBindingBuilder();\n                IServiceParameterBuilder inParamBuilder1 = inboundBindingBuilder.newParameterBuilder();\n                inParamBuilder1.setName(Locale.ENGLISH, \"Person\");\n                inParamBuilder1.setDescription(Locale.ENGLISH, \"The person to say 'Hello' to\");\n                inParamBuilder1.setId(\"person\").setMandatory(true).setType(ServiceParameterType.STRING);\n                inboundBindingBuilder.addParameter(inParamBuilder1.getServiceParameter());\n                builder1.setInbound(inboundBindingBuilder.getServiceBinding());\n\n                // service outputs\n                IServiceBindingBuilder outboundBindingBuilder = builder1.newBindingBuilder();\n                IServiceParameterBuilder outParamBuilder1 = outboundBindingBuilder.newParameterBuilder();\n                outParamBuilder1.setName(Locale.ENGLISH, \"Greeting\");\n                outParamBuilder1.setDescription(Locale.ENGLISH, \"The 'Hello' greeting\");\n                outParamBuilder1.setId(\"greeting\").setType(ServiceParameterType.STRING);\n                outboundBindingBuilder.addParameter(outParamBuilder1.getServiceParameter());\n                builder1.setOutbound(outboundBindingBuilder.getServiceBinding());\n\n                IServiceDescription serviceDescription1 = builder1.getServiceDescription();\n                this.mServiceDescriptions.add(serviceDescription1);\n            }\n            catch (ServiceException ex)\n            {\n                throw new RuntimeException(ex);\n            }\n        }\n    }\n\n    public Collection&lt;IServiceDescription&gt; getServiceDescriptions(IServiceManager pManager, IOrg pOrg,\n                                                                  IUser pUser, String pFilterCatalog,\n                                                                  String pFilterStatus, String pFilterText,\n                                                                  boolean pFilterIncludesDesc,\n                                                                  Locale pFilterLocale)\n    {\n        this.filterServiceDescriptions(pManager, this.mServiceDescriptions, pFilterStatus, pFilterText,\n                                       pFilterIncludesDesc, pFilterLocale);\n        return Collections.unmodifiableCollection(this.mServiceDescriptions);\n    }\n\n    public IServiceDescription getServiceDescription(IServiceManager pManager, IOrg pOrg, IUser pUser,\n                                                     String pServiceDescriptionId)\n    {\n        for (IServiceDescription description : this.mServiceDescriptions)\n        {\n            if (description.getId().equals(pServiceDescriptionId))\n                return description;\n        }\n        return null;\n    }\n}\n</code></pre> <p>In this example, an IserviceDescriptionBuilder is used to build up a Service Description programmatically. However, IserviceDescriptionBuilder also provides methods to parse Service Descriptions from XML files.</p> </li> <li> <p>Create an OSGi Service Description</p> <p>You must create an .xml file to declare your Java class as an OSGi service. For example, create a MyServiceCatalog.xml file with the following content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;scr:component xmlns:scr=\"http://www.osgi.org/xmlns/scr/v1.1.0\" \n configuration-policy=\"optional\" \n enabled=\"true\"  \n immediate=\"true\" \n name=\"com.mycompany.services.MyServiceCatalog.service\"&gt;\n   &lt;implementation class=\"com.mycompany.services.MyServiceCatalog\" /&gt;  \n   &lt;reference bind=\"setServiceDescriptionBuilderFactory\" \n     cardinality=\"1..1\" \n     interface=\"com.ibm.form.nitro.service.services.IServiceDescriptionBuilderFactory\"\n     name=\"ServiceDescriptionBuilderFactory\" \n     policy=\"static\"/&gt;\n   &lt;service&gt;\n     &lt;provide interface=\"com.ibm.form.nitro.service.services.IServiceCatalog\"/&gt;\n   &lt;/service&gt;\n&lt;/scr:component&gt;\n</code></pre> <p>For the class attribute of the implementation element, use the fully qualified name of the Java class you created in Step 1. Ensure that the name attribute of the component element is unique. Although not required, you can make the name attribute the same as the fully qualified name of the Java class that you created in Step 1.</p> <p>Notice the inclusion of the &lt;reference&gt; element in this example. This ensures that your custom Service Catalog has access to an IServiceDescriptionBuilderFactory for programmatically building up Service Descriptions.</p> </li> <li> <p>Create a MANIFEST.MF file</p> <p>Create a MANIFEST.MF file similar to Step 3 in the Service Catalog Group help topic. Multiple OSGi services can be packaged within the same OSGi bundle. Therefore, the same MANIFEST.MF file can be used for a custom Service Catalog Group and a custom Service Catalog.</p> </li> <li> <p>Deploy the Service Catalog.</p> <p>Deployment of your Service Catalog is similar to Step 4 in the Service Catalog Group help topic.</p> <p>Multiple OSGi services can be packaged within the same OSGi bundle, so the same .jar file can be used for your custom Service Catalog Group and custom Service Catalog.</p> </li> </ol> <p>Parent topic: Providing Groups of Dynamic Services</p>"},{"location":"ser_add_service_catalog_group.html","title":"Adding a Service Catalog Group","text":"<p>A Service Catalog Group provides a way to group web services in HCL Leap.</p> <p>Refer to Setting up your development environment before starting.</p> <p>A new Service Catalog Group can be added toLeap by creating and deploying an appropriate OSGi .jar bundle.</p> <p>To the application designer, Service Catalog Groups are listed in the Service Catalog dropdown in the Leap Service Configuration dialog. This dropdown allows the application designer to filter services by the Service Catalog Group to which they belong. By default, there are two predefined groups: General and HCL Leap Applications. Providing a new implementation of a Service Catalog Group creates a group as an option in the Service Catalog dropdown. Services can be added to a particular Service Catalog Group by implementing a Service Catalog that belongs to that group.</p> <ol> <li> <p>Create a Java class</p> <p>Create a Java class that implements the com.ibm.form.nitro.service.services.IServiceCatalogGroup interface to return a unique group identifier and a readable group name. The following example adds the My Services group to the Leap.</p> <pre><code>package com.mycompany.services;\n\nimport com.ibm.form.nitro.service.services.IServiceCatalogGroup;\nimport com.ibm.form.platform.service.framework.i18n.LocaleUtils;\nimport java.util.Locale;\n\npublic class MyServiceCatalogGroup\n    implements IServiceCatalogGroup\n{\n\n    public String getGroupId()\n    {\n        return \"com.company.services.MyServiceCatalogGroup.id\"; \n    }\n\n    public String getGroupName()\n    {\n        Locale requestLocale = LocaleUtils.getRequestLocale();\n        /* use request locale to determine a translated group name */\n        return \"My Services\";\n    }\n}\n</code></pre> <p>In this example, the locale used by the user can be retrieved by using com.ibm.form.platform.service.framework.i18n.LocaleUtils.getRequestLocale(. If you are using the Eclipse IDE, its Externalize Strings wizard can extract strings for your OSGi bundle.</p> </li> <li> <p>Create an OSGi Service Description</p> <p>You must create an .xml file to declare your Java class as an OSGi service. For example, create a MyServiceCatalogGroup.xml file with the following content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;scr:component xmlns:scr=\"http://www.osgi.org/xmlns/scr/v1.1.0\" \n configuration-policy=\"optional\" \n enabled=\"true\"  \n immediate=\"true\" \n name=\"com.mycompany.services.MyServiceCatalogGroup.service\"&gt;\n   &lt;implementation class=\"com.mycompany.services.MyServiceCatalogGroup\" /&gt;  \n    &lt;service&gt;\n     &lt;provide interface=\"com.ibm.form.nitro.service.services.IServiceCatalogGroup\"/&gt;\n   &lt;/service&gt;\n&lt;/scr:component&gt;\n</code></pre> <p>For the class attribute of the implementation element, use the fully qualified name of the Java class you created in Step 1. Ensure that the name attribute of the component element is unique. Although not required, you can make the name attribute the same as the fully qualified name of the Java class that you created in Step 1.</p> </li> <li> <p>Create a MANIFEST.MF file</p> <p>Sample content:</p> <pre><code>Manifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: My Company Services\nBundle-SymbolicName: com.mycompany.services\nBundle-Version: 1.0.0.b1\nBundle-Vendor: My Company\nBundle-RequiredExecutionEnvironment: JavaSE-1.6\nService-Component: OSGI-INF/*.xml\nImport-Package: com.ibm.form.nitro.service.model,\n com.ibm.form.nitro.service.services,\n com.ibm.form.platform.service.framework.i18n\n</code></pre> </li> <li> <p>Deploy the Service Catalog Group.</p> <p>Create a .jar file that contains all the files listed in the previous steps in an OSGi bundle structure. For example:</p> <pre><code>/\n   META-INF/\n      MANIFEST.MF\n   OSGI-INF/\n      MyServiceCatalogGroup.xml\n   com/\n      mycompany/\n         services/\n            MyServiceCatalogGroup.classn\n</code></pre> <p>On the Leap server, put the .jar file in one the following directories or in a subdirectory of one of the following directories:</p> <ul> <li> <p>Windows\u2122:</p> <p>any drive:\\HCL\\Leap\\extensions\\</p> </li> <li> <p>Non Windows:</p> <p>/opt/HCL/Leap/extensions/</p> </li> </ul> <p>Note:</p> <ul> <li>If the extensions directory does not exist, you must restart the Leap server after the directory is created.</li> <li>/opt/HCL/Leap/ is not case-sensitive.</li> </ul> </li> </ol> <p>Parent topic: Providing Groups of Dynamic Services</p>"},{"location":"ser_create_custom_service_transport.html","title":"Creating your own custom Service Transport","text":"<p>By creating a custom Service Transport, you can allow HCL Leap applications to use services from any external system, or access any data source. Alternatively, the transport can implement a custom service itself without communicating with any external system or data source.</p> <p>If you plan to call an external service using HTTP, consider using the HTTP Service Transport instead. Refer to HTTP Service Transport for more information.</p> <p>A custom Service Transport can be added to the Leap environment by creating and deploying an appropriate OSGi JAR bundle. Refer to Setting up your development environment before starting.</p> <ol> <li> <p>Create a Java class</p> <p>Create a Java class that implements the com.ibm.form.nitro.service.services.IServiceTransport interface.</p> <p>The following example is a Hello example transport that returns a greeting to a person. This transport expects a single input parameter person and responds with a single output parameter greeting. In this simple example, the transport does not talk to any external system to run the service. The transport implements the service itself.</p> <pre><code>package com.mycompany.services;\n\nimport com.ibm.form.nitro.service.model.IUser;\nimport com.ibm.form.nitro.service.services.*;\nimport com.ibm.form.platform.service.framework.i18n.LocaleUtils;\nimport java.util.*;\n\npublic class HelloServiceTransport\n    implements IServiceTransport\n{\n\n    public String getId()\n    {\n        return \"com.mycompany.services.HelloServiceTransport.id\";\n    }\n\n    public ServiceResult run(IServiceDescription pDescription,\n                             IServiceCredentialsProvider pServiceCredentialsProvider, IUser pUser,\n                             Map&lt;String, Object&gt; pParameters)\n    {\n        String personName = (String) pParameters.get(\"person\");\n        Locale requestLocale = LocaleUtils.getRequestLocale();\n        String greeting = \"\";\n        if (requestLocale.getLanguage().equals(Locale.FRENCH.getLanguage()))\n            greeting = \"Bonjour\" + personName;\n        else\n            greeting = \"Hello \" + personName;\n        pParameters.put(\"greeting\", greeting);\n        ServiceResult result = new ServiceResult(200, \"success\");\n        return result;\n    }\n\n    public Collection&lt;IServiceDescription&gt; getSampleServiceDescriptions()\n    {\n        return Collections.emptyList();\n    }\n\n    public IServiceTransportMetadata getMetadata()\n    {\n        return new IServiceTransportMetadata()\n        {\n            public Set&lt;String&gt; getAllowableCredentialsProviderIds()\n            {\n                return Collections.emptySet();\n            }\n        };\n    }\n}\n</code></pre> </li> <li> <p>Create an OSGi Service Description</p> <p>You must create an .xml file to declare your Java class as an OSGi service. For example, create a HelloServiceTransport.xml file with the following content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;scr:component xmlns:scr=\"http://www.osgi.org/xmlns/scr/v1.1.0\" \n  configuration-policy=\"optional\" \n  immediate=\"true\" \n  name=\"com.mycompany.services.HelloServiceTransport.service\"&gt;\n   &lt;implementation class=\"com.mycompany.services.HelloServiceTransport\"/&gt;\n   &lt;service&gt;\n      &lt;provide interface=\"com.ibm.form.nitro.service.services.IServiceTransport\"/&gt;\n   &lt;/service&gt;\n&lt;/scr:component&gt;\n</code></pre> <p>For the class attribute of the implementation element, use the fully qualified name of the Java class you created in Step 1. Ensure that the name attribute of the component element is unique.</p> <p>Although not required, you can make it the same as the fully qualified name of the Java class that you created in Step 1.</p> </li> <li> <p>Create a MANIFEST.MF file</p> <p>Sample content:</p> <pre><code>Manifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: My Company Services\nBundle-SymbolicName: com.mycompany.services\nBundle-Version: 1.0.0.b1\nBundle-Vendor: My Company\nBundle-RequiredExecutionEnvironment: JavaSE-1.6\nService-Component: OSGI-INF/*.xml\nImport-Package: com.ibm.form.nitro.service.model,\n com.ibm.form.nitro.service.services,\n com.ibm.form.platform.service.framework.i18n\n</code></pre> <p>Multiple OSGi services can be packaged within the same OSGi bundle. Therefore, the same MANIFEST.MF file can be used for a custom Service Transport, a custom Service Catalog Group, and a custom Service Catalog.</p> </li> <li> <p>Deploy the Service Transport.</p> <p>Create a .jar file that contains the Java class, OSGi Service Description, and the MANIFEST.MF, created in steps 1 - 3. For example:</p> <pre><code>/\n   META-INF/\n      MANIFEST.MF\n   OSGI-INF/\n      HelloServiceTransport.xml\n   com/\n      mycompany/\n         services/\n            HelloServiceTransport.class\n            HelloServiceTransport$1.class\n</code></pre> <p>Multiple OSGi services can be packaged within the same OSGi bundle. Therefore, the same .jar file can be used for a custom Service Transport, a custom Service Catalog Group, and a custom Service Catalog.</p> <p>On the Leap server, put the .jar file in one the following directories or in a subdirectory of one of the following directories:</p> <ul> <li> <p>Windows\u2122:</p> <p>any drive:\\HCL\\Leap\\extensions\\</p> </li> <li> <p>Non Windows:</p> <p>/opt/HCL/Leap/extensions/</p> </li> </ul> <p>Important notes on directories:</p> <ul> <li>If the extensions directory does not exist, then the Leap server must be restarted after the directory is created.</li> <li>/opt/HCL/Leap/ is not case-sensitive.</li> </ul> </li> </ol>"},{"location":"ser_create_custom_service_transport.html#sample-ldap-query-service-transport","title":"Sample LDAP query Service Transport","text":"<p>The following example is a more complex Service Transport that demonstrates one possible way to query an LDAP server. The transport itself remains fairly generic so that multiple different service descriptions, each with their own custom parameters and LDAP search properties, can use this same transport. This sample uses the JVM's naming services (javax.naming.directory and javax.naming.ldap) to communicate with the external LDAP server. LDAP search results are converted to XML which can then be pulled apart by the outgoing mapping section of the service description as needed. For example:</p> <pre><code>&lt;searchresults&gt;\n    &lt;searchresult&gt;\n        &lt;telephone&gt;1-555-555-555&lt;/telephone&gt;\n        &lt;email&gt;csmith@mycompany.com&lt;/email&gt;\n        &lt;cn&gt;Chris Smith&lt;/cn&gt;\n    &lt;/searchresult&gt;\n    &lt;searchresult&gt;\n        ...\n    &lt;/searchresult&gt;\n    ...\n&lt;/searchresults&gt;\n</code></pre> <p>If necessary, the Basic Credentials Provider is used to collect the credentials needed to query the LDAP server.</p> <p>Sample Java code:</p> <pre><code>package com.mycompany.services;\n\nimport com.ibm.form.nitro.service.model.*;\nimport com.ibm.form.nitro.service.services.*;\nimport java.io.*;\nimport java.util.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport javax.naming.ldap.*;\nimport javax.xml.parsers.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.dom.*;\nimport javax.xml.transform.stream.*;\nimport org.w3c.dom.*;\n\npublic class SampleLDAPServiceTransport implements IServiceTransport {\n\n    private IServiceTransportMetadata metaData;\n\n    public String getId() {\n        return \"com.mycompany.services.SampleLDAPServiceTransport.id\";\n    }\n\n    public IServiceTransportMetadata getMetadata() {\n        if (this.metaData == null) {\n            this.metaData = new IServiceTransportMetadata() {\n                public Set&lt;String&gt; getAllowableCredentialsProviderIds() {\n                    Set&lt;String&gt; ids = new HashSet&lt;String&gt;();\n                    ids.add(\"basic\");\n                    return ids;\n                }\n            };\n        }\n        return this.metaData;\n    }\n\n    public Collection&lt;IServiceDescription&gt; getSampleServiceDescriptions() {\n        return Collections.emptyList();\n    }\n\n    public ServiceResult run(IServiceDescription pDescription, IServiceCredentialsProvider pServiceCredentialsProvider,\n            IUser pUser, Map&lt;String, Object&gt; pParameters) {\n        if (pParameters == null) {\n            pParameters = new HashMap&lt;String, Object&gt;();\n        }\n\n        String baseDN = (String) pParameters.get(\"basedn\");\n\n        String filter = (String) pParameters.get(\"filter\");\n        List&lt;String&gt; filterArgs = new ArrayList&lt;String&gt;();\n        int argIndex = 0;\n        while (pParameters.containsKey(\"filter-arg-\" + argIndex)) {\n            String filterArgValue = (String) pParameters.get(\"filter-arg-\" + argIndex);\n            filterArgs.add(filterArgValue == null ? \"\" : filterArgValue);\n            argIndex++;\n        }\n\n        String[] attributes = null;\n        if (pParameters.containsKey(\"result-attributes\")) {\n            attributes = ((String) pParameters.get(\"result-attributes\")).trim().split(\"[\\\\s]*,[\\\\s]*\");\n        }\n\n        int resultCountLimit = 50;\n        if (pParameters.containsKey(\"result-count-limit\")) {\n            resultCountLimit = Integer.parseInt((String) pParameters.get(\"result-count-limit\"));\n        }\n        int resultCount = 0;\n        InitialLdapContext ctx = null;\n        try {\n            ctx = ldapConnect(pServiceCredentialsProvider, pParameters);\n            if (ctx != null) {\n                Document doc = createDocument();\n                Node rootNode = doc.createElement(\"searchresults\");\n                doc.appendChild(rootNode);\n\n                SearchControls sc = new SearchControls();\n                sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n                sc.setCountLimit(resultCountLimit);\n                sc.setReturningAttributes(attributes);\n                sc.setReturningObjFlag(false);\n\n                // fetch results\n                NamingEnumeration&lt;SearchResult&gt; searchResults = ctx.search(baseDN, filter,\n                        filterArgs.toArray(new String[0]), sc);\n                while (searchResults.hasMore()) {\n                    Node resultNode = doc.createElement(\"searchresult\");\n                    rootNode.appendChild(resultNode);\n                    resultCount++;\n                    SearchResult result = searchResults.next();\n                    Attributes resultAttrs = result.getAttributes();\n                    NamingEnumeration&lt;String&gt; attrIds = resultAttrs.getIDs();\n                    while (attrIds.hasMore()) {\n                        String attrName = attrIds.next();\n                        String attrValue = (String) resultAttrs.get(attrName).get(0);\n                        Node attrNode = doc.createElement(attrName);\n                        attrNode.setTextContent(attrValue);\n                        resultNode.appendChild(attrNode);\n                    }\n                }\n                String result = serializeDocument(doc);\n                pParameters.put(\"resultXML\", result);\n            }\n        } catch (AuthenticationException ex) {\n            if (pServiceCredentialsProvider != null) {\n                return new ServiceResult(401);\n            } else {\n                return new ServiceResult(500, ex.getLocalizedMessage());\n            }\n        } catch (Exception ex) {\n            return new ServiceResult(500, ex.getLocalizedMessage());\n        } finally {\n            if (ctx != null) {\n                try {\n                    ctx.close();\n                } catch (NamingException ex) {\n                    // Ignore\n                }\n            }\n        }\n\n        // Success\n        return new ServiceResult(200, resultCount + \" LDAP search result(s)\");\n    }\n\n    /**\n     * Creates the LDAP Context used to call to the LDAP server.\n     */\n    private InitialLdapContext ldapConnect(IServiceCredentialsProvider pServiceCredentialsProvider,\n            Map&lt;String, Object&gt; pParameters) throws NamingException, ServiceException {\n\n        String url = (String) pParameters.get(\"url\");\n\n        Map&lt;String, String&gt; securityInfo = this.getSecurityInfo(pServiceCredentialsProvider, pParameters);\n        String securityAuth = securityInfo.get(\"auth\");\n        String securityPrincipal = securityInfo.get(\"principal\");\n        String securityCredentials = securityInfo.get(\"credentials\");\n\n        InitialLdapContext ctx = null;\n        Hashtable&lt;String, String&gt; contextConfig = null;\n\n        // Set up LDAP config settings\n        contextConfig = new Hashtable&lt;String, String&gt;();\n        contextConfig.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        contextConfig.put(Context.REFERRAL, \"follow\");\n        contextConfig.put(Context.PROVIDER_URL, url);\n\n        // For non-anonymous authentication security needs to be configured\n        if (securityAuth != null &amp;&amp; securityAuth.equals(\"none\") == false) {\n            contextConfig.put(Context.SECURITY_AUTHENTICATION, securityAuth);\n            contextConfig.put(Context.SECURITY_PRINCIPAL, securityPrincipal);\n            contextConfig.put(Context.SECURITY_CREDENTIALS, securityCredentials);\n        }\n\n        ctx = new InitialLdapContext(contextConfig, null);\n        return ctx;\n    }\n\n    private Map&lt;String, String&gt; getSecurityInfo(IServiceCredentialsProvider pServiceCredentialsProvider,\n            Map&lt;String, Object&gt; pParameters) throws ServiceException {\n\n        Map&lt;String, String&gt; resultMap = new HashMap&lt;String, String&gt;();\n\n        resultMap.put(\"auth\", (String) pParameters.get(\"security-authentication\"));\n        if (resultMap.get(\"auth\") != null) {\n            resultMap.put(\"principal\", (String) pParameters.get(\"security-principal\"));\n            resultMap.put(\"credentials\", (String) pParameters.get(\"security-credentials\"));\n        }\n        if (pServiceCredentialsProvider != null) {\n\n            if (pServiceCredentialsProvider.getId() == \"basic\") {\n                resultMap.put(\"auth\", \"simple\");\n                try {\n                    // use reflection to get username and password\n                    resultMap.put(\"principal\",\n                            (String) pServiceCredentialsProvider.getClass().getMethod(\"getUsername\", new Class[0])\n                                    .invoke(pServiceCredentialsProvider, new Object[0]));\n\n                    resultMap.put(\"credentials\",\n                            (String) pServiceCredentialsProvider.getClass().getMethod(\"getPassword\", new Class[0])\n                                    .invoke(pServiceCredentialsProvider, new Object[0]));\n                } catch (Exception e) {\n                    throw new ServiceException(e);\n                }\n            }\n        }\n        if (resultMap.get(\"principal\") == null)\n            resultMap.put(\"principal\", \"\");\n        if (resultMap.get(\"credentials\") == null)\n            resultMap.put(\"credentials\", \"\");\n        return resultMap;\n    }\n\n    /**\n     * Creates an empty XML document.\n     */\n    private Document createDocument() throws ServiceException {\n        Document doc = null;\n        try {\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            doc = db.newDocument();\n        } catch (Exception ex) {\n            throw new ServiceException(ex);\n        }\n        return doc;\n    }\n\n    /**\n     * Serializes an XML document to a String.\n     */\n    private String serializeDocument(Document pDocument) throws ServiceException {\n        try {\n            Transformer t = TransformerFactory.newInstance().newTransformer();\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            t.transform(new DOMSource(pDocument), new StreamResult(baos));\n            return new String(baos.toByteArray(), \"UTF-8\");\n        } catch (Exception ex) {\n            throw new ServiceException(ex);\n        }\n    }\n}\n</code></pre> <p>Sample LDAP query Service Description</p> <p>This service description utilizes the previous sample LDAP transport to search an LDAP server for employee info. The results returned are based on a wildcard match of the employee's name or email address.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;serviceDescription&gt;\n    &lt;id&gt;com.mycompany.services.SampleLDAPSearch&lt;/id&gt;\n    &lt;defaultLocale&gt;en-us&lt;/defaultLocale&gt;\n    &lt;transportId&gt;com.mycompany.services.SampleLDAPServiceTransport.id&lt;/transportId&gt;\n    &lt;name&gt;Sample LDAP Search Service&lt;/name&gt;\n    &lt;description&gt;Searches an LDAP server for employee information.&lt;/description&gt;\n    &lt;credentials providerId=\"basic\"&gt;\n        &lt;property name=\"realm\" value=\"com.mycompany.services.SampleLDAPRealm\"/&gt;\n    &lt;/credentials&gt;\n    &lt;inbound&gt;\n        &lt;parameters&gt;\n            &lt;parameter&gt;\n                &lt;id&gt;searchName&lt;/id&gt;\n                &lt;name&gt;Search Name&lt;/name&gt;\n                &lt;description&gt;The employee name to search for.&lt;/description&gt;\n                &lt;mandatory&gt;false&lt;/mandatory&gt;\n                &lt;type&gt;STRING&lt;/type&gt;\n            &lt;/parameter&gt;\n            &lt;parameter&gt;\n                &lt;id&gt;searchEmail&lt;/id&gt;\n                &lt;name&gt;Search Email&lt;/name&gt;\n                &lt;description&gt;The employee email to search for.&lt;/description&gt;\n                &lt;mandatory&gt;false&lt;/mandatory&gt;\n                &lt;type&gt;STRING&lt;/type&gt;\n            &lt;/parameter&gt;            \n        &lt;/parameters&gt;\n        &lt;serviceMapping&gt;\n            &lt;constants&gt;\n                &lt;constant&gt;\n                    &lt;id&gt;url&lt;/id&gt;\n                    &lt;value&gt;ldap://ldap.mysite.com:389/&lt;/value&gt;\n                &lt;/constant&gt;\n                &lt;constant&gt;\n                    &lt;id&gt;basedn&lt;/id&gt;\n                    &lt;value&gt;ou=employees,o=mysite.com&lt;/value&gt;\n                &lt;/constant&gt;\n                &lt;constant&gt;\n                    &lt;id&gt;filter&lt;/id&gt;\n                    &lt;value&gt;(&amp;amp;(objectClass=person)(cn=*{0}*)(email=*{1}*))&lt;/value&gt;\n                &lt;/constant&gt;\n                &lt;constant&gt;\n                    &lt;id&gt;result-attributes&lt;/id&gt;\n                    &lt;value&gt;cn,telephone,email&lt;/value&gt;\n                &lt;/constant&gt;             \n            &lt;/constants&gt;\n            &lt;mapping&gt;\n                &lt;mapping target=\"transport:url\" source=\"constant:url\" /&gt;\n                &lt;mapping target=\"transport:basedn\" source=\"constant:basedn\" /&gt;\n                &lt;mapping target=\"transport:filter\" source=\"constant:filter\" /&gt;\n                &lt;mapping target=\"transport:filter-arg-0\" source=\"parameter:searchName\" /&gt;\n                &lt;mapping target=\"transport:filter-arg-1\" source=\"parameter:searchEmail\" /&gt;              \n                &lt;mapping target=\"transport:result-attributes\" source=\"constant:result-attributes\" /&gt;\n            &lt;/mapping&gt;\n        &lt;/serviceMapping&gt;\n    &lt;/inbound&gt;\n    &lt;outbound&gt;\n        &lt;parameters&gt;\n            &lt;parameter&gt;\n                &lt;id&gt;searchResults&lt;/id&gt;\n                &lt;name&gt;Search Results&lt;/name&gt;\n                &lt;description&gt;The list of search results&lt;/description&gt;\n                &lt;type&gt;LIST&lt;/type&gt;\n                &lt;parameters&gt;        \n                    &lt;parameter&gt;\n                        &lt;id&gt;name&lt;/id&gt;\n                        &lt;name&gt;Employee Name&lt;/name&gt;\n                        &lt;description&gt;The employee's name.&lt;/description&gt;\n                        &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;/parameter&gt;        \n                    &lt;parameter&gt;\n                        &lt;id&gt;email&lt;/id&gt;\n                        &lt;name&gt;Employee Email&lt;/name&gt;\n                        &lt;description&gt;The employee's email address.&lt;/description&gt;\n                        &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;/parameter&gt;            \n                    &lt;parameter&gt;\n                        &lt;id&gt;phone&lt;/id&gt;\n                        &lt;name&gt;Employee Phone Number&lt;/name&gt;\n                        &lt;description&gt;The employee's phone number.&lt;/description&gt;\n                        &lt;type&gt;STRING&lt;/type&gt;\n                    &lt;/parameter&gt;\n                &lt;/parameters&gt;\n            &lt;/parameter&gt;\n        &lt;/parameters&gt;       \n        &lt;serviceMapping&gt;\n            &lt;mapping&gt;\n                &lt;mapping target=\"parameter:searchResults\" source=\"transport:resultXML\" sourceRef=\"searchresults/searchresult\" sourceType=\"xml\"&gt;         \n                    &lt;mapping target=\"parameter:name\" sourceRef=\"cn\" sourceType=\"xml\" /&gt;\n                    &lt;mapping target=\"parameter:email\" sourceRef=\"email\" sourceType=\"xml\" /&gt;\n                    &lt;mapping target=\"parameter:phone\" sourceRef=\"telephone\" sourceType=\"xml\" /&gt;\n                &lt;/mapping&gt;              \n            &lt;/mapping&gt;\n        &lt;/serviceMapping&gt;\n    &lt;/outbound&gt;\n&lt;/serviceDescription&gt;\n</code></pre> <p>Parent topic: Service Oriented Architecture \u2013 Service Transport</p>"},{"location":"ser_provide_groups_of_dynamic_services.html","title":"Providing Groups of Dynamic Services","text":"<p>You can develop, deploy, and use Service Catalogs and Service Catalog Groups within theHCL Leap environment.</p> <ul> <li>Adding a Service Catalog Group A Service Catalog Group provides a way to group web services in HCL Leap.</li> <li>Adding a Service Catalog A Service Catalog serves two purposes. First, a Service Catalog is a programmatic mechanism to dynamically provide Service Descriptions to HCL Leap instead of using static XML files. Second, a Service Catalog is linked to a Service Catalog Group and provides a mechanism to assign Service Descriptions to a specific Service Catalog Group.</li> </ul> <p>Parent topic: Adding services</p>"},{"location":"ser_setup_development_environment.html","title":"Setting up your development environment","text":"<p>The HCL Leap runs within an OSGi framework environment. Code that extends the Leap needs to be packaged within OSGi bundles to run. Any Java\u2122 development environment can be used to create custom bundles, but using the Eclipse IDE built-in OSGi tooling is recommended to minimize effort and errors.</p> <ol> <li> <p>Gather Leap JAR files</p> <p>Use the following script, or a similar script, to extract appropriate .jar files from the Leap .ear file. If you use the following script, update the variables to match your system.</p> <p>The extracted JAR files are placed in the %EXTRACT_DIR%\\Leap_bundles\\ directory.</p> <pre><code>SET EXTRACT_DIR=C:\\temp\\Builder_extract\nSET JAVA_BIN=C:\\hcl-java-sdk-60-win-i386\\bin\nSET LEAP_INSTALL_DIR=C:\\Program Files\\HCL\\Leap Server\\8.0\\Leap\nSET LEAP_VERSION=8.0.0.1013\nSET FSP_VERSION=8.0.0.494\n\nmkdir \"%EXTRACT_DIR%\"\nmkdir \"%EXTRACT_DIR%\\fsp\"\nmkdir \"%EXTRACT_DIR%\\core\"\nmkdir \"%EXTRACT_DIR%\\Leap_bundles\"\n\ncopy \"%LEAP_INSTALL_DIR%\\deploy\\hcl-leap.ear\" \"%EXTRACT_DIR%\"\ncd \"%EXTRACT_DIR%\"\n\"%JAVA_BIN%\\jar\" xvf hcl-leap.ear\n\"%JAVA_BIN%\\jar\" xvf leap.war\n\ncopy \"WEB-INF\\lib\\ibm.nitro.packaging.onejar.fsp-%LEAP_VERSION%.jar\" \"%EXTRACT_DIR%\\fsp\"\ncopy \"WEB-INF\\lib\\ibm.nitro.packaging.onejar.core-%LEAP_VERSION%.jar\" \"%EXTRACT_DIR%\\core\"\n\ncd \"%EXTRACT_DIR%\\fsp\"\n\"%JAVA_BIN%\\jar\" xvf ibm.nitro.packaging.onejar.fsp-%LEAP_VERSION%.jar\n\"%JAVA_BIN%\\jar\" xvf FSPJARS.jar\ncopy ibm.fsp.core.service.framework-%FSP_VERSION%.jar ..\\Leap_bundles\n\ncd \"%EXTRACT_DIR%\\core\"\n\"%JAVA_BIN%\\jar\" xvf ibm.nitro.packaging.onejar.core-%LEAP_VERSION%.jar\n\"%JAVA_BIN%\\jar\" xvf FSPBUNDLES.jar\ncopy ibm.nitro.services-%LEAP_VERSION%.jar ..\\Leap_bundles\n</code></pre> </li> <li> <p>Create a Plug-in Project</p> <p>In the Eclipse IDE, an OSGi bundle is also referred to as a plug-in. Start a new Plug-in Project to create an OSGi bundle:</p> <ol> <li>Select File &gt; New &gt; Project... &gt; Plug-in Development &gt; Plug-in Project.</li> <li>In the Target Platformsection, select an OSGi framework:, and select Equinox.</li> <li>Add Leap Jars to the Build Path</li> </ol> <p>To compile your custom bundle against the Leapjars extracted in Step 1, add them to the build path by changing the Target Platform that your plug-in builds against:</p> <ol> <li>Select Window &gt; Preferences &gt; Plug-in Development &gt; Target Platform.</li> <li>Select Running Platform (Active) &gt; Edit &gt; Locations &gt; Add... &gt; ****.</li> <li>Enter the complete path of the Leap_bundles directory from Step 1.</li> <li>Select Finish.</li> <li>Implement any classes and supporting files as needed.</li> </ol> <p>Refer to other documents and JavaDocs.</p> </li> <li> <p>Package your Plug-In and Deploy</p> <ol> <li> <p>Package your code as a .jar file.</p> <p>The typical structure for an OSGi bundle is shown here:</p> <pre><code>/\n   META-INF/\n      MANIFEST.MF\n   OSGI-INF/\n      Service1.xml\n      Service2.xml\n   com/\n      mycompany/\n         services/\n            hclLeap\n               Service1.class\n               Service2.class\n</code></pre> <p>If you are using the Eclipse IDE, you can package your bundle with the Export feature:</p> <ol> <li>Make sure the build.properties file for the project, which is created automatically for a Plug-in Project, includes all the resources you want included in your bundle. For example, make sure the OSGI-INF directory and its contents are included.</li> <li>Right-click your Plug-in project.</li> <li>Select Export &gt; Plug-in Development &gt; Deployable plug-ins and fragments.</li> <li>Select your Plug-in project.</li> <li>Specify an output directory.</li> <li> <p>Click Finish.</p> <ol> <li>On the Leap server, put the exported .jar file in one the following directories or in a subdirectory of one of the following directories:</li> </ol> </li> <li> <p>Windows\u2122:</p> <p>any drive:\\HCL\\Leap\\extensions\\</p> </li> <li> <p>Non-Windows:</p> <p>/opt/HCL/Leap/extensions/</p> </li> </ol> <p>Important notes on directories:</p> <ul> <li>If the extensions directory does not exist, then the Leap server must be restarted after the directory is created.</li> <li>/opt/HCL/Leap/ is not case sensitive.</li> <li>Debugging</li> </ul> </li> <li> <p>If you start the Leap server in debug mode, you can attach your debugger to the running JVM and step through your own code.</p> </li> <li> <p>Also, you can enable debug logging or finer logging for the com.ibm.form.nitro.service.services package to get more information from the Leap code.</p> </li> </ol> <p>Refer to the documentation for WebSphere\u00ae Application Server for more details.</p> <p>Do not run a production system in debug mode or with debug logging enabled. Enabling these options degrades performance.</p> </li> </ol> <p>Parent topic: Adding services</p>"},{"location":"services_toc.html","title":"Adding services","text":"<p>The following topics describe how to add services to your Leap applications.</p> <ul> <li>Setting up your development environment The HCL Leap runs within an OSGi framework environment. Code that extends the Leap needs to be packaged within OSGi bundles to run. Any Java\u2122 development environment can be used to create custom bundles, but using the Eclipse IDE built-in OSGi tooling is recommended to minimize effort and errors.</li> <li>Providing Groups of Dynamic Services You can develop, deploy, and use Service Catalogs and Service Catalog Groups within theHCL Leap environment.</li> <li>Service Oriented Architecture \u2013 Service Transport HCL Leap has a powerful, and extensible, Service Oriented Architecture (SOA) integration feature. The foundation of this feature is the Service Transport.</li> </ul> <p>Parent topic: Extending</p>"},{"location":"st_style_application.html","title":"Styling your application","text":"<p>This topic provides details on improving the look of your application by apply and working with CSS.</p>"},{"location":"st_style_application.html#styling-your-application-with-a-custom-theme","title":"Styling your application with a custom theme","text":"<p>Styling your application with a custom theme provides details on styling the colors, fonts, and other characteristics of the application by creating or importing a custom theme.</p>"},{"location":"st_style_application.html#using-css-files","title":"Using CSS files","text":"<p>Using CSS files details the use of custom CSS themes that can be uploaded into an application to style the user interface to meet customer needs.</p>"},{"location":"st_style_application.html#creating-a-global-corporate-theme","title":"Creating a global corporate theme","text":"<p>Leap provides the ability to create your own global (or corporate) theme that can be selected from the application creation dialog.</p> <p></p> <ul> <li>A global corporate theme must be configured by the Leap server admin using the Leap properties.</li> <li>The CSS file that contains all the custom classes must be created and hosted in an accessible location.</li> </ul> <p>The following is an example of a corporate theme configuration:</p> <pre><code>ibm.nitro.NitroConfig.customThemes.1.displayName = Corporate Theme 1\nibm.nitro.NitroConfig.customThemes.1.nl.fr=Th\u00e8me d'entreprise 1\nibm.nitro.NitroConfig.customThemes.1.isDefault = false\nibm.nitro.NitroConfig.customThemes.1.location = http://pnp.hcl.com/theme1.css\n</code></pre>"},{"location":"st_style_application.html#using-custom-css-class-name","title":"Using Custom css class name","text":"<p>Forms, pages and items have a property called \"Custom CSS class names\".  This property accepts one or more class names separated by spaces.  The class name provided is added to the object and can be referenced by a CSS class definition.  </p> <p>For example, if you added 'redBackground\" to the 'Custom CSS class names\" property, you could define the following class to change the styling for that item:</p> <pre><code>.lfMn .redBackground {\n  background: red;\n}\n</code></pre> <p>Note: In some situations you may need to override a default styling by adding \"!important\" to the style definition.</p>"},{"location":"st_style_application.html#using-in-line-css","title":"Using in-line CSS","text":"<p>Custom CSS styles can also be added to the form in an HTML item and they will be evaluated when the form is loaded.  Styles defined like this only apply when the form they are contained in is loaded.</p> <pre><code>&lt;style&gt;\n\n.lfMn.lotusui30 .lotusBanner\n{\n  display:none;\n}\n.lfMn.lfSingleFormArea .lfFormTitleBar {\n  display:none;\n}\n\n&lt;/style&gt;\n</code></pre>"},{"location":"st_style_application.html#using-custom-fonts","title":"Using custom fonts","text":"<p>You can use custom fonts in your applications.</p> <p>Either attach or reference the font files in the Settings / Files tab.  If you are referencing the files via URL make sure you have the correct permission to do so otherwise they will not load. </p> <p>Once attached or referenced the fonts will appear in your font options in the Style Editor.</p>"},{"location":"st_style_application.html#using-google-fonts","title":"Using Google Fonts","text":"<p>Google offers over 600 font families for web developers. They are free, easy to use and reliability is excellent. This brief tutorial will tell you what you need to know to use Google fonts in your applications.</p> <ol> <li> <p>Go to the Google font library and select your fonts. Once you chose the font you want click the Quick-use icon.</p> </li> <li> <p>Download the font and add to your form OR add the font to your style sheet.</p> </li> <li> <p>Create and apply classes that use the Google font</p> </li> </ol> <p>Example of class that references the font attached to the form</p> <pre><code>.lfMn .rancho\n{\n  font-family: 'Rancho', cursive !important;\n  color: blue !important;\n}\n</code></pre> <p>Example of css file that imports the font</p> <pre><code>@import url(https://fonts.googleapis.com/css2?family=Rancho&amp;display=swap);\n\n.lfMn .rancho\n{\n  font-family: 'Rancho', cursive !important;\n  color: blue !important;\n}\n</code></pre> <p>Note: the css file must be added to the form and selected on the Style page.</p> <ol> <li>Launch the form to see the font appear in the form! </li> </ol>"},{"location":"st_style_application.html#samples","title":"Samples","text":"<p>Hide Banner</p> <p>Hides the Leap header/banner at the top of the form.</p> <pre><code>.lfMn.lotusui30 .lotusBanner\n{\n  display:none;\n}\n</code></pre> <p>Hide Form Toolbar</p> <p>Hides the form toolbar that contains the print and delete button for a submitted form.</p> <pre><code>.lfMn.lfSingleFormArea .lfFormTitleBar {\n  display:none;\n}\n</code></pre> <p>Change cursor pointer</p> <p>Change the image that is used for the mouse cursor.</p> <pre><code>.lfMn .cursor {\n  cursor: pointer;\n}\n</code></pre> <p>Change field alignment</p> <p>Sets the field value to be aligned on the right.</p> <pre><code>.lfMn .rightAlign .dijitTextBox {\n  text-align: right;\n}\n</code></pre> <p>Dynamically change table cell background based on value</p> <p>Here is a sample function, which will change the background color of a table cell based on the text it contains ('Complete' = green, 'Incomplete' = red and 'In Progress' = yellow). It uses the dojo functions query and style, which we do not document in Leap documentation but are part of the dojo documentation.  You can see these are other functions that work in Leap at https://help.hcltechsw.com/domino-leap/1.1.4/ref_jsapi_javascript_security.html</p> <p>dojo.query returns all the nodes that match the specified criteria, generally a css class</p> <p>dojo.style applies a style to the specified node </p> <pre><code>app.getSharedData().applyTableStyle = function()\n{\n\n  // find all the table cells\n  var e = dojo.query(\"td.dojoxGridCell\");\n\n  // loop all the cells and apply style matching criteria\n  e.forEach(function(itm) {\n    if(itm.innerText == 'Complete')\n        dojo.style(itm, \"background-color\", \"green\");\n    if(itm.innerText == 'Incomplete')\n        dojo.style(itm, \"background-color\", \"red\");\n    if(itm.innerText == 'In Progress')\n       dojo.style(itm, \"background-color\", \"yellow\");\n  }); \n}\n</code></pre> <p>If the table is populated by the user, you apply the styling in the onItemChange event of the table:</p> <pre><code>app.getSharedData().applyTableStyle();\n</code></pre> <p>If you populate the table from a service call, you could apply the styling in an onCallFinished handler:</p> <pre><code>var srv = form.getServiceConfiguration(\"SC_REPLACE_WITH_SERVICE_NAME\");\nsrv.connectEvent(\"onCallFinished\", function(success, errorObj) {\n  if (success) {\n    app.getSharedData().applyTableStyle();\n  } \n});\n</code></pre> <p>Note: this will affect ALL tables in the form, therefore if you need to scope this to a specific table then you will need to apply a custom css class and then reference that in the query, i.e. \"myStyledTable td.dojoxGridCell\"</p> <p>Parent topic: Building Apps</p>"},{"location":"sub_adding_stages_toc.html","title":"Adding stages to an application","text":"<p>It is often desirable to have an application, or form, transition through a set of phases or stages. At each stage the form might be used by different people in different roles. The form also might be presented in a slightly different manner in each stage, such as having some items or pages hidden, or in a read-only state.</p> <p>Each form in an HCL Leap application can have multiple stages. By default, a newly created form has two stages:</p> <ul> <li>Start \u2013 The initial state of every form. Once the form transitions away from the Start stage it cannot return.</li> <li>Submitted \u2013 A submitted form is stored in this stage. Forms in this stage may be updated by users with permission.</li> </ul> <p>Additional stages can be added and configured by clicking the plus (+) icon that appears when hovering over a Stage box or by clicking the Add Stage button in the Properties panel; however, the Start stage is always required and is unique.</p>"},{"location":"sub_adding_stages_toc.html#section_gcf_vqw_rvb","title":"Actions","text":"<p>Each stage can have multiple stage actions. Each stage action presents itself as a button in the form's footer area and therefore the terms \u201cstage action\u201d, and \u201cstage button\u201d are used interchangeably. There are three types of stage actions:</p> <ul> <li>Submit \u2013 Submits the form data, and transitions the form to the next stage. A single stage can have multiple Submit buttons. Each Submit button may have different settings, and may transition the form to a different next stage. A stage that does not have any Submit buttons will be depicted as an \"End\" stage with a red square icon, however stage buttons may be added at any time.</li> <li>Save Draft \u2013 Temporarily stores the form's data so the user can return later to complete the rest of the form. A single stage can have multiple Save Draft buttons. Each button may have different settings, such as a unique message for the user. A stage is not required to have a Save Draft button. For more information, see Saving work as Draft.</li> <li>Cancel \u2013 Returns the form to its original state before the end-user started making modifications. The form remains within the same stage. A single stage can have only one Cancel button. A stage is not required to have a Cancel button.</li> </ul> <p>Every newly created stage, including the Start stage, is given by default a single Submit button and Cancel button as a starting point.</p>"},{"location":"sub_adding_stages_toc.html#section_rjf_wqw_rvb","title":"Activities","text":"<p>During the transition from one stage to the next, there are several activities that can take place: Send an Email, Call a Service, and Assign Users. The Visibility tab also allows the application designer to disable or hide any form item, or entire page, within a specific stage for a particular form. Leap provides control over which users can access or modify the Form's data at any particular stage. The setting of these permissions is done by clicking on a stage and navigating to Permissions, or by clicking the Visibility tab. For more information, see Application and Security overview.</p>"},{"location":"sub_adding_stages_toc.html#section_hjd_3rw_rvb","title":"Branching","text":"<p>Each stage action may define one (or more) conditional branch by clicking on the diamond icon below the stage object in the workflow diagram, or with the action selected by clicking on + Add conditional branch. A branch defines an alternate path the form takes when submitted. A branch must define a condition that determines when it will be followed. Branch conditions may be based on a user in/not in a role or the value of an item on the form. Each branch may have its own distinct activities that are executed when followed.</p> <ul> <li>Editing the message a user sees upon form submission The administrator of an HCL Leap application can edit the completion message a user sees when submitting a form.</li> <li>Redirecting users after form submission The administrator of an HCL Leap application can add a URL that is triggered when a form is submitted.</li> <li>Sending an email after a user submits a form You can send email notifications to managers or other users by adding an activity to the Submit button in a form.</li> <li>Populating information upon form submission using a web service Web services can perform many functions, such as sending data to other forms or applications. The following instructions describe how to use a web service to add information to a form automatically after it is submitted.</li> <li>Assigning users to a role after submission You can dynamically assign roles to a form after form submission.</li> <li>Configuring behavior of a form on submission Once a user completes an HCL Leap form, you can send them to another stage of that form.</li> <li>Saving work as a draft Some applications cannot be completed by the user in one session. If your application is very large or complicated, you can allow users to save their work as a draft before submitting it.</li> <li>Scenario: hidden or read-only form items in Stages This scenario uses a Vacation Request application to describe how to use multiple Stages to make sections of a form that is either hidden, or read-only.</li> <li>Saving a PDF to a file location Determining where you want to save your filled PDF is useful considering how many processes \"pick up\" documents from watched folders. Designers have the option of saving the file to a specific location, as an attachment to the Leap submission record, or both.</li> </ul> <p>Parent topic: Adding dynamic behavior</p>"},{"location":"sub_assigning_a_user.html","title":"Assigning users to a role after submission","text":"<p>You can dynamically assign roles to a form after form submission.</p> <p>You can assign users to roles dynamically using a web service with data, or metadata captured from the form. Assign an approver or reviewer by creating rules based on the data from the form, or by who submitted the form. For example, you can create a workflow application with rules to determine who can send notification by email. To use the following instructions, you must have user Roles, such as \u201cManager\u201d, set to Open. For more information on setting roles, see Application and Security overview.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Select a \"Submit\" stage in the diagram.</p> </li> <li> <p>Select the Activities tab. Click Add Activity.</p> </li> <li> <p>In the Activity Settings panel, select Assign Users.</p> <ul> <li> <p>Assign By Service Call:</p> <p>To assign users via a service call, select Service Call. The Assign Users (by Service Call) window opens. If there are no existing activities, you see: There are no activities. Click here to create one.</p> <ol> <li>Select a service from the list in the Service tab. Services in the Service tab are populated by your administrator. To use these instructions, you require a service that is able to search for a user\u2019s manager.</li> <li>Click the Inputs tab. Map form fields to the input parameters of the service. For example, if your application asks for the user\u2019s name:<ol> <li>Select Name from the Select source: window.</li> <li>Select Search Name from the Select target: window.</li> <li>Click the connector icon located between the two windows. The connected source and target are displayed in the Assigned Inputs section of the page.</li> </ol> </li> <li>Click the Outputs tab. For example, you can map the outputs of the service to the Manager role:<ol> <li>Select Manager Name from the Select source: window.</li> <li>Expand the directory so you see Member &gt; Members. Select Members from the Select target: window.</li> <li>Click the connector icon located between the two windows. The connected source and target are displayed in the Assigned Inputs section of the page. Now, the manager of the user who created the form can approve the form, but no other manager can do so.</li> </ol> </li> </ol> </li> <li> <p>Assign By Value in Form:</p> <p>You can also assign users using the Value in Form option, such as a Single Line Entry. This option allows for more flexibility in determining what qualifies a user's assigned role. To assign a user a role from a form field, complete the following steps.</p> <ol> <li>Follow steps 1-4 in the task above.</li> <li>Select Value in Form.</li> <li>The applicable fields on the form appear in the \"Value in Form\" dropdown. Select the field that contains the value that represents the user to assign.</li> <li>Select the Role from the dropdown to which the user will be assigned.</li> </ol> </li> </ul> </li> </ol> <p>Parent topic: Adding stages to an application</p>"},{"location":"sub_editing_the_message_a_user_sees.html","title":"Editing the message a user sees upon form submission","text":"<p>The administrator of an HCL Leap application can edit the completion message a user sees when submitting a form.</p> <p>In the Workflow tab, you can choose what message users see when they submit a form by editing the properties of the Submit button.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Open the properties for any Submit button in any stage.</p> <p>You can control the message a user sees for every action button.</p> </li> <li> <p>Enter your message in the Action Completion Message field.</p> <p>When the user submits a form, they are shown the text you entered.</p> <p>Note: To show no dialog clear the message field.</p> </li> </ol> <p>Parent topic: Adding stages to an application</p>"},{"location":"sub_editing_the_url_a_user_sees.html","title":"Redirecting users after form submission","text":"<p>The administrator of an HCL Leap application can add a URL that is triggered when a form is submitted.</p> <p>You can set Leap to redirect the user to another application, URL, form, or app page upon form submission. Redirecting users to a secondary URL is useful if the user must complete another application that is directly related to the first. The user is redirected to the second URL in a dialog when the first form is submitted.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Select the desired Stage button in the diagram.</p> </li> <li> <p>In the Properties tab, under On action completion redirect to:, select one of the following options from the drop-down:</p> <ul> <li>Another Leap application</li> <li>Website URL</li> <li>A Form or App Page</li> </ul> </li> </ol> <p>Parent topic: Adding stages to an application</p>"},{"location":"sub_hidden_or_read_only_items_in_stages.html","title":"Scenario: hidden or read-only form items in Stages","text":"<p>This scenario uses a Vacation Request application to describe how to use multiple Stages to make sections of a form that is either hidden, or read-only.</p> <p>The Vacation Request application is built with two sections: the top section contains fields the employee fills out to schedule vacation time. The bottom section of the form contains information for the manager's approval or rejection. When the users complete the form, they do not need to see the manager's portion. When managers review the submitted form, they must not modify the employee's submitted portion. In both parts of this example, marking items as hidden, or read-only is valuable.</p> <p>Tip: By building the user's and manager's portions of the form inside a Section, you can apply the hidden or read-only values to the entire section. Without using Sections, you must set the property for each individual form item.</p> <p>The Vacation Request form has three Stages:</p> <ul> <li>Start: The beginning phase where users view and complete the form for submission</li> <li>Approval: This stage was created by the form designer. When the user submits the form, it moves to the Approval stage and is processed by a manager.</li> <li>Completed: When the manager approves, or denies the request, the submitter is notified, and the form is considered closed.</li> </ul> <p>When the form is viewed in the Workflow tab, it is identical to how it appears the design environment. The main differences are the icon buttons on the upper right of each form item, and the addition of workflow buttons at the bottom of the form. You automatically view the section in the Start stage. For each form item, the following icons are available:</p> <ul> <li>: The Visibility icon. When clicked, this icon hides form items or a section on a particular Stage.</li> <li>: The Read-Only icon. When clicked, this icon makes a form item or section Read-Only in a Stage.</li> </ul> <p>To make the Vacation Request form hide the Manager's section of the form: In the Start stage, scroll down to the Manager's section and click the Visibility icon. A red line appears diagonally through the icon, representing that the section is now hidden from view in this stage. If you save and preview the form, the Manager's section is not visible.</p> <p>To make the user's portion of the form read-only: In the Approval stage, go to the top of the user's portion of the form. Click the Read-Only icon. A red line appears diagonally through the icon, representing that the section is now read-only.</p> <p>Using a basic example, this scenario described how to set properties on form items within Stages. Setting items or sections as hidden or read-only simplifies form design, yet allows for complex processes to be built into one form.</p> <p>Parent topic: Adding stages to an application</p>"},{"location":"sub_saving_pdf.html","title":"Saving a PDF to a file location","text":"<p>Determining where you want to save your filled PDF is useful considering how many processes \"pick up\" documents from watched folders. Designers have the option of saving the file to a specific location, as an attachment to the Leap submission record, or both.</p> <p>File locations are whitelisted in the Leap_config.properties. Your file location can be any non-root directory. For example:</p> <p><code>storageBaseDirWhiteList = /Leap/PDFs</code></p> <p>Multiple locations can be whitelisted by separating them with a comma:</p> <p><code>storageBaseDirWhiteList = /Leap/locationA , /Leap/locationB</code></p> <p>The option for PDF Save Location appears in your PDF fill service configuration if a location has been whitelisted as described above. You need to map the location you want to save to the option in your service configuration. This can be done as an input item from the form or a constant (shown in the following graphic). The path must match exactly to what is whitelisted and the location must include the file name and path.</p> <p>If the file already exists a duplicate will be made - for example, sample.pdf, sample(1).pdf, etc.</p> <p>Parent topic: Adding stages to an application</p>"},{"location":"sub_sending_a_user_to_another_url.html","title":"Configuring behavior of a form on submission","text":"<p>Once a user completes an HCL Leap form, you can send them to another stage of that form.</p> <p>After a user submits a form, you can show them the next stage of a form. For example, to confirm what they submitted by pressing a confirmation button, or to show a read-only copy of the information they submitted. You can also limit authenticated users from submitting multiple forms.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Click the area outside the outline in the Workflow view.</p> <p>The form Properties displays on the side of the screen.</p> </li> <li> <p>In the Upon Submission: section, choose one of the following options:</p> <ul> <li>Show the success message page</li> <li>Show the success message in a dialog and then display a new form</li> <li>Show the success message in a dialog and then display the next stage of the form</li> </ul> </li> </ol> <p>Parent topic: Adding stages to an application</p>"},{"location":"sub_sending_an_email.html","title":"Sending an email after a user submits a form","text":"<p>You can send email notifications to managers or other users by adding an activity to the Submit button in a form.</p> <p>You can send one or more email on a Submit action, or send one email to multiple email addresses.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Select the desired Stage button in the diagram.</p> <p>The Properties panel displays on the side of the screen.</p> </li> <li> <p>In the Activities tab, click Add Activity.</p> </li> <li> <p>Select Send an Email.</p> </li> <li> <p>In the Activity Settings panel, you can:</p> <ul> <li>Manually add the email address of the recipient, a subject line, and a message, if required.</li> <li>Populate each of the fields with information from the form. Under each field, click Insert and select a form item from the list.</li> <li>Address an email to everyone in a predefined role by clicking Insert Item &gt; Roles, and selecting the role that you want.</li> </ul> </li> </ol> <p>Parent topic: Adding stages to an application</p>"},{"location":"sub_use_service_to_populate_on_form_submission.html","title":"Populating information upon form submission using a web service","text":"<p>Web services can perform many functions, such as sending data to other forms or applications. The following instructions describe how to use a web service to add information to a form automatically after it is submitted.</p> <p>HCL Leap can look up user information for you using a web service call. For example, you can connect a manager with a user submitted form using an intranet directory search.</p> <ol> <li> <p>Click the Workflow tab.</p> </li> <li> <p>Click the Add Activity button in a submit button on the diagram, or select the button and click Add Activity in the side panel.</p> </li> <li> <p>In Activity Settings, select Call a Service.</p> <p>For this example, select the directory for your company intranet.</p> </li> <li> <p>Click Configure Service.</p> </li> <li> <p>Click the Inputs tab. Map the form fields to the input parameters of the service.</p> <ol> <li> <p>Select Current User from the Select source: window.</p> </li> <li> <p>Select Search Name from the Select target: window.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> </li> </ol> <p>The connected source and target are displayed in the Assigned Inputs section of the page.</p> </li> <li> <p>Click the Outputs tab. Map the outputs of the service to the Manager role.</p> <ol> <li> <p>Select Manager Name from the Select source: window.</p> </li> <li> <p>In theSelect target: window, choose a form item from the list.</p> </li> <li> <p>Click the connector icon located between the two windows to link the source and the target.</p> </li> </ol> <p>After the source and target are linked, they appear in the Assigned Outputs area of the screen.</p> </li> <li> <p>Click OK to exit the Call a Service window.</p> <p>When the user clicks Submit, Leap calls a service to populate the manager\u2019s name into the selected form item.</p> </li> </ol> <p>Parent topic: Adding stages to an application</p>"},{"location":"tr_troubleshooting.html","title":"Troubleshooting HCL Leap","text":"<p>The following table contains information to help you troubleshoot your Leap product or applications. The table contains limitations, best practices, and known issues.</p> <p>Table 1. Known limitations of Leap</p> Limitations Resolution HCL Connections Community Surveys are not available in Leap 8.6.0 and later versions. To add Surveys to your Connections application, you must use Leap 8.5 with Connections 4.5, or Leap 8.5.1 with Connections 5.0. Form item size limitations. When building a Leap application, you must not exceed the following size limits You cannot have more than 1000 data items in your form You cannot have more than 200 data items in your form DB2\u00ae has a page size limit for tables of 32kb. Each data item in a Leap application has a size limit. For example: - Single Line \u2013 200 bytes and Multiple line - Leap uses a CLOB data type to store the value of each multiple line entry data item. The limit to the number of characters stored in a CLOB is dependent on language and character set. The English limit is approximately 1 million characters.If the content of any given multiple line field exceeds the database allowance, you see a \u201c500 Internal Server Error\u201d message, and form submission fails. The full message is stored in the system log files. -   Currency/Number \u2013 8 bytes -   Attachment \u2013 108 bytes -   Select One and Survey \u2013 size is based on the number of choices and questions If you receive the error The row length of the table exceeded a limit of \u201c32677\u201d bytes. (Table space \u201c\u201d.). SQLCODE=-670, your form exceeds the maximum size. You must remove items from the form, or break the application into multiple forms. It is important to note that items create database columns, and contribute to the limit even when they are hidden on the form. Note: This is no longer applicable as of DB2 10.5 and newer, due to extended row size. Limit on the number of embedded sections. When designing a form in Leap, you can embed sections within sections to achieve the wanted layout. Do not embed more than 5 sections within one another. When using more than five embedded sections, it becomes difficult to select the action icons for a specific section. Exceeding 5 sections also results in forms not rendering properly. Printing Leap content Leap provides a print button. If there is no print button in the contents of your form, the web browser print function does not work well. To print out the contents shown in your browser, uses a screen capture. For more information, see Taking a screen capture in Windows\u2122. Adding Groups to Leap applications. Leap cannot resolve users if they are members of nested groups. For example, your company LDAP contains a super group called \u201cManagers\u201d. This super group consists of several smaller groups, such as \u201cSupervisors\u201d, and \u201cShift Leaders\u201d. In the Access tab of Leap, you must add the \u201cSupervisors\u201d, and \u201cShift Leaders\u201d as groups individually, rather than using the \u201cManagers\u201d super group. <p>Table 2. Leap Best Practices</p> Issue Resolution Canonical URLs versus short URL in the ibm.nitro.NitroConfig.serverURI property of the Leap_config.properties file When accessing Leap, the ibm.nitro.NitroConfig.serverURI entry setting is different from the browser address base URI. If you are using a short URL format to design your application, you must set ibm.nitro.NitroConfig.serverURI entry with the canonical URL. For example, if your short URL is http://localhost:9080/apps, the canonical URL for the user is http://hostname:9080/apps. Using two different URLs means users must sign on twice, as the short URL is replaced by the canonical URL. It is a best practice to use the canonical URL whenever possible. Web Link and Website form items. When using the Web Link or Website form items in your application, ensure that you enter the correct URL to get the runtime result. If the link goes to an external site, you must enter the URL with a URL protocol. For example, enter the URL as http://www.ibm.com, rather than www.ibm.com. -   If you enter the URL with no protocol, then the URL is considered relative the current location. The prefix for the relative URL is attached, which might result in errors. -   If you enter the URL with a single slash '/', it resolves to a URL relative to the root of the host. When using the Website item in a Leap the URLs entered must begin with: http://, https://, ftp://, or ftps:// Leap users and groups When using WebSphere\u00ae Application Server to directly maintain users and groups, it is important to maintain integrity between the WebSphere Application Server users and Leap. If you change a user definition in WebSphere Application Server, and that user is used in Leap, the relationship might be corrupted. The user would no longer be able to access Leap. Uploading files in Leap If an application requires supplemental files, it is a best practice to use reference URLs, rather than uploading the files directly into the application. The option to include reference URLs is available in the Upload dialog from the Settings tab. Leap Preview mode To use the Leap Preview feature, you must ensure that your browser is configured to allow all pop-up windows. If your browser does not allow pop-up windows, users cannot see the preview window. Browser cookies must be enabled. To successfully log in Leap, you must have browser cookie enabled. If you have deployed Leap with WebSphere Application Server Community Edition as your application server, you must ensure that you have only one Leap window or tab running in your browser at any time. Attempting to log in to multiple Leap windows or tabs results in login errors. <p>Table 3. Troubleshooting Leap errors</p> Problem Resolution Building Leap applications in Safari with bidirectional languages Designing Leap applications with the Safari locale set to a bidirectional language results in extraneous horizontal scroll bars shown in each form cell. These scroll bars do not affect the rendering of the completed form at run time. Allowing non-ASCII administrative login characters If the Leap administrative user name or password contains non-ASCII characters, you must complete an additional configuration task. In WebSphere Application Server: 1.  Log in to WebSphere Application Server administrative console, and select the server. 2.  On the settings page for the selected application server, go to Server Infrastructure &gt; Java and Process Management. 3.  Go to Process Definition &gt; Java Virtual Machine, and specify -Dclient.encoding.override=UTF-8 for Generic JVM Arguments. 4.  Click OK, then Save 5.  Restart the application server <p>Table 4. General Leap information</p> Topic Additional Information Using the Upgrade link on the Manage tab. You can upgrade an application with a new application definition using theLeap Upgrade feature. Upgrading replaces all access rules, business rules, formulas, interface options, Stages definitions, JavaScript\u2122, images, and service mappings with those in the new version. It then updates the data base definition to the model described by the new application, and merges existing data into that model. If data elements were removed in the new version, or their unique identifiers changed, the data associated with those elements is not migrated to the new application. Data elements that did not exist in the previous version, but were added in the new version, are added as columns to existing data records with a NULL value. <p>Parent topic: Troubleshooting</p>"},{"location":"tr_troubleshooting_and_support.html","title":"Troubleshooting and support","text":"<p>Troubleshooting and support information for the HCL Leap.</p> <p>If you are experiencing a problem with the Leap:</p> <ol> <li> <p>Refer to the documentation for the task you are performing or the product component you are working with. These topics may contain troubleshooting information for common problems.</p> </li> <li> <p>Refer to the Directory of worldwide contacts Web page and contact HCL Software Support for your region.</p> </li> </ol> <p>Parent topic: Troubleshooting</p>"},{"location":"tr_troubleshooting_toc.html","title":"Troubleshooting","text":"<p>The following pages provide information on how to troubleshoot HCL Leap, and how to contact support.</p> <ul> <li>Troubleshooting and support Troubleshooting and support information for the HCL Leap.</li> <li>Troubleshooting HCL Leap The following table contains information to help you troubleshoot your Leap product or applications. The table contains limitations, best practices, and known issues.</li> </ul>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html","title":"Troubleshooting the WSDL service description generator - FAQ","text":"<p>Use the following information to help you troubleshoot your WSDL service description generator.</p>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#is-my-schema-valid","title":"Is my schema valid?","text":"<p>Make sure that all prefixes are bound to a namespace Usually schemas contains the following namespace declarations in <code>&lt;xsd:schema&gt;</code>:</p> <pre><code>xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\ntargetNamespace=\"[value varies]\"\nxmlns:tns=\"[usually the same as targetNamespace]\"\n</code></pre> <p>When a schema includes or imports other schemas, make sure that the schema is accessible through the @schemaLocation. If the @schemaLocation is a URL, verify that you can access the URL and that the URL is indeed a schema. If the @schemaLocation is an absolute file path verify that the .xsd file exists in that path. If the @schemaLocation is a relative file path make sure that the .xsd file exists in that path relative to where the importing schema is stored.</p> <p>When a WSDL file is manually retrieved from the web and stored locally, you must clearly indicate the path. If the WSDL file imports an external schema with a relative URL, you must either change the schema location to point to the full URL, or save a copy of the schema and change the schema location to point to the local copy of the schema.</p>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#is-my-wsdl-file-valid","title":"Is my WSDL file valid?","text":"<p>Check namespace declarations. Usually WSDL files contaims the following namespace declarations in <code>&lt;wsdl:definitions&gt;</code>:</p> <pre><code>xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\nxmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\ntargetNamespace=\"[value varies]\"\nxmlns:tns=\"[usually the same as targetNamespace]\"\n</code></pre> <p>Several WSDL file tags have an attribute @name. According to the WSDL schema, the @name is of type NCName. It is a string without any colons. For example, <code>&lt;wsdl:definitions name=\"ABCOrg:WebService\"&gt;</code> is invalid.</p> <p>Check the WSDL tags for case sensitivity errors. For example, <code>&lt;wsdl:porttype&gt;</code> is invalid, but <code>&lt;wsdl:portType&gt;</code> is valid.</p> <p>Make sure that the binding style is specified. Binding style can either be Document/Literal or RPC/Encoded. This information is declared in this style: <code>wsdl:binding/soap:binding/@style</code>. This example can either be Document or RPC. <code>wsdl:binding/wsdl:operation/wsdl:input/soap:body/@used</code> can either be Literal or Encoded.</p> <p>Make sure that the request URL is specified. This information is located here: <code>wsdl:service/wsdl:port/soap:address/ @location</code>.</p> <p>Make sure that for every <code>&lt;wsdl:port&gt;</code> under <code>&lt;wsdl:service&gt;</code> has a matching <code>&lt;wsdl:binding&gt;</code>. Make sure that all <code>&lt;wsdl:binding&gt;</code> has a matching <code>&lt;wsdl:portType&gt;</code>.</p> <p>Make sure that all <code>&lt;wsdl:input&gt;</code> and <code>&lt;wsdl:output&gt;</code> of all <code>&lt;wsdl:operation&gt;</code> under all <code>&lt;wsdl:portType&gt;</code> references a valid <code>&lt;wsdl:message&gt;</code>.</p> <p>Make sure that all <code>&lt;wsdl:message&gt;</code> contains at least one <code>&lt;wsdl:part&gt;</code>.</p> <p>If the WSDL binding style is Document/Literal, make sure that all <code>&lt;wsdl:part&gt;</code> uses <code>@element</code> and references an element declaration in a schema. If the WSDL binding style is RPC/Encoded, make sure that all <code>&lt;wsdl:part&gt;</code> uses <code>@type</code> and references an actual schema data type such as <code>xsd:string</code>, a schema <code>&lt;xsd:simpleType&gt;</code>, or a <code>&lt;xsd:complexType&gt;</code>.</p>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#is-my-service-mapping-reference-correct","title":"Is my service mapping reference correct?","text":"<p>Incorrect references often happen on RPC/Encoded outbound mapping references. This is the format of the tool, with namespace omitted.</p> <pre><code>&lt;SOAP-ENV:Envelope&gt;\n  &lt;SOAP-ENV:Body&gt;\n    &lt;tns:[operation name+\"Response\"]&gt;\n      &lt;[part name]&gt;\n        &lt;!--Succeeding section base on schema--&gt;\n      &lt;/[part name]&gt;\n      &lt;[part name]&gt;\n        &lt;!--Succeeding section base on schema--&gt;\n      &lt;/[part name]&gt;\n      \u2026\n    &lt;/tns:[operation name+\"Response\"]&gt;\n  &lt;SOAP-ENV:Body&gt;\n&lt;SOAP-ENV:Envelope&gt;\n</code></pre> <p>The following example uses a different SOAP convention that does not work with this tool:</p> <pre><code>&lt;SOAP-ENV:Envelope&gt;\n  &lt;SOAP-ENV:Body&gt;\n    &lt;tns:[operation name+\"Response\"]&gt;\n      &lt;return&gt;\n        &lt;[part name]&gt;\n          &lt;!--Succeeding section base on schema--&gt;\n        &lt;/[part name]&gt;\n        &lt;[part name]&gt;\n          &lt;!--Succeeding section base on schema--&gt;\n        &lt;/[part name]&gt;\n        \u2026\n      &lt;/return&gt;\n    &lt;/tns:[operation name+\"Response\"]&gt;\n  &lt;SOAP-ENV:Body&gt;\n&lt;SOAP-ENV:Envelope&gt;\n</code></pre> <pre><code>&lt;SOAP-ENV:Envelope&gt;\n  &lt;SOAP-ENV:Body&gt;\n    &lt;tns:[operation name+\"Response\"]&gt;\n      &lt;soapVal&gt;\n        &lt;[part name]&gt;\n          &lt;!--Succeeding section base on schema--&gt;\n        &lt;/[part name]&gt;\n        &lt;[part name]&gt;\n          &lt;!--Succeeding section base on schema--&gt;\n        &lt;/[part name]&gt;\n        \u2026\n      &lt;/soapVal&gt;\n    &lt;/tns:[operation name+\"Response\"]&gt;\n  &lt;SOAP-ENV:Body&gt;\n&lt;SOAP-ENV:Envelope&gt;\n</code></pre> <pre><code>&lt;SOAP-ENV:Envelope&gt;\n  &lt;SOAP-ENV:Body&gt;\n    &lt;tns:[operation name+\"Response\"]&gt;\n      &lt;[message name]&gt;\n        &lt;!--Succeeding section base on schema--&gt;\n      &lt;/[message name]&gt;\n    &lt;/tns:[operation name+\"Response\"]&gt;\n  &lt;SOAP-ENV:Body&gt;\n&lt;SOAP-ENV:Envelope&gt;\n</code></pre> <p>This is how RPC/Encoded declare a recurring simple type element:</p> <pre><code>&lt;element name=\"elem\" type=\"tns:ArrayOfString\"/&gt;\n\n&lt;complexType name=\"ArrayOfString\"&gt;\n  &lt;complexContent&gt;\n    &lt;restriction base=\"SOAP-ENC:Array\"&gt;\n      &lt;attribute ref=\"SOAP-ENC:arrayType\"    \n            wsdl:arrayType=\"string[]/&gt;&lt;/&gt;&lt;/&gt;&lt;/&gt;\n</code></pre> <p>Then, the tool expects a SOAP message of the following format:</p> <pre><code>\u2026\n&lt;elem&gt;\n  &lt;item&gt;\u2026&lt;/item&gt;\n  &lt;item&gt;\u2026&lt;/item&gt;\n  \u2026\n&lt;/elem&gt;\n\u2026 \n</code></pre> <p>If the RPC/Encoded web service SOAP message uses a different convention, the tool does not work. For example,</p> <pre><code>\u2026\n&lt;elem&gt;\n  &lt;elem&gt;\u2026&lt;/elem&gt;\n  &lt;elem&gt;\u2026&lt;/elem&gt;\n  \u2026\n&lt;/elem&gt;\n\u2026 \n</code></pre>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#why-are-there-missing-parameters-or-no-parameters-in-the-generated-service-description","title":"Why are there missing parameters or no parameters in the generated service description?","text":"<p>Make sure that the WSDL file has access to the schema. All imported and included schemas are accessible.</p> <p>Make sure that each operation has its matching messages and each message part has its matching schema declaration. For Document/Literal binding style, the message part should reference a schema element declaration. An RPC/Encoded binding style should reference a schema complex type declaration.</p> <p>Make sure that elements and attributes have a valid type. These types can either be a <code>&lt;simpleType&gt;</code> declaration, a <code>&lt;complexType&gt;</code> declaration, or a primitive schema data type such as <code>xsd:string</code> or <code>xsd:boolean</code>. The schema data type <code>xsd:anyType</code> is not mapped to a parameter.</p> <p>Make sure that the schema does not use <code>&lt;any&gt;</code>, <code>&lt;anyAttribute&gt;</code> or <code>@abtract=true</code>. If it does, you must manually add the required parameters and appropriate service mapping elements.</p>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#why-does-the-web-service-respond-with-an-error-415-unsupported-media-type","title":"Why does the web service respond with an Error 415 Unsupported media type?","text":"<p>The tool assumes that the value of the constant Content-Type, which in turn is mapped as the HTTP header Content-Type. If the WSDL file uses SOAP 1.1, the Content-Type is set to text/xml. If the web service uses SOAP 1.2, then the Content-Type is set to Application/soap+xml.</p>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#why-is-my-request-entity-not-being-mapped-correctly","title":"Why is my request-entity not being mapped correctly?","text":"<p>By schema declaration and convention, inbound service mapping elements <code>@targetRef</code> are based on the inbound constant <code>prototypicalInstance</code>. It is constructed based on the declared schema, and for RPC/Encoded style binding, it also follows those conventions. Similarly, the outbound service mapping elements <code>@sourceRef</code> are based on an internally created prototypical instance, which is different from the inbound constant <code>prototypicalInstance</code>, but constructed in the similar fashion.</p>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#why-is-my-targettypestring-when-i-map-to-an-xml-and-use-xpath-in-my-targetref","title":"Why is my <code>targetType=STRING</code> when I map to an XML and use XPath in my <code>targetRef</code>.","text":"<p>If you use an inbound service mapping and use XPath in your <code>targetRef</code>, the <code>targetType=</code> is not set to <code>STRING</code> because of the service mapping element wrapper. Since <code>&lt;mapping target=\"request-entity\" targetType=\"XML\"&gt;</code> is set to XML, so all service mapping element child <code>targetTypeType</code> are set to <code>STRING</code>.</p>"},{"location":"tr_troubleshooting_wsdl_sd_tool.html#why-am-i-getting-a-namespace-not-binded-error","title":"Why am I getting a \u201cnamespace not binded\u201d error?","text":"<p>Verify that all prefixes you use in all service mapping element references are binded. Namespace declarations are in the <code>&lt;serviceMapping&gt;</code>.</p> <p>Parent topic: Using the service description tool for WSDL web service</p>"},{"location":"tut_roles_and_stages_OV.html","title":"Adding tables and workflow elements to a HCL Leap form","text":"<p>This tutorial provides information and lessons about more advanced Leap topics. Basic form design is not covered in this tutorial.</p>"},{"location":"tut_roles_and_stages_OV.html#prerequisites","title":"Prerequisites","text":"<p>This tutorial contains the following lessons:</p> <ul> <li>Tables \u2013 Adding tables to your form to collect data from users.</li> <li>Stages \u2013 Adding workflow to your form, turning it into an application. The Stages section covers both basic workflow and conditional workflow.</li> <li>Access \u2013 Adding permissions to the stages on your form, which allows specific people to access the form at different points in the workflow.</li> </ul> <p>If you have no experience with Leap, complete the Building a Survey application tutorial to learn the basics of building and deploying applications in Leap. This tutorial does not cover concepts of form design, deployment, or reviewing submitted data.</p> <p>Go to the Leap community on developerWorks, and import ExpenseReport.nitro_s into Leap. Use the following instructions to complete the partially complete Expense Report application.</p> <p>Estimated time that is required to complete the entire tutorial: 50 - 60 minutes</p> <ul> <li>Adding tables to forms Adding tables to your form is a useful way to gather information from users in a contained space. You can specify exactly what information you want the user to enter by selecting form items to use as the table headings. The user can add as many rows into the table as required to submit their data, but the table is contained within a predefined size on the page.</li> <li>Adding workflow Stages to a form Leap uses Stages to add workflow to your form. Workflow describes various lifecycle steps that are associated with the form. Defining multiple connected Stages creates the workflow, where each stage defines its own form behavior, access rights, and navigation steps. In this tutorial, define the workflow steps that are required for the approval of the form.</li> <li>Applying access control through Roles Access control defines who is able to view and modify the form in different stages. For example, only the form administrator can change the layout of the form, while user access is restricted to opening and submitting the form. Creating this access control is done with Roles.</li> <li>Tutorial summary You successfully completed this tutorial, which demonstrated an application with workflow and access permissions.</li> </ul> <p>Parent topic: Tutorials for app design</p>"},{"location":"tut_roles_and_stages_SM.html","title":"Tutorial summary","text":"<p>You successfully completed this tutorial, which demonstrated an application with workflow and access permissions.</p> <p>In this tutorial, you learned how to:</p> <ul> <li>Add a Table to a form.</li> <li>Format the table headings</li> <li>Add page navigation to the form</li> <li>Add Stages to create workflow functionality</li> <li>Make form items, and entire form pages hidden and read-only in a particular stage</li> <li>Create Roles and assign users to Roles</li> <li>Assign Role permissions to specific stages</li> </ul> <p>For more information about Stages and Access Control, see the following topics:</p> <ul> <li>Adding stages to an application</li> <li>Security overview.</li> </ul> <p>Parent topic: Adding tables and workflow elements to a HCL Leap form</p>"},{"location":"tut_roles_and_stages_module1.html","title":"Adding tables to forms","text":"<p>Adding tables to your form is a useful way to gather information from users in a contained space. You can specify exactly what information you want the user to enter by selecting form items to use as the table headings. The user can add as many rows into the table as required to submit their data, but the table is contained within a predefined size on the page.</p> <p>In this lesson, learn how to:</p> <ul> <li>Add a Table to the form.</li> <li>Add form items as column headings in the table.</li> <li>Add page navigation buttons to the form.</li> </ul> <p>Estimated time required to complete this module: 20 minutes</p>"},{"location":"tut_roles_and_stages_module1.html#lesson11","title":"Add a table to the Expenses page","text":"<p>For this tutorial, add a table for the user to submit a list of expenses.</p> <ol> <li> <p>In the Manage tab, open the Expense Report application by clicking Edit.</p> <p>The Outline view displays all the forms and pages within an application. You can change the default names of forms and pages to more specific names. You can also move between form pages by clicking them in the Outline view.</p> </li> <li> <p>In the Outline view, click the Expenses page.</p> <p>The blank Expenses page is displayed.</p> </li> <li> <p>Add a section to the Expenses page, and extend it to span all columns.</p> <ol> <li> <p>In the properties side panel, change the title of the section to \u201cItemized Expenses\u201d.</p> </li> <li> <p>Click the Display title bar check box so the title is displayed on the form.</p> </li> </ol> </li> <li> <p>Expand the Specialized section of the Palette and add a Table to the form.</p> </li> <li> <p>To set the table headers, click the \u201chere\u201d link in the information window.</p> <p>A new child page is created for the table that stores the form items that are used as table column headers. A grid with one column and one row is displayed.</p> </li> <li> <p>Add the following form items to the Table page, either vertically, or horizontally.</p> <p>When the user enters data into the table, a window opens and displays the column headings as a list. If there are more column headings than space in the window, scroll bars are displayed to the user. You must decide whether you want users to scroll vertically, or horizontally, then build the column headers in that direction. Whether you build the list in the child page, the column headers are displayed horizontally in the table on the form.</p> <ol> <li> <p>Expand the Common section of the Palette.</p> </li> <li> <p>Add a Date. Set the Hint to Date the expense was incurred.</p> </li> <li> <p>Add a Dropdown. In the properties side panel: set the title to \u201cType\u201d and set the hint to \u201cType of expense\u201d. Click the Edit Properties icon. Then click the Edit button in the Options: section. Enter the following options into the displayed value column, create row with the Add option icon after each: Air Travel, Car rental, Food, Hotel, Postage, Other</p> </li> <li> <p>Add a Single Line Entry. Set the Title to Description. Set the Width to Medium in the Properties side panel.</p> </li> <li> <p>Add a Currency. Set the Title to Amount. Set the Width to Short.</p> </li> </ol> </li> <li> <p>Make all form items in the Table required by clicking the required box for each item.</p> </li> <li> <p>In the Outline view, click the Expenses page to continue building the form.</p> <p>On the Expenses page notice that the table headings are displayed horizontally.</p> <ol> <li> <p>Expand the table to cover both columns in the grid.</p> </li> <li> <p>In the Properties side panel set the title of the table to \u201cYour Expenses\u201d.</p> </li> <li> <p>Enter a Hint.</p> <p>For example: Enter each itemized expense in the table.</p> </li> </ol> </li> <li> <p>Save and preview the form.</p> <p>The Preview icon is located with the Save icon.</p> </li> <li> <p>When the preview is displayed, click Next to get to the Expenses page. In the validation error message window, click Continue. The error is displayed because you are leaving the first page of the form without entering data into mandatory fields. The table is then displayed with no entries. Click the Add a new entry icon to add test information to the table. A window is displayed containing the column headers displayed vertically, and they all fit in the window. If the table headers were entered onto the Table page horizontally, the user must scroll to see all table fields.</p> <p>Close the preview form to return to building the form.</p> </li> <li> <p>Set a formula on the table so the total of the submitted expenses is displayed in a separate Currency area. This total is supplied to the reviewer on the Approval page you create next. On the Expenses page, add a Currency form item beneath the table.</p> <ol> <li> <p>Click the newly added currency field to reveal the properties side panel.</p> </li> <li> <p>Change the Title to Total Expense Amount.</p> </li> <li> <p>Click the Formula tab.</p> </li> <li> <p>From the Choose the function used to set the value of this item: select Table Sum.</p> </li> <li> <p>Click the Column entry field.</p> <p>A window opens for you to select a form item. Expand the tree until Amount is available.</p> </li> <li> <p>The formula is set.</p> </li> </ol> </li> <li> <p>Add Page Navigation buttons to the end of the form.</p> </li> <li> <p>Save and preview the form. If you enter test data into the table, the numbers that are entered in the Amount columns are automatically added and displayed in the Total Expense Amount.</p> </li> </ol>"},{"location":"tut_roles_and_stages_module1.html#approvalpagewithadditionallogic","title":"Adding an approval page with more logic to the form","text":"<p>The following steps describe how to create an approval page where a supervisor approves or denies the expense report. A rule is set so that if the reviewer denies the expense claim, they can provide a reason why the expense was denied.</p> <p>First, create a page in the form to use as the Approval page. It displays the Total Expense Amount from the Expenses page to the approver.</p> <ol> <li> <p>In the Outline view, click the Add icon to add another page to the form.</p> </li> <li> <p>Change the name of the page to Approval.</p> </li> <li> <p>Add a Section and span the section across the two columns.</p> </li> <li> <p>In the properties side panel, change the title to \u201cExpense Approval\u201d, and select the Display title bar option.</p> </li> <li> <p>Add a Single Line Entry form item to the section. Change the name to Approver\u2019s Name.</p> </li> <li> <p>Add a Currency form item next. Change the title to Expense Amount to Approve</p> </li> <li> <p>Click the currency form item to reveal the properties side panel.</p> <p>The following substeps describe how to pull the total from the Total Expense Amount on the Expenses page into the Expense Amount to Approve form item. A rule is then set to make the amount read-only to the approver if its value is greater than zero. This way, the approver can see the amount, but cannot change it.</p> <ol> <li> <p>In the properties side panel, select the Formula tab.</p> </li> <li> <p>From the Choose the function used to set the value of this item menu, select Assign.</p> </li> <li> <p>Select Total Expense Amount from the list of form items available.</p> </li> <li> <p>Click the Edit Rules icon and add a rule.</p> </li> <li> <p>In the When the following condition is true section, select Expense Amount to Approve from the first menu.</p> </li> <li> <p>Select Greater than from the second menu.</p> </li> <li> <p>Leave \u201cA fixed value\u201d selected and add the number 0 to the empty field.</p> </li> <li> <p>In the Perform this action section, select Expense Amount to Approve from the first menu.</p> </li> <li> <p>Select Disable from the second menu.</p> </li> <li> <p>Click Apply and Close.</p> </li> </ol> </li> <li> <p>Add a Select One item in the section.</p> <ol> <li> <p>Click the newly added select one to reveal the properties side panel.</p> </li> <li> <p>Set the Title to Do you approve this expense?</p> </li> <li> <p>Click the check box to make this item Required.</p> </li> <li> <p>Edit the Options: to Approve and Decline.</p> </li> <li> <p>Set the Choice Layout to Horizontal.</p> </li> </ol> </li> <li> <p>Add a Multi-Line Entry beneath Expense Amount to Approve. Title the Multi-Line Entry: Reason for Declining:</p> </li> <li> <p>Click the Rules icon.</p> <p>This rule will hide this Multi-Line Entry item if the expense is approved.</p> <ol> <li> <p>Click Add Rule.</p> </li> <li> <p>From the When this is true: section, select Do you approve this expense?</p> </li> <li> <p>Select Does not equal.</p> </li> <li> <p>Leave A fixed value selected and then select Approve from the next set of options.</p> </li> <li> <p>Select Reason for declining: from the Perform this action section.</p> </li> <li> <p>Select Hide from the next menu.</p> </li> <li> <p>Click Apply and Close.</p> </li> </ol> </li> <li> <p>Add page navigation buttons to the end of the page.</p> <p>This set of buttons allows the user to see the comments of the approver if the Expense Report is rejected. In the next lesson, you will hide these navigation buttons, so they are displayed after the approver reviews the Expense Report.</p> </li> <li> <p>Save the form.</p> </li> </ol> <p>The approval page is created, but is only used when a workflow is applied to the form. Creating a workflow with Stages is covered in the next section of the tutorial.</p> <p>Parent topic: Adding tables and workflow elements to a HCL Leap form</p>"},{"location":"tut_roles_and_stages_module2.html","title":"Adding workflow Stages to a form","text":"<p>Leap uses Stages to add workflow to your form. Workflow describes various lifecycle steps that are associated with the form. Defining multiple connected Stages creates the workflow, where each stage defines its own form behavior, access rights, and navigation steps. In this tutorial, define the workflow steps that are required for the approval of the form.</p> <p>A Stage describes:</p> <ul> <li>The behavior of the form while it is in a stage, including what portions of the form are visible or read only.</li> <li>The flow of the form, determining navigation between stages. For example, a form goes to a manager for general expense approval, but to another manager if the amount of the expense exceeds a predefined amount.</li> <li>Who has access to the form while the form is in that stage.</li> </ul> <p>By default, each form has a Start and a Submitted stage. The Start stage is the beginning of the workflow, and describes a form that has not been completed or submitted by the user. After a form leaves the Start stage, it can never return to the Start stage. The Submitted stage describes a form that has reached the next part of the workflow. You may add other stages to your workflow to fit your use case.</p> <p>In this lesson, learn how to:</p> <ul> <li>Go to the Workflow tab.</li> <li>Add new stages and modify various stage properties.</li> <li>Make form items read-only in a specific stage.</li> <li>Make form pages read-only and hidden in specific stages.</li> <li>Set navigation between stages to create a workflow.</li> </ul> <p>Estimated time required to complete this module: 20 minutes</p>"},{"location":"tut_roles_and_stages_module2.html#lesson21","title":"Adding stages to your form","text":"<p>The workflow for this form is summarized as follows: The user accesses the form in the Start stage. When the user submits the form, it goes to the Awaiting Approval stage, where an approver can either accept or reject the Expense Report. If the reviewer accepts the Expense Report, the form goes to the Accepted stage. If the reviewer rejects the Expense Report, the form goes to the Approval Request stage so the submitter can make corrections and resubmit.</p> <ol> <li> <p>Click the Workflow tab.</p> <p>The view is made of the diagram canvas and the properties side panel.</p> </li> <li> <p>In the Start stage, the user who enters data into the form does not need to see the Approval page. To ensure that the user cannot find their way to that page, hide it from view. Click the Visibility button at the top of the screen, then in the side panel, click the Hide icon for the Approval page.</p> <p></p> <p>The Approval page is hidden from view when the form user first submits the form.</p> <p>Note: The hidden or read-only status applies to a form item in a particular stage. If you add another stage, the hidden or read-only status does not carry forward to the new stage.</p> </li> <li> <p>The user does not need to see the page navigation buttons to the Approval page. Hide them by clicking the Expenses page.</p> <ol> <li> <p>Go to the page navigation buttons. In the properties side panel, click the eye icon to hide in this stage.</p> <p>The page navigation buttons are now hidden from view when the user submits the form. The page navigation buttons are only hidden in this stage.</p> </li> </ol> </li> <li> <p>Create a stage to add the Approval page that is created in the previous section. Click the Add a new stage icon while the Start stage is in focus.</p> <p>A new stage is inserted after the Start stage and before the Submitted stage.</p> </li> <li> <p>Click the label \u201cStage n\u201d to change the name of the stage to \u201cApproval Request\u201d.</p> <p>This stage allows users to open the form again and edit the expense report if it is rejected by an approver.</p> </li> <li> <p>Click on the Visibility button at the top of the screen. Set the Approval page to read-only by clicking on the lock icon with the \u201cApproval Request\u201d stage selected.</p> <p>You want the user to see the comments that are written by the reviewer, but do not want the user to be able to modify the choices that are set by the reviewer.</p> </li> <li> <p>Add another stage, and title it Awaiting Approval.</p> <p>The form progresses to this stage after the user submits it.</p> <ol> <li> <p>In the Visibility View, set the Basic Information and Expenses pages to be read-only.</p> </li> <li> <p>At the end of the form, Submit and Cancel buttons are automatically added. Click the Add Action icon, and add another Submit button.</p> </li> </ol> </li> <li> <p>Click the Submit action on the diagram, or with the stage selected click the Edit Properties icon for the Submit button. Change the title to Accept.</p> <p>So users know whether their Expense Reports were accepted or rejected, send them an email.</p> <ol> <li> <p>In the Action Completion Message: field, set it to read You have approved the submitter\u2019s expense report. They are notified by email of the approval.</p> <p>This message is shown to the approver every time they accept an expense report.</p> </li> <li> <p>Click the Activities tab.</p> </li> <li> <p>In the Activities section, click \u201c+ Add Activity\u201d to create one. Select \u201cSend an email\u201d as the Activity Type.</p> </li> <li> <p>From the To: menu, click \u201cInsert\u201d and select Email.</p> </li> <li> <p>In the Subject entry field, type Your Expense Report was accepted.</p> </li> <li> <p>In the Contents of the Email: box, write your email. For example, enter: Thank you for submitting your expense report. It was accepted, and payment will be made shortly. To view the approved report, click the following link:</p> </li> <li> <p>To insert a link to the form, click the Insert item: menu that is located in the text editor tools. From the menu, select Link to this form.</p> </li> <li> <p>The changes are automatically saved. Click the X or click outside the settings panel to close it.</p> </li> </ol> </li> <li> <p>When the reviewer approves the expense report, the user receives an email at the address they provided on the Basic Information page. Now configure the second Submit button to use if the approver rejects the submitted form.</p> </li> <li> <p>With the stage selected, click the label for the second Submit button and change the title to \u201cDecline\u201d.</p> <ol> <li> <p>In the Action Completion Message: field set it to read: You have rejected the submitter\u2019s request.\u00a0They are notified to correct errors and resubmit the Expense Report.</p> </li> <li> <p>In the Next Stage: menu, select Approval Request.</p> <p>If the Expense Report is rejected, the user can reopen it to correct errors. Now set the stage to send an email to notify the submitter of the rejection.</p> </li> <li> <p>In the Activities section, click \u201c+ Add Activity\u201d to create one. Select \u201cSend an email\u201d as the Activity Type.</p> </li> <li> <p>From the To: menu, click \u201cInsert\u201d and select Email.</p> </li> <li> <p>In the Subject: entry field, type Your Expense Report was rejected.</p> </li> <li> <p>In the Contents of the Email: box, write your email. For example, enter: Your submitted expense report was rejected.Click the following link to review the report, make corrections and resubmit:</p> </li> <li> <p>To insert a link to the form, click the Insert item: menu in the text editor tools. From the menu, select Link to this form.</p> </li> <li> <p>The changes are automatically saved. Click the X or click outside the settings panel to close it.</p> </li> </ol> </li> <li> <p>Go to the Approval Request stage. Set which stage the button activates by clicking on the submit button on the diagram and in the Properties side panel change the Next Stage to \u201cAwaiting Approval\u201d.</p> </li> <li> <p>When the approver receives the form to review, it is best if the submitted information is read-only. This way the reviewer cannot modify any data that the user submitted. When you set pages and form items as read-only in the Start stage, and must do so again in Approval Request stage.</p> </li> <li> <p>In the Visibility view, click the \u201cApproval Request\u201d stage and then click the lock icon next to the page to make it read-only in this stage.</p> </li> <li> <p>Now that the Approval Request stage is created, you must modify the Start stage so the form is routed to the Approval Request stage.</p> </li> <li> <p>Click the Start stage. Click the Edit Properties icon for Submit.</p> <ol> <li> <p>Change the Action Completion Message: to read: Your data was submitted and will be reviewed soon.</p> </li> <li> <p>Change the Next Stage to \u201cApproval Request\u201d.</p> </li> </ol> </li> <li> <p>Save your application.</p> <p>When the user completes and submits the form, it is sent to an approver for review.</p> </li> </ol> <p>When the user submits the form, it goes from the Start to the Awaiting Approval stage. If the approver accepts, the form is sent to the Submitted stage, and the workflow is complete. If the approver rejects the Expense Report, it is sent to the Approval Request stage so the user can fix errors and resubmit.</p> <p>If the approver rejects the Expense Report, the form is sent to this stage so the user can open the form, change it, and resubmit. When the user submits the corrected form, it goes to the Awaiting Approval stage again.</p>"},{"location":"tut_roles_and_stages_module2.html#applyingconditionallogictoastage","title":"Optional: Applying conditional workflow to the form","text":"<p>There is a rule on the form that states any expense reimbursement must be approved by a reviewer. However, you can create a stage in the workflow to request special approval for amounts larger than $2000.</p> <ol> <li> <p>In the Workflow tab, create a stage and title it Special Approval.</p> <ol> <li> <p>Create a second Submit button.</p> </li> <li> <p>Click label for the first Submit button to change the title to Accept.</p> </li> <li> <p>Set the Next stage: to Awaiting Approval.</p> <p>When the special request is approved, the form is sent to the main approver for review.</p> </li> <li> <p>Click label for the second Submit button to change the title to Reject.</p> </li> <li> <p>Set the Next stage: to Approval Request.</p> </li> </ol> </li> <li> <p>Click \u201c+ Add Action\u201d in the properties side panel or hover over the stage card in the diagram and click the \u201c+\u201d to create a second submit button.</p> </li> <li> <p>Click the Edit Properties icon for new Submit button.</p> <ol> <li> <p>Click the Visibility button. Click on the Actions section where the submit buttons are shown.</p> </li> <li> <p>Click the Rules icon for the new submit button.</p> </li> <li> <p>Click Add Rule.</p> </li> <li> <p>In the When this is true: section, click the menu. Select Show items on all pages.</p> </li> <li> <p>Click the same menu again and select Expense Amount to Approve.</p> </li> <li> <p>In the next menu, select Less than or equals.</p> </li> <li> <p>In the blank field for A fixed value, enter $2000.</p> </li> <li> <p>In the Perform this action section, select the second Submit button in the start stage.</p> <p>A number is appended to the action button ID when there are more than one instance of the same class.</p> <p>For example, the ID for this item is Start - Submit - S_Submit2, but a different number can be appended if you create and delete more than one Submit button.</p> </li> <li> <p>Select Hide from the next menu.</p> </li> <li> <p>Click Apply.</p> </li> </ol> </li> <li> <p>The rule states that the button is hidden if the expense amount claimed is less than $2000. Now set the opposite rule on the first submit button.</p> </li> <li> <p>Click Add Rule.</p> <ol> <li> <p>In the When this is true: section, click the menu. Select Show items on all pages.</p> </li> <li> <p>Click the same menu again and select Expense Amount to Approve.</p> </li> <li> <p>In the next menu, select Greater than or equals.</p> </li> <li> <p>In the blank field for A fixed value, enter $2000.</p> </li> <li> <p>In the Perform this action section, select the second Submit button in the start stage.</p> <p>A number is appended to the action button ID when there are more than one instance of the same class.</p> <p>For example, the ID for this item is Start - Submit - S_Submit, but a number can be appended to that string if you create and delete more than one Submit button.</p> </li> <li> <p>Select Hide from the next menu.</p> </li> <li> <p>Click Apply and Close.</p> </li> </ol> </li> <li> <p>When the user opens the form, only one Submit button is visible. When the user clicks the Submit button, the form is sent to the appropriate stage based on the total amount of the expense.</p> <p>Note: Submit buttons are not available in Preview mode. You must deploy the form to test the rules that are set on the button. If you deploy the form, there is no difference in the appearance of the form because both buttons have the same name. When you click View Data, you see the additional workflow steps that are required for the form.</p> <p>The conditional workflow is set. In the next section, add access control to each stage so the Approval Request stage is set to one set of reviewers, while the Special Approval stage is set to another set of reviewers.</p> </li> <li> <p>Save the form.</p> </li> </ol> <p>Parent topic: Adding tables and workflow elements to a HCL Leap form</p>"},{"location":"tut_roles_and_stages_module3.html","title":"Applying access control through Roles","text":"<p>Access control defines who is able to view and modify the form in different stages. For example, only the form administrator can change the layout of the form, while user access is restricted to opening and submitting the form. Creating this access control is done with Roles.</p> <p>In this lesson, learn how to:</p> <ul> <li>Open to the Access tab.</li> <li>Know the difference between Closed and Open role types.</li> <li>Add a user type to the list of defined Roles.</li> <li>Assign users to the various Roles.</li> <li>Assign users to Stages.</li> </ul> <p>Estimated time that is required to complete this module: 20 minutes</p>"},{"location":"tut_roles_and_stages_module3.html#applyingaccesscontrolthroughroles","title":"Applying access control through Roles","text":"<p>Access control defines who is able to view and modify the form in different stages. For example, only the form administrator can change the layout of the form, while user access is restricted to opening and submitting the form. Creating this access control is done with Roles.</p> <p>By default, the Access tab, three roles are already defined for you:</p> <ul> <li>Administrator \u2013 Users, or groups, with administrator privileges for an application.</li> <li>Initiator \u2013 Any user, or group, who can submit a form or initiate an application. You can set some applications to be available to all users, and some to be available to specific users, or groups.</li> <li>Record Owner \u2013 The user who submits the form. After a user initiates and submits a form, they become the Record Owner.</li> </ul> <p>Each role can be either Open or Closed. When a role is Open, it dynamically assigns users at run time. When a role is Closed, the users must be set on the Access screen, and are static. For example, in a form, you might have employees sign in and enter their names and employee numbers.\u00a0If the role is Open, the application can pull information about the employees\u2019 superior from a company database and populate the form. For this tutorial, all roles must remain Closed.</p> <p>The users who submit Expense Reports are Initiators, and for this scenario the users who review the Expense Reports are Human Resources. As the Initiator role is already created, you must create the Human Resources role.</p> <ol> <li> <p>Click the Access tab.</p> </li> <li> <p>Click the Add Role icon for the Record Owner role.</p> <p>A new role is created.</p> </li> <li> <p>Rename the new role Human Resources.</p> </li> <li> <p>Now that the roles are created, add members to the roles. Adding members to the roles determines who can access the application. There are four predefined user groups:</p> <p>All Authenticated Users :   Any user who is authenticated with your organization. Users must sign in with a user ID and password to access the application.</p> <p>Anonymous Users :   Any user who you want to work anonymously with the application. Anyone who has the link to the application can submit it, without signing in.</p> <p>Invited Users :   Any anonymous user who receives a unique URL generated from within stages when an application changes from one stage to another. A user who is not normally given access to the form in that stage can use that URL to participate in the workflow in that instance.</p> <p>Instance Creator :   The user who submitted a form.</p> <p>You can also add your own Groups or Individual users to a role.</p> </li> <li> <p>In the Assign Users menu, select Initiator.</p> <p>The Initiator role automatically has All Authenticated Users added. Access for this role is complete.</p> </li> <li> <p>Select Human Resources from the Assign Users menu.</p> <ol> <li> <p>In the Individual Users field, add your own name.</p> <p>As you manually enter Individual Users or Groups, Leap provides you with predictive matches based on your entry. These predictive matches are taken from your company LDAP, users that are configured in your IBM\u00ae WebSphere\u00ae Application Server, or IBM WebSphere Portal Server. By adding your name to the Human Resources Group, you are able to enter sample data into the form, and review all submitted responses.</p> </li> <li> <p>Click Add User icon.</p> </li> </ol> </li> <li> <p>Now that access to submit and review a form is set, edit the properties of the individual roles. For example, you want Human Resources to review and approve the form, but the form must be read-only unless it is returned to the user.</p> <p>Remember the order of the workflow for our form: When the user submits the form, it moves from the Start stage to the Awaiting Approval stage. If a form is rejected because of errors, it is sent to the Approval Request stage, so the submitter can correct the errors and submit the form again.</p> </li> <li> <p>Go to Stage SettingsExpense Report, and select Start.</p> <p>You see that the Initiator has permission to Create and submit the form.</p> </li> <li> <p>Go to Stage SettingsExpense Report, and select Approval Request.</p> <ol> <li> <p>For the Administrator, make Read and Delete are selected.</p> <p>These permissions give the Administrator the ability to see and delete submitted forms in this stage, but not to change the submitted data.</p> </li> <li> <p>For Record Owner, ensure Read and Update are selected.</p> <p>These permissions allow the person who submitted the form to edit the form in the case of errors, and submit it again for approval.</p> </li> <li> <p>For Human Resources, ensure the Read is enabled.</p> </li> </ol> </li> <li> <p>Go to Stage SettingsExpense Report, and select Awaiting Approval .</p> <ol> <li> <p>For the Administrator, make Read and Delete are selected.</p> </li> <li> <p>For Record Owner, ensure Read is selected.</p> <p>This permission allows the person who submitted the form to see it, but not change any data.</p> </li> <li> <p>For Human Resources, select Read, and Update.</p> <p>Although the information submitted by the user is read-only for the approver in Human Resources, the word Update is used to manage access settings. In this instance, the word Update means that an approver can use the Submit and Cancel buttons on the form. Update does NOT mean that the approver can update or manipulate the submitted data.</p> </li> </ol> </li> <li> <p>Save the application.</p> </li> <li> <p>Click the Manage tab and deploy the application and enter sample data into the form.</p> </li> <li> <p>After you submit sample data, return to the form and click View Data from the Manage tab.</p> <p>Accept or reject the sample data to test the workflow elements you built into the form.</p> </li> </ol> <p>Parent topic: Adding tables and workflow elements to a HCL Leap form</p>"},{"location":"tut_survey_application_OV.html","title":"Building a Survey application","text":"<p>This tutorial describes how to build a simple survey application with HCL Leap.</p> <p>No previous knowledge of Leap is required.</p> <p>Estimated time that is required to complete the entire tutorial: 50 - 60 minutes</p> <ul> <li>Building a survey with Leap This tutorial contains two sections.</li> <li>Tutorial summary You successfully built a basic Leap application.</li> </ul> <p>Parent topic: Tutorials for app design</p>"},{"location":"tut_survey_application_SM.html","title":"Tutorial summary","text":"<p>You successfully built a basic Leap application.</p> <p>In this tutorial, you learned how to:</p> <ul> <li>Open a new application</li> <li>Add form items to the form</li> <li>Resize form items</li> <li>Edit the properties of a form item</li> <li>Set a rule so form items are hidden or visible on the form</li> <li>Make form items mandatory</li> <li>Redirect users after form submission</li> <li>Save the form</li> <li>Preview a form during the design phase</li> <li>Deploy an application</li> <li>Launch an application</li> <li>Enter sample data into the application</li> <li>Review the submitted sample data</li> <li>Delete submitted sample data</li> </ul> <p>For more detailed information about specific topics that are covered in this tutorial, see Building Apps in the HCL Leap product documentation.</p> <p>Parent topic: Building a Survey application</p>"},{"location":"tut_survey_application_module1.html","title":"Building a survey with Leap","text":"<p>This tutorial contains two sections.</p> <p>In the first section, Opening Leap and building a form, learn how to:</p> <ul> <li>Open a new application</li> <li>Add form items to the form</li> <li>Resize form items</li> <li>Edit the properties of a form item</li> <li>Set a rule so form items are hidden or visible on the form</li> <li>Make form items mandatory</li> <li>Redirect users after form submission</li> <li>Save the form</li> <li>Preview a form during the design phase</li> </ul> <p>In the second section, Application Management, learn how to:</p> <ul> <li>Deploy an application</li> <li>Launch an application</li> <li>Enter sample data into the application</li> <li>Review the submitted sample data</li> <li>Delete submitted sample data</li> </ul> <p>The scenario: The coffee services in your office are not ideal. Every morning in the break room, you hear coworkers complain about the coffee, but nothing is being done to improve the coffee at work. Your Office Manager asks you to find out how your coworkers would like the coffee services changed. You must poll everyone in the office to get their opinions.</p> <p>Your options:</p> <p>Email</p> <p>Send out an email to all your coworkers and ask them to provide their opinions on the coffee and how it can be improved. If you send out a mass email, sporadic responses from people arrive throughout the day, cluttering up your inbox. You must then take the feedback from the emails and collate it in a spreadsheet program, and there is no easy way to track who did not answer.</p> <p>Create a survey</p> <p>Create a survey form in Leap.\u00a0You email the survey link to your coworkers, and they go online to provide you with feedback. All results are stored in a database and are easy to review and sort, and your email inbox is not filled with the sporadic responses.</p> <p>Creating a survey is the option that you select.</p> <p>Note: Throughout the Leap documentation, the words \u201cform\u201d and \u201capplication\u201d are both used to describe the output that is created by Leap. Forms are a single page, or collection of pages, that create the user interface with which people interact. When a form is combined with workflow, presentation logic and other elements of the Leap technology, it becomes an application. Applications gather information that is submitted by users when they complete the form, and automatically store the submissions in a database.</p> <p>Estimated time that is required to complete this module: 50 - 60 minutes</p>"},{"location":"tut_survey_application_module1.html#lesson11","title":"Opening Leap and building a form","text":"<p>The following steps describe how to open a new Leap application and build a form.</p> <p>You want your coffee feedback to have:</p> <ul> <li>An area that contains the title of the form, and a description of the purpose of the form. Include the amount of time that is needed to complete the form.</li> <li>An area that contains the name of the submitter. Also included in this area if the form is the basic question: \"Do you drink the coffee that is brewed in the office?\"</li> <li>An area that contains the survey questions.</li> </ul> <p>Creating an application \u2013 When you start Leap, a screen is displayed with two tabs on the Forms toolbar: Use and Manage. The Use tab displays a list of all applications that are created by other users to which you have access. The Manage tab is where you create and manage applications.</p> <ol> <li> <p>Click New Application.</p> </li> <li> <p>Enter a descriptive Application Name and Application Description, and select Create.</p> <p>A blank form with a two-by-two grid is displayed. The grid automatically aligns form items with one another when you place them on the form, and expands as you add form items. You can add and delete columns and rows as needed by clicking the border bar surrounding the grid.</p> <p>Note: As you add sections and form items to the form, the grid automatically expands to include the additional form items. You can add extra rows to your form manually, but it is not required. If there are empty rows or columns in a completed form, they are not displayed when the form is previewed or deployed.</p> </li> <li> <p>When you design forms, there are two ways to add form items to your form:</p> <ul> <li>You can drag form items from the Palette onto the form</li> <li> <p>You can select a location on the grid, then click a form item. The form item is placed into the grid location. You can build forms by placing form items directly on the form or grouping form items in Sections. For our coffee feedback form, we use Sections to organize the form items. Sections are useful for the following reasons:</p> </li> <li> <p>They group form items in a way that is easy for the user to understand. When the form is viewed, the sections have specific background colors that are based on the style that is applied to the form.</p> </li> <li>They make applying complex form functionality easier. For example, our form has a rule to hide the survey until the user selects a specific option. Instead of setting the rule on every form item individually, the rule is on the section. The rule applies to every form item within the section.</li> <li>They allow the form designer, and the form user, to collapse and expand entire parts of the form. In longer forms, collapsing sections is useful, as it keeps the form submitter from being overwhelmed by too much information.</li> <li>If you finish building your form and decide to change the layout, moving sections of form items is much easier than moving each form item individually. Creating the general information area: The general information area contains the title of the survey, more information for the form submitter, and an estimated time for completion.</li> </ul> </li> <li> <p>Drag a Section onto the form. The Section is placed into the grid area, and is highlighted to show the section has focus.</p> <p>Notice that the Section contains a grid within it. Form items for a section are added to the grid of the section.</p> </li> <li> <p>Click the field spanning handle and drag it to extend the section over both columns.</p> <p>You can resize any form item to span across multiple rows or columns.</p> <p></p> </li> <li> <p>Click a grid box, then select Image from the Palette.</p> <p>The image form item is added to the form. You can edit many form items directly on the form, but others require you to use the Properties side panel. To display the list of available options for any form item, click the item on the canvas. The Properties side panel opens.</p> <ol> <li> <p>Click Add file, then Browse to locate the logo of your company. If you do not have a logo, browse to a small resolution image on your computer.</p> </li> <li> <p>Click Open to select the image, and OK to close the Add File or URL Link window.</p> <p>The image is added to the form.</p> </li> </ol> </li> <li> <p>Add a Text item to the Image.</p> <p>This text item contains the name of the survey.</p> <ol> <li> <p>In the Size menu, set the font size to Large, then and Bold. Type Workplace Coffee Feedback and click OK.</p> <p>The formatted text is inserted into the form.</p> <p>Note: You can adjust the spacing between form items by dragging the slider in the border bar. The mouse changes to a slider, and you can adjust the proportions of the form items.</p> </li> </ol> </li> <li> <p>Add another Text item with the image. Using the field spanning handle, drag the form item to span both columns.</p> <ol> <li> <p>Enter the following text: We\u2019d like your feedback on coffee services in the office. Complete the survey to provide your feedback. Time to complete survey: 3 minutes or less.</p> </li> <li> <p>Click OK to add the text to the form.</p> </li> </ol> </li> <li> <p>Save the form, either by pressing Ctrl + S, or by clicking the Save icon.</p> </li> <li> <p>Creating the primary information area: Now, create the section that collects the name of the submitter, and asks the basic question of \u201cDo you drink the office coffee?\u201d You want to have 100% participation, but not everyone in the office might drink coffee. By allowing users to submit the survey with a negative response, you receive a complete set of data. Set a rule on the survey section to ask coffee-relevant questions only if the submitter indicates that they drink the office coffee.</p> </li> <li> <p>Add another Section to the form.</p> <ol> <li>Click the field spanning handle and drag it to extend the section over both columns.</li> </ol> </li> <li> <p>Click a grid box, then click Single Line Entry.</p> <p>The Single Line Entry is placed onto the form. Edit the title of the Single Line Entry directly on the form.</p> <ol> <li> <p>Click the title of the item: \u201cSingle Line Entry\u201d. The text is highlighted, and is now editable. Change the text to read: Your Name.</p> </li> <li> <p>Click Add hint... and type \u201cEnter your given name and surname.\u201d</p> <p>The hint is displayed directly on the form.</p> <p>Tip: Adding information to the hint fields gives more information that helps the user complete your form. For example, in this form, you ask for the user name. The hint helps clarify whether you want given name and surname, given name only, or given , middle, and surname. You can also provide more clarification for users by inserting place holder text into each Single Line Entry item. Place holder text is available in the Properties side panel, and is available for any form item where the user must type information. For example, Single Line, Multi-Line, Currency, Number, and Email.</p> </li> <li> <p>In the Single Line Entry on the canvas, click the box that is labeled Click to set as required.</p> <p>Users must complete this field to submit the form.</p> </li> </ol> </li> <li> <p>Select Select One from the Palette and put it in a grid area with the Your Name text item.</p> <p>The Properties side panel opens.</p> <ol> <li> <p>Change the Title: to Do you drink the office coffee?</p> </li> <li> <p>Click the Required check box to make this question mandatory.</p> </li> <li> <p>In the Options: section, one option is automatically available. To add another option, click the Add option plus sign. Set the options to:</p> <ul> <li>Yes</li> <li>No, I drink other hot beverages.</li> <li>No, I don\u2019t drink hot beverages. Displayed Value and Saved Value \u2013 When you use any form item that has Set Options, two fields are displayed: Displayed Value and Saved value. As you type in the Displayed Value, the Saved Value is automatically updated with the same value. There are some cases where the Saved Value differs from the Displayed Value.\u00a0For example, our Displayed Value questions are long. If you export the data from a Leap application to a spreadsheet, the selected answers are truncated and the data might be difficult to interpret. If you change the Saved Values of the three questions to \u201cYes\u201d, \u201cOther\u201d, and \u201cNo\u201d, or assign numerical values, the results are easier to understand.</li> </ul> </li> <li> <p>Click OK.</p> </li> </ol> </li> <li> <p>Save your form and preview it.</p> <p>The Preview icon is located with the Save icon.</p> <p>Note: Ensure that your browser does not block pop-up windows, as the preview form opens in a new window or new tab, depending on your browser settings.</p> <p>Notice that the Submit and Cancel buttons are automatically added for you. While you can enter data into the form in Preview mode, you cannot submit a form until it is deployed.</p> </li> <li> <p>To return to building the form, close the tab or the browser window in which the preview opened.</p> <p>Creating the survey: Now create the section which contains the survey questions. This section has a rule set on it, so if the user selects \u201cNo, I drink other hot beverages\u201d or \u201cNo, I don\u2019t drink hot beverages\u201d, the survey is not displayed. First create the rule, then add the survey to the section.</p> </li> <li> <p>Click the border bar to access the row action menu. Select Insert Row (after).</p> </li> <li> <p>Click Section from the Palette, then click the form. Extend the section over both columns.</p> </li> <li> <p>Click the Rules icon.</p> <p>The Rules window opens.</p> <ol> <li> <p>Click Add Rule.</p> </li> <li> <p>In the When this is true: section, select Do you drink coffee?.</p> </li> <li> <p>Set the operation to Does not equal.</p> </li> <li> <p>Leave A fixed value in the next menu and select Yes.</p> </li> <li> <p>In the Perform this action section, select Survey in the first menu.</p> <p>As you build the rule, it is automatic error checking is performed. If there is an error in the logic, either a warning sign or an error sign is displayed. As this rule contains no errors, a verification icon is displayed.</p> </li> <li> <p>Select Hide in the second menu.</p> </li> <li> <p>Click Apply and Close to save your changes and close the Rules window.</p> <p>The rule is now set so when a user responds that they don't drink coffee, they are not shown the survey about what type of coffee they prefer.</p> </li> </ol> </li> <li> <p>Now that the rule is set, add the survey questions using:</p> <ul> <li>Two Survey form items: one to ask what roast of coffee the employees prefer, the other to ask them questions about the coffee provided.</li> <li>A Select Many form item to provide more information about what they like or dislike about the coffee.</li> <li>A Multi-Line Entry form item to provide detailed comments.</li> <li> <p>Select Survey from the Palette and add it to the section grid. Extend the survey over both columns.</p> </li> <li> <p>Set the following properties in the side panel:</p> <ul> <li>Title: \u2013 Coffee preference</li> <li>Hint: \u2013 What type of coffee roast do you prefer?</li> <li>Options:<ul> <li>Dark Roast</li> <li>Medium Roast</li> <li>Light Roast</li> <li>Decaf</li> <li>Click OK.</li> </ul> </li> </ul> </li> <li> <p>Change the survey question from the default \u201cClick to edit\u201d to I prefer to drink:</p> </li> </ul> </li> <li> <p>Select Survey from the Palette and add it with the Coffee preference survey. Extend the survey over both columns.</p> <ol> <li> <p>In the Properties panel, set the following properties:</p> <ul> <li>Title: \u2013 Please rank each question:</li> <li> <p>Options:</p> Displayed Value Saved Value Totally agree 5 Somewhat agree 4 Agree 3 No opinion 0 Somewhat disagree 2 Totally disagree 1 </li> </ul> <p>If you export the data to a spreadsheet program, each user\u2019s response displays as the numerical code, rather than the Displayed Value. Tabulation of results is easier as you can sort the submitted responses by Saved Value numerical indicator.</p> </li> <li> <p>Review the ranking labels.</p> <p>Ranking labels are displayed before and after the Displayed Value. Set the following properties:</p> <ul> <li>Select Display before and after labels.</li> <li>In the Before label: text box, typeAgree.</li> <li>In the After label: text box, typeDisagree.<ol> <li>Change the survey question from the default \u201cClick to edit\u201d to: I like the coffee at work.</li> </ol> </li> </ul> </li> <li> <p>Click Add question to add another row to the survey. Change the survey question to: If changes were made, I would drink more coffee.</p> <p>You can repeat this step to add more questions to the survey.</p> </li> </ol> </li> <li> <p>An alternative to multiple survey questions is to add a Select Many form item where users can select multiple choices from a list.</p> </li> <li> <p>Click Select Many from the Palette and place it onto the form near the survey. Extend the Select Many form item over both columns.</p> <p>The properties panel opens.</p> <ol> <li> <p>Note: You can change the orientation of the Select Many choices by changing the Choice Layout. Changes are made instantly on the form. You can also select a minimum and maximum number of choices the user can select.</p> <p>Set the following properties:</p> <ul> <li>Title: \u2013 I find the coffee in the office:</li> <li>Hint: \u2013 Select all that apply.</li> <li>Options:<ul> <li>Too acidic</li> <li>Too bitter</li> <li>Too weak</li> <li>Too strong</li> <li>Goes cold too quickly</li> <li>Too gritty</li> <li>Perfect. No changes required. For example, you can require the user to select a minimum of two choices and a maximum of 5.</li> </ul> </li> </ul> </li> <li> <p>Click OK.</p> </li> </ol> </li> <li> <p>Save the form.</p> </li> <li> <p>To complete the survey form, add a Multi-Line Entry so users can submit other options, or opinions.</p> </li> <li> <p>Click Multi-Line Entry from the Palette and place it onto the form with the Select Many form item. Extend the Multi-Line Entry form item over both columns.</p> <p>The properties panel opens.</p> <ol> <li> <p>Set the following properties:</p> <ul> <li>Title: \u2013 Please enter any specific suggestions you might have:</li> <li>Width: \u2013 Full width. Selecting Full width results in the space for entering data automatically adjusting to the size of the form in the browser window.</li> <li>Hint: \u2013 For example, a specific bean blend you\u2019d like us to try.<ol> <li>Click OK.</li> </ol> </li> </ul> </li> </ol> </li> <li> <p>The functionality of the survey is now in place. When users complete the survey and submit it, they receive a visual confirmation on the screen that the survey is submitted, and by default, are shown the survey again. To prevent user confusion, and to prevent the user from submitting the form again, redirect the user to your company website after the form is submitted.</p> <p>Adding a redirect URL is done in the Workflow tab. By default, each form automatically has a Start stage and a Submitted stage. The Start stage contains the Submit and Cancel buttons that are seen when you preview the form.</p> </li> <li> <p>Click the Workflow tab.</p> <ol> <li> <p>Click the Submit button node.</p> <p>The Properties panel opens. The Action Completion Message: has \u201cYour data has been successfully submitted.\u201d as the default message. You can leave the default, or change the text.</p> </li> <li> <p>In the Action Completion Redirect URL (optional): text entry area, enter the URL of your company website.</p> </li> </ol> </li> <li> <p>Click the Design tab to return to the main body of the form.</p> <p>The coffee survey is now complete. Save and preview the form.</p> </li> </ol> <p>Now that you have built a form, you must deploy it so it is available for users.</p>"},{"location":"tut_survey_application_module1.html#lesson12","title":"Application management","text":"<p>The following steps describe how to deploy a completed form, launch a form, enter sample data, review the submitted sample data, then delete the submitted sample data.</p> <p>Deploying an application \u2013 Deploying, or publishing forms is done in the Manage tab.</p> <ol> <li> <p>Click the Manage tab.</p> </li> <li> <p>Click the Deploy link for your survey.</p> <p>The Deployment Settings window is displayed.</p> </li> <li> <p>Select Set deployment Period. Set the Start and Stop dates to span a two week window, starting today.</p> <p>Tip: It is useful to have a start and end date for some applications because users are forced to complete the form within a specific time frame.</p> </li> <li> <p>Click Start.</p> <p>The application is deployed.</p> <p>After the application is deployed, you need the URL to provide to your colleagues so they can complete the survey. There are two ways to get the URL:</p> <ul> <li>Click the Launch link. A browser window launches with the URL of the deployed form in the address bar. Notice that the Submit button on the end of the form is now available.</li> <li>Expand the information for the Coffee Feedback application by clicking the Show application details button for application.\u00a0The link is provided on the screen in the URL Links section.\u00a0Copy the URL for distribution to your coworkers.</li> <li>Updating an application after deployment \u2013 You can change an application at any time. However, you must deploy the application again for users to see your changes. There are two ways to change a deployed application: Update the deployed application, or stop the deployment, and then redeploy.</li> </ul> </li> <li> <p>To update a deployed application, in the Manage tab click the Edit link.</p> <p>A message is displayed to warn you that changing an application after it is deployed can affect previously collected data.</p> <ol> <li> <p>Click Yes on the warning message.</p> <p>The form opens and is available for editing.</p> </li> <li> <p>Make the required changes to the form. Save the form again.</p> </li> <li> <p>Click the Manage tab, then click the Deploy link.</p> </li> <li> <p>Click Update.</p> <p>The application is redeployed with the updated form.</p> </li> </ol> </li> <li> <p>You can also stop the deployment manually, make changes, then redeploy the application. If a deployment is stopped, the application is no longer available online.</p> </li> <li> <p>To stop a deployed application, click the Deploy link.</p> <p>The Deployment Settings window opens</p> <ol> <li> <p>Click Stop.</p> <p>Note: If a user is completing the form when you stop, redeploy, or update an application, they receive an error message. The unsubmitted data is lost and the user must fill the form in again.</p> </li> </ol> </li> <li> <p>Adding sample data to an application \u2013 Now that the form is complete and deployed, add some sample data.</p> </li> <li> <p>Click the Launch link.</p> <p>The application opens in a new browser window.</p> </li> <li> <p>Submit the form several times with various sample data.</p> <p>Here are some examples to try, but you can use your own combination of survey results.</p> <ul> <li>John Smith who drinks the office coffee. He prefers dark roast, and does not enjoy the office coffee because it is too weak and cold.</li> <li>Mary Jones who drinks only tea.</li> <li>Sam Wesson who drinks the office coffee. He likes a medium roast and like the coffee the way it is. He would like management to try a different roast combination by a local roast house.</li> <li>Ellen Steele who drinks the coffee, but prefers decaffeinated coffee. She would like the coffee to be weaker. Note: As you submit each survey, you see a message upon completion, and then are redirected to the company website.</li> </ul> </li> <li> <p>Viewing submitted data \u2013 After the sample data is added, return to Leap to review the submitted data.</p> </li> <li> <p>In the Manage tab, click the View Data link.</p> <p>The View Data screen is displayed in either a new tab or a new browser window, depending on your browser settings. On the View Data page, all submitted responses are summarized in a chart.</p> </li> <li> <p>Click Sam Wesson\u2019s name.</p> <p>His submitted form is displayed in the Application view.</p> </li> <li> <p>Deleting sample data \u2013 Now that you tested the form, it is highly recommended that you delete all sample responses to avoid interference with the actual data from your coworkers. There are two ways to delete the sample data:</p> <ul> <li>Delete individual entries from the View Data screen</li> <li>Update the deployment to delete previous records.</li> <li> <p>To delete submitted data from the View Data screen:</p> </li> <li> <p>Select a sample record from the list so it is displayed in the Application view window.</p> <p>If the form is wider than the allotted screen space, scroll bars are displayed.</p> </li> <li> <p>Click Delete Record in the Application view window.</p> <p>Note: Clicking the x in that window closes the record, but does not delete it.</p> </li> </ul> </li> <li> <p>To delete submitted data by updating the deployment:</p> <ol> <li> <p>Close the View Data tab or browser window.</p> <p>You are on the Leap Manage screen.</p> </li> <li> <p>Click Deploy.</p> <p>The Deployment Settings window opens.</p> </li> <li> <p>Click the Advanced tab.</p> </li> <li> <p>Select the check box for Delete previous submissions. You are asked to confirm the deletion of the submitted data. Click OK.</p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click the View Data link.</p> <p>The blank View Data page is displayed.</p> </li> </ol> </li> </ol> <p>The survey form is complete and ready to send to your coworkers. You can send out the survey link in an office-wide email. After two weeks, the survey deployment period ends, and you provide the survey results to the Office Manager.</p> <p>Parent topic: Building a Survey application</p>"},{"location":"tut_tutorials_toc.html","title":"Tutorials for app design","text":"<p>The HCL Leap tutorial section contains two tutorials to help you learn to use Leap.</p> <ul> <li> <p>HCL Software U: Application development </p> </li> <li> <p>Building a Survey application This tutorial describes how to build a simple survey application with HCL Leap.</p> </li> <li>Adding tables and workflow elements to a HCL Leap form This tutorial provides information and lessons about more advanced Leap topics. Basic form design is not covered in this tutorial.</li> </ul>"},{"location":"tut_video_overview.html","title":"HCL Software U: Application development","text":""},{"location":"tut_video_overview.html#section_pjl_n4m_lzb","title":"Introduction to application development","text":"<p>HLP-CD-101 Introduction to Application Development</p> <p>Parent topic: Tutorials for app design</p>"},{"location":"upgrade_application_design.html","title":"Upgrading an application design","text":"<p>The upgrade feature allows an application design to be replaced by a new version.</p> <p>You many want to make significant changes to your application but do not want to affect the running version while you finalize the details. If you create a copy of the application, using export and import, you can make and test all changes. The copy can be edited, deployed, and records submitted without affecting the original application. Once you have completed the changes on the application copy, you can upgrade the original app with the export of the copy. The original app will maintain its application identification, but will also contain all the changes from the copy.</p> <ol> <li> <p>Export an existing application:</p> <p></p> <p>Select a local directory where the application file will stored.</p> </li> <li> <p>Select New Application &gt; From Existing &gt; Next.</p> </li> <li> <p>Choose the application from your local directory and click Create.</p> <p>Note: The imported application will have the same name as the original - edit the name to distinguish it from the original. It is also recommended that you change the access permissions so that others may not use the application while it is in development.</p> </li> <li> <p>Edit the new application to work on the next iteration of the app. This can be deployed and tested, without interfering with the original application.</p> </li> <li> <p>When satisfied, Export the new application (without data):</p> <p></p> </li> <li> <p>In the original application, select Upgrade and choose the exported new application (ex. MyApp v2).</p> <p>Note: Do not check Replace submitted data.</p> <p></p> <p></p> </li> <li> <p>This will result in the older app (MyApp) being upgraded to the newer version. Decide if you are going to keep the copy for further future edits or delete it.</p> </li> </ol> <p>Parent topic: Application Management</p>"},{"location":"upgradingleap_sec.html","title":"Upgrading","text":"<p>The following topics describe how to upgrade Leap.</p> <ul> <li>Upgrading Leap on a traditional platform The following instructions describe how to upgrade Leap by using the WebSphere\u00ae Application Server Administrative console.</li> </ul> <p>Parent topic: Deploying Leap</p>"},{"location":"wf_managing_the_files_associated_with_your_appl.html","title":"Managing the files associated with your application","text":"<p>You can upload a variety of files, such as images, for use with your application. Managing these embedded files is done in the Files section of the Settings tab</p> <p>You can upload files such as images, JavaScript\u2122, or CSS files from the Settings tab. Files are also uploaded using many form items, such as Media, Image, Button, Page Navigation, and Text, when creating your form.</p> <p>Once a file is uploaded, use the file manager to update, copy or delete files. HCL Leap maintains references on the relationships between the files and where they are placed on the form. The files stored in the file manager are also exported with the application.</p> <ul> <li>Uploading files for use in your application The following instructions describe how to upload files to Leap, and how to use the uploaded files within your application.</li> </ul> <p>Parent topic: Using the editor</p>"},{"location":"whats_new%20-%20Copy.html","title":"What's new in 9.3.5?","text":"<p>For a full list of fixes by release, see this article.</p>"},{"location":"whats_new%20-%20Copy.html#new-features","title":"New features","text":"<ul> <li>Bug fixes.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#934","title":"9.3.4","text":"<ul> <li>Bug fixes.</li> <li>Added support for Secrets in Kubernetes. For more information, see Provide admin user a custom secret.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#933","title":"9.3.3","text":"<ul> <li>Support for Custom Widget API. For more information, see Custom Widget API.</li> <li>Support for PostgreSQL databases. For more information, see Creating a PostgreSQL database.</li> <li>Admin Application Dashboard. For more information, see Admin Application Dashboard.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#932","title":"9.3.2","text":"<ul> <li> <p>Open Liberty support.</p> <p>For more information, see the following topics:</p> <ul> <li>Deploying to a Container (Kubernetes) Platform - Open Liberty</li> </ul> </li> </ul>"},{"location":"whats_new%20-%20Copy.html#931","title":"9.3.1","text":"<ul> <li> <p>New Copy/Paste feature.</p> <p>The \"copy/paste\" feature enables the application author to copy an item from their form and paste it into another page/form/app page within the same application or another one on the same Leap server. For more information, see Copying items.</p> </li> <li> <p>New Workflow Branching feature.</p> <p>The \"workflow branching\" feature enables the application author to specify a condition that changes where a submitted form is directed. For more information, see Branching.</p> </li> <li> <p>Improved HTML editor experience.</p> </li> <li>Improved page navigation and validation behavior, including custom error handling with JavaScript API.</li> <li>Refreshed Workflow diagram UI.</li> </ul> <p>Administrative improvements:</p> <ul> <li>Beginning with this release, Leap has a limited capability to restrict the rendering of Leap Forms using a \u201cStrict CSP\u201d policy. For more information, see Strict CSP.</li> <li>Kubernetes-friendly Container.</li> <li>Access to service descriptions may be restricted by user, group or special role (i.e. authenticated, anonymous, etc). For more information, see the following topics:<ul> <li>Deploying a Service Description</li> <li>Configuration properties</li> </ul> </li> </ul>"},{"location":"whats_new%20-%20Copy.html#93","title":"9.3","text":"<p>UI Improvements:</p> <ul> <li>Tabs across the top are replaced by a sidebar.</li> <li>Added breadcrumb navigation</li> <li>Updated the toolbar</li> <li>Item Properties are now shown in a side panel instead of a modal dialog.</li> <li>New Workflow Design. New apps will have two stages: Start and Submitted.</li> <li>Improved user experience for Action Properties and Submit Activities</li> <li>Improved user experience for Workflow Stage Visibility</li> <li>Improved user experience for Stage Properties and Roles/Permissions</li> </ul> <p>New Palette Items:</p> <ul> <li>App pages. App Pages provide a free-form app building canvas, and allow authors to build anything from simple welcome pages to complex dashboards. App pages differ from Forms, which provide a canvas that specifically defines an interface to collect and store data with a built-in function to submit a record and move it through workflow stages. For more information, see Creating an application and navigate to Step 4.</li> <li>DataGrid</li> <li>RichText Entry field</li> <li>Name Picker field</li> </ul> <p>Other:</p> <ul> <li>New service activity timing: before or after data is submitted</li> <li>Support for Role based rules allows authors to define a rule with the condition that a user is or is not in a particular role. For more information, see Creating rules in your application.</li> <li>Support for Stage based rules allows authors to define a rule with a condition that the form is or is not in a particular stage.</li> <li>New javascript functions are supported. For more information, see Interface objects.</li> <li>New options for redirecting: redirect to another Leap Application, web URL, form or app page. For more information, see Redirecting users after form submission.</li> <li>New form property Show print and delete buttons.</li> <li>User\u2019s can now determine where to save a filled PDF. For more information, see Saving a PDF to a file location.</li> <li>Ability to add a custom theme to be shared by multiple applications.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#921","title":"9.2.1","text":"<p>Support for the following:</p> <ul> <li>Oracle 19c:</li> </ul> <p>New features include:</p> <ul> <li>Embedding of forms without an <code>&lt;iframe&gt;</code></li> </ul>"},{"location":"whats_new%20-%20Copy.html#92","title":"9.2","text":"<p>New features include:</p> <ul> <li>New Application wizard</li> <li>Create an application directly from an existing Excel spreadsheet</li> <li>Send attachments in email notifications (including filled PDF\u2019s)</li> <li>Numerous visual and usability improvements, including:<ul> <li>Double-click to open item properties</li> <li>One-click copy to clipboard on URLs and embed codes</li> <li>Improved first-time-user experience</li> <li>Redesigned palette</li> <li>Additional confirmation prompts on irreversible actions</li> <li>Stylistic improvements to the Manager page</li> </ul> </li> <li>Addition of has value and not operators for View Responses and the Data REST API</li> <li>Addition of has value and has no value for rules</li> <li>Improved experience for those using FlexNet licensing</li> <li>Print view enhancements<ul> <li>Vertical table layout option (for wide tables)</li> <li>Removed application size limit</li> <li>Use the Data Label property</li> <li>mark-up is instrumented to allow for easier manipulation</li> </ul> </li> <li>Better default logging on failed service calls</li> <li>Attachment clean-up service now configurable</li> <li>Include record UID in exported spreadsheets</li> <li>General fixes and security patches</li> </ul>"},{"location":"whats_new%20-%20Copy.html#91","title":"9.1","text":"<p>New features include:</p> <ul> <li>PDF document integration enhancements:<ul> <li>Store filled PDFs to a network drive</li> <li>Map Table items to tables in a PDF</li> <li>Ability to flatten a filled PDF</li> </ul> </li> <li>New JavaScript API functions:<ul> <li>app.getLocation()</li> <li>item.setColumnHeaders() and item.getColumnHeaders() for Table items</li> </ul> </li> <li>A new Custom Attribute property</li> <li>Full accessibility of the date picker</li> <li>Ability to render HCL Leap applications within ElectronJS desktop applications</li> <li>New applications now have a middle Submitted stage by default</li> <li>Option to block UI interaction while a service call is executing</li> <li>Ability to hide the Use tab</li> <li>General fixes and minor improvements</li> </ul>"},{"location":"whats_new%20-%20Copy.html#90","title":"9.0","text":"<p>New features include:</p> <ul> <li>New JavaScript API functions: <code>BO.isValid()</code>, <code>BO.getInvalidMessages()</code>, and <code>app.showMessage()</code>.</li> <li>\"Reply To\" capability for email notifications.</li> <li>Allow attachments to be viewed in browser instead of downloading.</li> <li>Display Data Label property in View Responses.</li> <li>Custom JavaScript editor is now resizable.</li> <li>Design-time usability improvements for service calls.</li> <li>General and security fixes.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#8642","title":"8.6.4.2","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 12c and 11g</li> <li>10.5 and 11.x</li> <li>8.5.5 and 9</li> <li>Java\u2122 7</li> <li>Derby 10.10.2</li> <li>ICU 55.1</li> </ul> <p>New features include:</p> <ul> <li>An updated Styles tab to enable easy customization of an application's appearance through changes to colors, fonts and other style attributes. Use the provided Customize action to customized your theme and then use the theme export and import functionality to style other applications with the same theme. Previously available styling features, like the ability to add additional custom CSS are still available and contribute to the overall look of an application, but are not edited or modified as part of the new theme customization feature. For more information, see Styling your application with a custom theme.</li> <li>Application owners can now import a set of data from a spreadsheet into an application. An Import Data button for each application is provided in View Responses. Data can be imported from recent versions of xls and xlsx and the data must conform to specific application constraints and setup requirements. For more information, see Importing data in view responses.</li> <li>Application designers will now have the choice to store filled PDF documents as an attachment as part of a submitted record, rather than simply returning the filled PDF to the user. For more information, see Mapping form items to PDF fields and storing the filled PDF.</li> <li>General and security fixes.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#863","title":"8.6.3","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 12c and 11g</li> <li>10.5</li> <li>8.5.5</li> <li>Java 7</li> <li>Derby 10.10.2</li> <li>ICU 55.1</li> </ul> <p>New features include:</p> <ul> <li>An easy-to-use Format feature. Line of Business users can enter simple expressions samples of the required format to set format parameters. More advanced users can enter regular expressions. A customizable error message is also available for this feature.</li> <li>Post deployment window containing all the details that are required to start using your application. After you deploy an application, the window opens and describes the\u201cNext Steps\u201d available. Send the launch URL to your users so they can access the application. URLs for viewing responses, charts, and other options are also displayed. The post deployment dialog is also displayed when you import and deploy an application.</li> <li>When you import an existing application, you can choose to remove users from theAccess page. Clearing the previously added users ensures only the people you add to the application have access. After importing an application, use theAccess page to review and modify the existing permissions.</li> <li>The editor for adding rich text to your application was updated.</li> <li>The Data Access Rest API contains additional filtering parameters to allow more specific refinement of the response data.</li> <li>The following API usability enhancements were added:<ul> <li>Simplified JSON requests and response structures.</li> <li>New metadata option</li> </ul> </li> <li>Automatic generation of swagger files for applications.</li> <li>A new Service Configuration window where you can quickly set up your application to make JSON service calls.</li> <li>The addition of a new configuration flag that disables the embedding of your application into other web sites.</li> <li>General usability enhancements include:<ul> <li>Carbon Copy and Blind Carbon Copy fields for Stage Action emails.</li> <li>New Welcome text on the Manage page.</li> <li>On the Manage page, you can access the Summary Charts URL. This link takes a user with the appropriate permission settings to the stand-alone Summary Chart page.</li> </ul> </li> <li>Security fixes.</li> <li>General bug fixes.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#862","title":"8.6.2","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 12c and 11g</li> <li>10.5</li> <li>8.5.5</li> <li>Java 7</li> <li>Derby 10.10.2</li> <li>ICU 55.1</li> </ul> <p>New features include:</p> <ul> <li>A new Events tab for easier management of custom JavaScript\u2122 within an application. The Events tab displays all JavaScript used within an application.</li> <li>A new Alterntative text tag for Image and Media form items. To increase the accessibility of your form, you can now add alternative text to the Image and Media form items.</li> <li>You can now import a list of choices from a spreadsheet into Select One,Select Many, and Dropdown form items. The lists can be comma separated, or space separated. If you copy two columns of choices from a spreadsheet, the first column is set as the Displayed Value, and the second column set as the Saved Value.</li> <li>In the Settings tab, under Files, you can now download any previously uploaded file.</li> <li>A Java 2 Connector (J2C) provider is now supported for use in the HTTP Service Transport with .</li> <li>A new openURL query parameter so you can dynamically set a application to open at run time.</li> <li>The Media form item is supported in Google Chrome via HTML5.</li> <li>Two new JavaScript functions were added to the User Interface Objects: setTabTitle andsetTabTitleList.</li> <li>The amount of Stage Action data an application can have has been increased.</li> <li>General and security fixes.</li> </ul>"},{"location":"whats_new%20-%20Copy.html#861","title":"8.6.1","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 11g</li> <li>10.5</li> <li>8.5.5</li> <li>Java 7</li> <li>Derby 10.10.2</li> </ul> <p>New features include:</p> <ul> <li> <p>Document Integration: Where compliance or regulatory requirements mandate it, integrating captured data with existing documents can be an important part of the overall solution. These output documents can be provided for precise printing, document signing or archiving. Using a Service Configuration, you can map form items to PDF items. When the user clicks a button, the PDF is populated. For more information, see Leap document integration.</p> </li> <li> <p>Integration features</p> <ul> <li>Render parameters: Two public render parameters were added to provide additional portlet-to-portlet communication.</li> <li>Page refresh setting: A new page refresh setting is available in the Shared Settings. This property lets you set whether the portal page is refreshed when the form is submitted.</li> <li>Support for non-default portal context root: The Leap Portlet now supports portal with a non-default context root, or an empty context root.</li> <li>Script Portlet and DDC samples: Two new samples are available for usingwith . Both samples are available on the developerWorks\u00ae wiki.</li> </ul> </li> <li>Additional in-product help: If you're new to , blue help bubbles describe the basic function of each page or section, as well as provide additional help resources. Additional hover help, and context sensitive help were added throughout the application.</li> <li>JSON is now supported in the:<ul> <li>HTTP Transport</li> <li>JavaScript Data Access Rest API</li> </ul> </li> <li>New JavaScript functionality: New JavaScript functions were added to the User Interface Objects.</li> <li>Forms Tab:<ul> <li>Moving items in an application: You can now move form items between pages of a form.</li> <li>Order of forms in a application: You can change the order of the forms within an application by dragging and dropping them in the Outline view. When the application is deployed and launched, the first form in the application becomes the default form seen by the user.</li> <li>Warning message on Save: does not support multiple people editing the same application. If you and another user edit the same application, and the other user saves changes while you are still editing, a warning message is now displayed asking if you want to overwrite the changes made by the other user.</li> <li>Date item loads current date: A new property is available for theDate field. When selected, if the user leaves the Datefield empty, the current date is loaded upon form submission. If the user fills in the date field, the date supplied by the user is used.</li> <li>Single and Multi-Line entries uppercase: This new feature, located in theBasic tab of the Properties window lets you automatically change the user's entered text into upper case letters.</li> <li>Hiding Table buttons for Add, Edit, and Delete: In theAdvanced tab for a Table, you can now set that no buttons are displayed with your table. The buttons can be enabled using JavaScript, if required.</li> </ul> </li> <li>Manage Tab:<ul> <li>Default sort order: Default sort order was changed so the most recently changed applications are listed at the top. Now you can quickly find recently modified applications. Alphabetical sorting is still available, but no longer the default.</li> <li>Redeploy after saving: When you edit an application, and save the changes you must redeploy the application for the changes to be implemented. A visual indicator is now displayed as a reminder when an application has changes that have not been deployed.</li> <li>Adding tags to an application: When you create a new application, you can add tags at the same time. Tags are used to search for applications in theManage screen. Previously, you could only add tags to your application after it was created and listed in the Manage tab. Tags are separated by spaces, so if you need to make a multiple-word tag, use an underscore between the words.</li> </ul> </li> <li>Access Tab: The \"All Authenticated Users\" group cannot be added to any role that has Edit permissions. Users can still be assigned individually, or as groups, to roles with edit permissions. This prevents your application from showing up in the Manage Tab for all authenticated users, and from their applications appearing on your Manage tab. You see only the applications you created, or those to which you have edit permissions.</li> <li>Rules:<ul> <li>Naming Rules: You can now name and rename rules. Providing unique, descriptive names to rules makes them easier to find when building your application.</li> <li>See which item is used in a Rule: When a form item has a rule enabled, the Rules icon for the item contains a check mark. The check mark lets you quickly see which form items are involved in a rule.</li> </ul> </li> <li>Stages:<ul> <li>Stage Description: When you create a new Stage, you can add a detailed description. Adding descriptions is useful if you will have several similarly named stages that perform slightly different portions of the workflow.</li> <li>Rich Text Action Completion Message: The Action Completion Message is now a rich text field.</li> <li>Success message after submission: When a user completes and submits a form, the new default is to take the user away from the form and display the Action Completion Message. This reduces user confusion as they no longer see an empty, reloaded form on the screen. The existing options for the action taken upon form submission are still available in theEdit Form Properties window.</li> </ul> </li> <li>View Responses:<ul> <li>Individual Print, Email, and Delete buttons added: Print, email and delete buttons were added to each record row, so you can access them without opening each individual record.</li> <li>Email option contains the link to the record: The email operation emails the link to both print and launch the record.</li> <li>New fields added to Responses screen: \u201cCreated on\u201dand \u201cLast Updated By\u201d were added to the table so you can see additional information on each submitted form.</li> <li>Selected results open in a new window: When you click on a submitted record, it opens in a window, rather than in a side pane.</li> <li>Default view changed: When you click the View Responses link, the default view is now Responses, rather thanSummary.</li> </ul> </li> <li>A number of upgrade routine fixes, accessibility, and usability changes were implemented.</li> <li>Values entered into the password item are not stored in your application. Since the password is never stored, it is never exported or shown in any field. The password field is empty when the form is rendered in its next stage. Using the password for calling server-side services during stage transitions still work as the value is included as part of the submitted data and not stored as part of the application record.</li> </ul>"},{"location":"whats_new.html","title":"What's new in 9.3.7?","text":"<p>For a full list of fixes by release, see this article.</p>"},{"location":"whats_new.html#new-features","title":"New features","text":"<ul> <li>Integrate with HCL Volt MX Foundry. For more information, see Integrate with HCL Volt MX Foundry.</li> <li>A Repeating Section widget has been added to the Custom Widget API.  For more information, see Custom Widget API.</li> <li>Added setup instruction for Kubernetes. For more information, see Creating a container registry secret and Creating and formatting the custom-values.yaml.</li> </ul>"},{"location":"whats_new.html#behavior-changes","title":"Behavior changes","text":"<p>Updated Design Canvas</p> <p>The buttons for adding/deleting rows/columns is more prominent and has a new look.</p> <p>Updated the Rules Dialog</p> <p>The condition is now listed first and then the actions.</p> <p>Improved create app from spreadsheet</p> <p>An app page with a data grid is included as part of the app creation.</p>"},{"location":"whats_new.html#936","title":"9.3.6","text":"<p>New features</p> <ul> <li>Admin Config UI changes. For more information, see Admin Configuration Page.</li> </ul> <p>Behavior changes</p> <ul> <li>Embedding Leap applications<ul> <li>The 'xFrameOptions' property has been deprecated. Use 'embedDomainWhitelist'.</li> <li>The default behavior has changed to not allowing Leap forms to be embedded.</li> </ul> </li> <li>Roles/Permissions<ul> <li>AdministrativeUsers now have the privileges of SuperAdminUsers; they can now see and edit all applications.</li> <li>Users in the SuperAdminUsers role no longer have access to the application data by default. To access the data, they must be given the correct permission within the application.</li> </ul> </li> <li>Leap Kubernetes image<ul> <li>A new PostgreSQL JDBC jar file has been included in the Leap image. The file name no longer includes the version number to prevent future breakages when it is updated. The original file 'postgresql-42.6.0.jar' will be removed from the image in the next release.</li> </ul> </li> </ul>"},{"location":"whats_new.html#935","title":"9.3.5","text":"<ul> <li>Bug fixes.</li> </ul>"},{"location":"whats_new.html#934","title":"9.3.4","text":"<ul> <li>Bug fixes.</li> <li>Added support for Secrets in Kubernetes. For more information, see Provide admin user a custom secret.</li> </ul>"},{"location":"whats_new.html#933","title":"9.3.3","text":"<ul> <li>Support for Custom Widget API. For more information, see Custom Widget API.</li> <li>Support for PostgreSQL databases. For more information, see Creating a PostgreSQL database.</li> <li>Admin Application Dashboard. For more information, see Admin Application Dashboard.</li> </ul>"},{"location":"whats_new.html#932","title":"9.3.2","text":"<ul> <li> <p>Open Liberty support.</p> <p>For more information, see the following topics</p> </li> <li> <p>Deploying to a Container (Kubernetes) Platform - Open Liberty</p> </li> </ul>"},{"location":"whats_new.html#931","title":"9.3.1","text":"<ul> <li> <p>New Copy/Paste feature.</p> <p>The \"copy/paste\" feature enables the application author to copy an item from their form and paste it into another page/form/app page within the same application or another one on the same Leap server. For more information, see Copying items.</p> </li> <li> <p>New Workflow Branching feature.</p> <p>The \"workflow branching\" feature enables the application author to specify a condition that changes where a submitted form is directed. For more information, see Branching.</p> </li> <li> <p>Improved HTML editor experience.</p> </li> <li>Improved page navigation and validation behavior, including custom error handling with JavaScript API.</li> <li>Refreshed Workflow diagram UI.</li> </ul> <p>Administrative improvements:</p> <ul> <li>Beginning with this release, Leap has a limited capability to restrict the rendering of Leap Forms using a \u201cStrict CSP\u201d policy. For more information, see Strict CSP.</li> <li>Kubernetes-friendly Container.</li> <li>Access to service descriptions may be restricted by user, group or special role (i.e. authenticated, anonymous, etc). For more information, see the following topics:</li> <li>Deploying a Service Description</li> <li>Configuration properties</li> </ul>"},{"location":"whats_new.html#93","title":"9.3","text":"<p>UI Improvements:</p> <ul> <li>Tabs across the top are replaced by a sidebar.</li> <li>Added breadcrumb navigation</li> <li>Updated the toolbar</li> <li>Item Properties are now shown in a side panel instead of a modal dialog.</li> <li>New Workflow Design. New apps will have two stages: Start and Submitted.</li> <li>Improved user experience for Action Properties and Submit Activities</li> <li>Improved user experience for Workflow Stage Visibility</li> <li>Improved user experience for Stage Properties and Roles/Permissions</li> </ul> <p>New Palette Items:</p> <ul> <li>App pages. App Pages provide a free-form app building canvas, and allow authors to build anything from simple welcome pages to complex dashboards. App pages differ from Forms, which provide a canvas that specifically defines an interface to collect and store data with a built-in function to submit a record and move it through workflow stages. For more information, see Creating an application and navigate to Step 4.</li> <li>DataGrid</li> <li>RichText Entry field</li> <li>Name Picker field</li> </ul> <p>Other:</p> <ul> <li>New service activity timing: before or after data is submitted</li> <li>Support for Role based rules allows authors to define a rule with the condition that a user is or is not in a particular role. For more information, see Creating rules in your application.</li> <li>Support for Stage based rules allows authors to define a rule with a condition that the form is or is not in a particular stage.</li> <li>New javascript functions are supported. For more information, see Interface objects.</li> <li>New options for redirecting: redirect to another Leap Application, web URL, form or app page. For more information, see Redirecting users after form submission.</li> <li>New form property Show print and delete buttons.</li> <li>User\u2019s can now determine where to save a filled PDF. For more information, see Saving a PDF to a file location.</li> <li>Ability to add a custom theme to be shared by multiple applications.</li> </ul>"},{"location":"whats_new.html#921","title":"9.2.1","text":"<p>Support for the following:</p> <ul> <li>Oracle 19c:</li> </ul> <p>New features include:</p> <ul> <li>Embedding of forms without an <code>&lt;iframe&gt;</code></li> </ul>"},{"location":"whats_new.html#92","title":"9.2","text":"<p>New features include:</p> <ul> <li>New Application wizard</li> <li>Create an application directly from an existing Excel spreadsheet</li> <li>Send attachments in email notifications (including filled PDF\u2019s)</li> <li>Numerous visual and usability improvements, including:</li> <li>Double-click to open item properties</li> <li>One-click copy to clipboard on URLs and embed codes</li> <li>Improved first-time-user experience</li> <li>Redesigned palette</li> <li>Additional confirmation prompts on irreversible actions</li> <li>Stylistic improvements to the Manager page</li> <li>Addition of has value and not operators for View Responses and the Data REST API</li> <li>Addition of has value and has no value for rules</li> <li>Improved experience for those using FlexNet licensing</li> <li>Print view enhancements</li> <li>Vertical table layout option (for wide tables)</li> <li>Removed application size limit</li> <li>Use the Data Label property</li> <li>mark-up is instrumented to allow for easier manipulation</li> <li>Better default logging on failed service calls</li> <li>Attachment clean-up service now configurable</li> <li>Include record UID in exported spreadsheets</li> <li>General fixes and security patches</li> </ul>"},{"location":"whats_new.html#91","title":"9.1","text":"<p>New features include:</p> <ul> <li>PDF document integration enhancements:</li> <li>Store filled PDFs to a network drive</li> <li>Map Table items to tables in a PDF</li> <li>Ability to flatten a filled PDF</li> <li>New JavaScript API functions:</li> <li>app.getLocation()</li> <li>item.setColumnHeaders() and item.getColumnHeaders() for Table items</li> <li>A new Custom Attribute property</li> <li>Full accessibility of the date picker</li> <li>Ability to render HCL Leap applications within ElectronJS desktop applications</li> <li>New applications now have a middle Submitted stage by default</li> <li>Option to block UI interaction while a service call is executing</li> <li>Ability to hide the Use tab</li> <li>General fixes and minor improvements</li> </ul>"},{"location":"whats_new.html#90","title":"9.0","text":"<p>New features include:</p> <ul> <li>New JavaScript API functions: <code>BO.isValid()</code>, <code>BO.getInvalidMessages()</code>, and <code>app.showMessage()</code>.</li> <li>\"Reply To\" capability for email notifications.</li> <li>Allow attachments to be viewed in browser instead of downloading.</li> <li>Display Data Label property in View Responses.</li> <li>Custom JavaScript editor is now resizable.</li> <li>Design-time usability improvements for service calls.</li> <li>General and security fixes.</li> </ul>"},{"location":"whats_new.html#8642","title":"8.6.4.2","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 12c and 11g</li> <li>10.5 and 11.x</li> <li>8.5.5 and 9</li> <li>Java\u2122 7</li> <li>Derby 10.10.2</li> <li>ICU 55.1</li> </ul> <p>New features include:</p> <ul> <li>An updated Styles tab to enable easy customization of an application's appearance through changes to colors, fonts and other style attributes. Use the provided Customize action to customized your theme and then use the theme export and import functionality to style other applications with the same theme. Previously available styling features, like the ability to add additional custom CSS are still available and contribute to the overall look of an application, but are not edited or modified as part of the new theme customization feature. For more information, see Styling your application with a custom theme.</li> <li>Application owners can now import a set of data from a spreadsheet into an application. An Import Data button for each application is provided in View Responses. Data can be imported from recent versions of xls and xlsx and the data must conform to specific application constraints and setup requirements. For more information, see Importing data in view responses.</li> <li>Application designers will now have the choice to store filled PDF documents as an attachment as part of a submitted record, rather than simply returning the filled PDF to the user. For more information, see Mapping form items to PDF fields and storing the filled PDF.</li> <li>General and security fixes.</li> </ul>"},{"location":"whats_new.html#863","title":"8.6.3","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 12c and 11g</li> <li>10.5</li> <li>8.5.5</li> <li>Java 7</li> <li>Derby 10.10.2</li> <li>ICU 55.1</li> </ul> <p>New features include:</p> <ul> <li>An easy-to-use Format feature. Line of Business users can enter simple expressions samples of the required format to set format parameters. More advanced users can enter regular expressions. A customizable error message is also available for this feature.</li> <li>Post deployment window containing all the details that are required to start using your application. After you deploy an application, the window opens and describes the\u201cNext Steps\u201d available. Send the launch URL to your users so they can access the application. URLs for viewing responses, charts, and other options are also displayed. The post deployment dialog is also displayed when you import and deploy an application.</li> <li>When you import an existing application, you can choose to remove users from theAccess page. Clearing the previously added users ensures only the people you add to the application have access. After importing an application, use theAccess page to review and modify the existing permissions.</li> <li>The editor for adding rich text to your application was updated.</li> <li>The Data Access Rest API contains additional filtering parameters to allow more specific refinement of the response data.</li> <li>The following API usability enhancements were added:</li> <li>Simplified JSON requests and response structures.</li> <li>New metadata option</li> <li>Automatic generation of swagger files for applications.</li> <li>A new Service Configuration window where you can quickly set up your application to make JSON service calls.</li> <li>The addition of a new configuration flag that disables the embedding of your application into other web sites.</li> <li>General usability enhancements include:</li> <li>Carbon Copy and Blind Carbon Copy fields for Stage Action emails.</li> <li>New Welcome text on the Manage page.</li> <li>On the Manage page, you can access the Summary Charts URL. This link takes a user with the appropriate permission settings to the stand-alone Summary Chart page.</li> <li>Security fixes.</li> <li>General bug fixes.</li> </ul>"},{"location":"whats_new.html#862","title":"8.6.2","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 12c and 11g</li> <li>10.5</li> <li>8.5.5</li> <li>Java 7</li> <li>Derby 10.10.2</li> <li>ICU 55.1</li> </ul> <p>New features include:</p> <ul> <li>A new Events tab for easier management of custom JavaScript\u2122 within an application. The Events tab displays all JavaScript used within an application.</li> <li>A new Alterntative text tag for Image and Media form items. To increase the accessibility of your form, you can now add alternative text to the Image and Media form items.</li> <li>You can now import a list of choices from a spreadsheet into Select One,Select Many, and Dropdown form items. The lists can be comma separated, or space separated. If you copy two columns of choices from a spreadsheet, the first column is set as the Displayed Value, and the second column set as the Saved Value.</li> <li>In the Settings tab, under Files, you can now download any previously uploaded file.</li> <li>A Java 2 Connector (J2C) provider is now supported for use in the HTTP Service Transport with .</li> <li>A new openURL query parameter so you can dynamically set a application to open at run time.</li> <li>The Media form item is supported in Google Chrome via HTML5.</li> <li>Two new JavaScript functions were added to the User Interface Objects: setTabTitle andsetTabTitleList.</li> <li>The amount of Stage Action data an application can have has been increased.</li> <li>General and security fixes.</li> </ul>"},{"location":"whats_new.html#861","title":"8.6.1","text":"<p>Support for the following versions:</p> <ul> <li>Oracle 11g</li> <li>10.5</li> <li>8.5.5</li> <li>Java 7</li> <li>Derby 10.10.2</li> </ul> <p>New features include:</p> <ul> <li> <p>Document Integration: Where compliance or regulatory requirements mandate it, integrating captured data with existing documents can be an important part of the overall solution. These output documents can be provided for precise printing, document signing or archiving. Using a Service Configuration, you can map form items to PDF items. When the user clicks a button, the PDF is populated. For more information, see Leap document integration.</p> </li> <li> <p>Integration features</p> </li> <li>Render parameters: Two public render parameters were added to provide additional portlet-to-portlet communication.</li> <li>Page refresh setting: A new page refresh setting is available in the Shared Settings. This property lets you set whether the portal page is refreshed when the form is submitted.</li> <li>Support for non-default portal context root: The Leap Portlet now supports portal with a non-default context root, or an empty context root.</li> <li>Script Portlet and DDC samples: Two new samples are available for usingwith . Both samples are available on the developerWorks\u00ae wiki.</li> <li>Additional in-product help: If you're new to , blue help bubbles describe the basic function of each page or section, as well as provide additional help resources. Additional hover help, and context sensitive help were added throughout the application.</li> <li>JSON is now supported in the:</li> <li>HTTP Transport</li> <li>JavaScript Data Access Rest API</li> <li>New JavaScript functionality: New JavaScript functions were added to the User Interface Objects.</li> <li>Forms Tab:</li> <li>Moving items in an application: You can now move form items between pages of a form.</li> <li>Order of forms in a application: You can change the order of the forms within an application by dragging and dropping them in the Outline view. When the application is deployed and launched, the first form in the application becomes the default form seen by the user.</li> <li>Warning message on Save: does not support multiple people editing the same application. If you and another user edit the same application, and the other user saves changes while you are still editing, a warning message is now displayed asking if you want to overwrite the changes made by the other user.</li> <li>Date item loads current date: A new property is available for theDate field. When selected, if the user leaves the Datefield empty, the current date is loaded upon form submission. If the user fills in the date field, the date supplied by the user is used.</li> <li>Single and Multi-Line entries uppercase: This new feature, located in theBasic tab of the Properties window lets you automatically change the user's entered text into upper case letters.</li> <li>Hiding Table buttons for Add, Edit, and Delete: In theAdvanced tab for a Table, you can now set that no buttons are displayed with your table. The buttons can be enabled using JavaScript, if required.</li> <li>Manage Tab:</li> <li>Default sort order: Default sort order was changed so the most recently changed applications are listed at the top. Now you can quickly find recently modified applications. Alphabetical sorting is still available, but no longer the default.</li> <li>Redeploy after saving: When you edit an application, and save the changes you must redeploy the application for the changes to be implemented. A visual indicator is now displayed as a reminder when an application has changes that have not been deployed.</li> <li>Adding tags to an application: When you create a new application, you can add tags at the same time. Tags are used to search for applications in theManage screen. Previously, you could only add tags to your application after it was created and listed in the Manage tab. Tags are separated by spaces, so if you need to make a multiple-word tag, use an underscore between the words.</li> <li>Access Tab: The \"All Authenticated Users\" group cannot be added to any role that has Edit permissions. Users can still be assigned individually, or as groups, to roles with edit permissions. This prevents your application from showing up in the Manage Tab for all authenticated users, and from their applications appearing on your Manage tab. You see only the applications you created, or those to which you have edit permissions.</li> <li>Rules:</li> <li>Naming Rules: You can now name and rename rules. Providing unique, descriptive names to rules makes them easier to find when building your application.</li> <li>See which item is used in a Rule: When a form item has a rule enabled, the Rules icon for the item contains a check mark. The check mark lets you quickly see which form items are involved in a rule.</li> <li>Stages:</li> <li>Stage Description: When you create a new Stage, you can add a detailed description. Adding descriptions is useful if you will have several similarly named stages that perform slightly different portions of the workflow.</li> <li>Rich Text Action Completion Message: The Action Completion Message is now a rich text field.</li> <li>Success message after submission: When a user completes and submits a form, the new default is to take the user away from the form and display the Action Completion Message. This reduces user confusion as they no longer see an empty, reloaded form on the screen. The existing options for the action taken upon form submission are still available in theEdit Form Properties window.</li> <li>View Responses:</li> <li>Individual Print, Email, and Delete buttons added: Print, email and delete buttons were added to each record row, so you can access them without opening each individual record.</li> <li>Email option contains the link to the record: The email operation emails the link to both print and launch the record.</li> <li>New fields added to Responses screen: \u201cCreated on\u201dand \u201cLast Updated By\u201d were added to the table so you can see additional information on each submitted form.</li> <li>Selected results open in a new window: When you click on a submitted record, it opens in a window, rather than in a side pane.</li> <li>Default view changed: When you click the View Responses link, the default view is now Responses, rather thanSummary.</li> <li>A number of upgrade routine fixes, accessibility, and usability changes were implemented.</li> <li>Values entered into the password item are not stored in your application. Since the password is never stored, it is never exported or shown in any field. The password field is empty when the form is rendered in its next stage. Using the password for calling server-side services during stage transitions still work as the value is included as part of the submitted data and not stored as part of the application record.</li> </ul>"},{"location":"wi_adding_html_fragments_to_a_form.html","title":"Adding HTML fragments to a form","text":"<p>Using the HTML Fragment item, you can add HTML anywhere in your form.</p> <ol> <li> <p>From the Palette, click Specialized toolbar.</p> </li> <li> <p>Drop an HTML Fragment item onto the form.</p> </li> <li> <p>Click HTML, click to edit... and enter your HTML code.</p> <p>Note: Any application Cascading Style Sheets (CSS) used by the form are also applied to the HTML code you enter in the HTML Fragment form item. To see the CSS associated with your form, click the Styles tab.</p> </li> </ol> <p>Parent topic: Adding specialized form items</p>"},{"location":"wi_adding_media_to_a_form.html","title":"Adding media to a form","text":"<p>You can add media to the form anywhere you place the Media form item.</p> <p>The Media item supports .avi, .mpeg, .mpg, .wmv, .wma, .mov, .mp3, .mp4, and .swf file types. When you use the Media item in an HCL Leap application, it is important to use a media type that renders properly in the supported browsers that you expect your users to use. The ability to render a specific media type is dependent on the browser configuration and which plug-ins they installed.</p> <p>Note: Ensure that you have proper spacing between Media form items and other form items that require pop-ups, such as Calendar. If these types of form items are too close together, the Media item blocks the pop-ups of the other form items.</p> <ol> <li> <p>In the Palette, click Specialized.</p> <p>The list of specialized form items expands.</p> </li> <li> <p>Select Media and drop it onto the form.</p> </li> <li> <p>The properties side panel appears so you can configure the media file.</p> </li> <li> <p>Click Add file to upload a file, or point to a URL that hosts the file.</p> <p>Or you can select previously uploaded media from the Media drop-down menu.</p> <ol> <li> <p>To set a media item to display on an iPad, click Use a file on the internet.</p> </li> <li> <p>Set the URL for the file, then select Maintain a link to the file only. Click OK.</p> </li> </ol> </li> <li> <p>Configure the viewing options by adjusting the Show Control, Auto Start, and Loop radio buttons. Adjust the height and width of the view with the fields provided.</p> </li> <li> <p>Your changes are saved automatically.</p> </li> </ol> <p>Parent topic: Adding specialized form items</p>"},{"location":"wi_adding_tables_to_a_form.html","title":"Adding tables to a form","text":"<p>The Table form item enables the user to add complex entries to a form.</p> <p>You can use the Table form item to create a section where a user can submit repeated data. For example, in a job application you can build a table that asks for work history. You can create columns such as the \u201cCompany Name\u201d, \u201cJob Title\u201d, \u201cStart Date\u201d, and \u201cEnd Date\u201d. The user can add as many rows under these columns as required to provide their work history. In many cases, it is not feasible to add individual items for each repeating element as you cannot know in advance how many repeating elements the use requires. To achieve this functionality, the Table form item contains the following two complimentary elements:</p> <ul> <li>Child form \u2013 The Child form is a supporting form that contains the form items that collect the repeated data. In the \u201cwork history\u201d example, the child form contains a Date form item for collecting the \u201cStart Date\u201d of a previous job. A child form is similar to a regular form, however it is limited to a single page. When a user completes their job history, the child form is shown in a dialog box. The user can enter as many rows as required to submit a complete job history. In the Outline view, the child form is called \"Table\", and is listed as a subset of the parent page.</li> <li> <p>Table display \u2013 The Table display shows the data entries that are collected by the child form. The columns in the table represent the individual items from the child form. The visibility of specific columns in the table is configurable in the properties side panel.</p> </li> <li> <p>In the Palette, click Specialized.</p> <p>The list of specialized form items expands.</p> </li> <li> <p>Select Table, and drop it onto the form.</p> <p>Adding the table creates a Table child form in the Outline view.</p> </li> <li> <p>In the table, click the link to access the child form, and define the table columns by selecting form items from the Common Palette.</p> <p>Ensure that you give each form item a specific name as the items added to the Table child form become column titles for the table.</p> <p>For example, if you insert a Single Line Entry form item to record someone\u2019s name, you must change the title of the item, or the table on the will display \u201cSingle Line Entry\u201d. The title of the form item is not helpful to users. You will then have to manually adjust the item name using the Properties side panel.</p> </li> <li> <p>When you have built your table, go to the Outline view on the right side of the screen and click the parent Page.</p> <p>You are returned to the main form design area. The table appears on the form, and the titles of the table items are displayed as column headers.</p> </li> </ul> <p>Parent topic: Adding specialized form items</p>"},{"location":"wi_echoing_text_with_a_text_item.html","title":"Echoing text with a Text item","text":"<p>You can use the Text item to echo text, or build a summary page.</p> <p>Use the Text item from the Palette to create a header or title for your form. You can also use it to echo text, make a summary page, or to add a user\u2019s name to the beginning of a form. The following instructions describe how to create a summary page on your form. The summary page displays a read-only version of the changes a user made before confirming a change. For example, if your application is a checkout feature where users enter billing and shipping information, you can set an echo text page to confirm their billing and shipping addresses before completing and confirming the order.</p> <ol> <li> <p>In the Outline view insert a page by clicking the Ellipses (\u2026) icon for Page 1 and selecting \u201c+ Add Form Page\u201d.</p> <p>An empty form page appears.</p> </li> <li> <p>Drop a Text item onto the form.</p> </li> <li> <p>Click the newly created text item.</p> <p>The properties side panel opens.</p> </li> <li> <p>Enter the name of the Text item in the text area.</p> <p>For example, you might enter \u201cSummary Page\u201d.</p> </li> <li> <p>Under the Content: heading, click Insert item. Select the page and item you want to display on the summary page.</p> </li> <li> <p>Repeat for all of the items in your form you want to summarize.</p> <p>You can separate the selected items by spaces, commas, line breaks, or other formatting.</p> </li> </ol> <p>Parent topic: Adding specialized form items</p>"},{"location":"wi_introduction_to_specialized_form_items.html","title":"Adding specialized form items","text":"<p>You can use specialized form items to style text, echo text back, create dynamic lines, or add HTML.</p> <ul> <li>Echoing text with a Text item You can use the Text item to echo text, or build a summary page.</li> <li>Adding tables to a form The Table form item enables the user to add complex entries to a form.</li> <li>Adding HTML fragments to a form Using the HTML Fragment item, you can add HTML anywhere in your form.</li> </ul> <p>Parent topic: Using the editor</p>"},{"location":"widget_aggregation.html","title":"Aggregation Widgets","text":"<p>A custom widget with a datatype of <code>'aggregation'</code> is a special type of data widget that can achieve the use-case of a \"repeating section\". The section is a sub-form which the author can design as they wish, with required fields and others. The end-user can then create and fill multiple instances of that section, shown sequentially on the page.  For example, the widget could be used by the app author to ask for a list of vehicles owned by the end-user, with maker, model, and year for each vehicle. </p> <p>The data type of the instantiated custom widget will be a \"business object list\" (BOL). It is expected that a custom repeating section widget will utilize the existing API for BOLs. See Business Object List (BOL) for lists of Business Objects. It is the responsibility of the custom widget to provide the UI for the end-user to trigger the addition (or deletion) of items in the BOL. In turn, Leap will create an instance of the UI (the sub-form) and pass that to the custom widget to place into its DOM. Hence, it is the manipulation of data that drives the UI.</p> <p>The instantiated custom widget must include the following functions:</p> <ul> <li> <p><code>placeDesignForm(formNode)</code>: When the Leap app author places a repeating section widget on the canvas, Leap will create a sub-form (ie. <code>formNode</code>) for the app author to add fields to. Leap will call this function for the sub-form to be placed into the custom widget's DOM.  </p> </li> <li> <p><code>addEntry(entryNode, entryId)</code>: When a new item is added to the custom widget's BOL, Leap will instantiate the corresponding sub-form (ie. <code>entryNode</code>) and pass it to this function to be placed into the custom widget's DOM. <code>entryId</code> is a transient UUID that can be used by the custom widget to keep track of entries, if needed, for the current user session.</p> </li> <li> <p><code>removeEntry(entryNode, entryId)</code>: When an item is removed from the custom widget's BOL, Leap will call this function to ensure the corresponding sub-form (ie. <code>entryNode</code>) is removed from the custom widget's DOM.  </p> </li> </ul> <p>Important: <code>formNode</code> and <code>entryNode</code> (and their ancestors), should not be manipulated or inspected in any way; treat each as a black-box.</p>"},{"location":"widget_aggregation.html#example","title":"Example","text":"<p>This specialized widget is best described with an example:</p> <pre><code>acme.myRepeatingSection = {\n  id: \"acme.RepeatingSection\",\n  version: \"1.0.0\",\n  apiVersion: \"1.0.0\",\n  label: {\n    \"default\": \"ACME Repeating Section\",\n  },\n  description: {\n    \"default\": \"ACME Repeating Section\",\n  },\n  datatype: {\n    type: \"aggregation\"\n  },\n  category: {\n    id: \"acme.sampleWidgets\",\n    label: {\n      \"default\": \"ACME Samples\",\n    }\n  },\n  iconClassName: \"acmeRepeatingSectionIcon\",\n  builtInProperties: [{ id: \"title\" }],\n  properties: [\n    { id: \"explanationText\", propType: \"string\", label: { \"default\": \"Explanation Text\" }, defaultValue: { \"default\": \"Some default explanation text\" } },\n    { id: \"minEntries\", propType: \"number\", label: { \"default\": \"Min Entries\" }, defaultValue: 0 },\n    { id: \"maxEntries\", propType: \"number\", label: { \"default\": \"Max Entries\" }, defaultValue: 10 },\n  ],\n\n  // initialize widget in the DOM, with initial properties and event callbacks\n  instantiate: function (context, domNode, initialProps, eventManager) {\n\n    const widgetInstance = {\n      _disabled: false,\n      _mode: null, // 'design', 'preview', or 'run'\n      _rootNode: null,\n      _titleNode: null,\n      _entriesNode: null,\n      _addBtn: null,\n      _eventManager: null,\n      _formDesignNode: null,\n      _minEntries: null,\n      _maxEntries: null,\n\n      // internal custom mechanics for changing widget props\n      _setProp: function ({ propName, propValue }) {\n        switch (propName) {\n          case \"title\":\n            this._titleNode.innerHTML = acme.makeHTMLSafe(propValue);\n            break;\n          case \"minEntries\":\n            this._minEntries = propValue;\n            break;\n          case \"maxEntries\":\n            this._maxEntries = propValue;\n            break;\n          default:\n            // ignore\n            break;\n        }\n        this._updateUI();\n      },\n\n      // internal method for creating and initializing the widget\n      _init: function (context, domNode, initialProps, eventManager) {\n        this._mode = context.mode;\n        this._businessObjectList = context.BOA;\n        this._eventManager = eventManager;\n        const widgetHTML = `\n            &lt;div class=\"acme-rs\"&gt;\n                &lt;div class=\"acme-rs-title\"&gt;&lt;/div&gt;\n                &lt;div class=\"acme-rs-form-design\"&gt;&lt;!-- sub-form design will go here --&gt;&lt;/div&gt;\n                &lt;div class=\"acme-rs-entries\"&gt;&lt;!-- entries will go here --&gt;&lt;/div&gt;\n                &lt;div class=\"acme-rs-prompt\"&gt;&lt;/div&gt; \n                &lt;div&gt;&lt;button class=\"acme-rs-add-btn\"&gt;Add Entry&lt;/button&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        `;\n        domNode.innerHTML = widgetHTML;\n        this._rootNode = domNode.firstChild;\n        this._titleNode = domNode.querySelector(':scope .acme-rs-title');\n        this._formDesignNode = domNode.querySelector(':scope .acme-rs-form-design');\n        this._entriesNode = domNode.querySelector(':scope .acme-rs-entries');\n\n        this._formDesignNode.style.display = this._mode === 'design' ? '' : 'none';\n        this._entriesNode.style.display = this._mode === 'design' ? 'none' : '';\n\n        this._promptNode = domNode.querySelector(':scope .acme-rs-prompt')\n\n        this._addBtn = domNode.querySelector(':scope button');\n        this._addBtn.style.display = this._mode === 'design' ? 'none' : '';\n        this._addBtn.addEventListener('click', () =&gt; {\n          // use documented JavaScript API to add a new data entry\n          const bo = this._businessObjectList.createNew();\n          this._businessObjectList.add(bo);\n        });\n\n        Object.keys(initialProps).forEach((propName) =&gt; {\n          this._setProp({ propName: propName, propValue: initialProps[propName]\n          });\n        });\n\n      },\n\n      _updateUI: function () {\n        if (this._mode === 'design') {\n          this._promptNode.innerHTML = 'Drag and drop some widgets above';\n        } else {\n          this._addBtn.disabled = this._disabled || this._businessObjectList.getLength() &gt;= this._maxEntries;\n          this._promptNode.innerHTML = 'No entries';\n          this._promptNode.style.display = this._businessObjectList.getLength() &gt; 0 ? 'none' : '';\n        }\n        this._entriesNode.querySelectorAll('.acme-rs-delete-btn').forEach((btn) =&gt; {\n          btn.disabled = this._disabled;\n        });\n      },\n\n      placeDesignForm: function (formNode) {\n        return this._formDesignNode.appendChild(formNode);\n      },\n\n      addEntry: function (entryNode, entryId) {\n        const entryContainer = document.createElement('div');\n        entryContainer.className = 'acme-rs-entry';\n        entryContainer.id = `${entryId}_container`;\n\n        const deleteBtn = document.createElement('button');\n        deleteBtn.className = 'acme-rs-delete-btn';\n        deleteBtn.innerHTML = 'Delete';\n        deleteBtn.setAttribute('data-entry-id', entryId);\n        entryContainer.appendChild(deleteBtn);\n        deleteBtn.addEventListener('click', () =&gt; {\n          // use documented JavaScript API to remove data entry\n          const bo = this._businessObjectList.getById(entryId);\n          this._businessObjectList.remove(bo);\n        });\n\n        entryContainer.appendChild(entryNode);\n        this._entriesNode.appendChild(entryContainer);\n\n        this._updateUI();\n      },\n\n      removeEntry: function (entryNode, entryId) {\n        const entryContainer = document.getElementById(`${entryId}_container`);\n        entryContainer.removeChild(entryNode);\n        entryContainer.remove();\n\n        this._updateUI();\n      },\n\n      getValue: function () {\n        // must be present, but is not needed for 'aggregation' widgets\n      },\n\n      setValue: function (val) {\n        // must be present, but is not needed for 'aggregation' widgets\n      },\n\n      setDisabled: function (disabled) {\n        this._disabled = disabled;\n        this._updateUI();\n      },\n\n      // called when properties change in the authoring environment, or via JavaScript API\n      setProperty: function (propName, propValue) {\n        this._setProp({ propName, propValue });\n      }\n    };\n    widgetInstance._init(context, domNode, initialProps, eventManager);\n    return widgetInstance;\n  }\n}\n</code></pre> <p>Parent topic: Custom Widget API</p>"},{"location":"widget_instantiation.html","title":"Widget Instantiation","text":"<p>The widget <code>instantiate()</code> function is called when an instance of the custom widget needs to be created. The function is expected to return an <code>object</code> that allows Leap to interact with the instantiated widget.</p> <p><code>instantiate()</code> is called with the following arguments:</p> <ul> <li><code>context</code>: an <code>object</code> containing useful meta-data, including:<ul> <li><code>locale</code>: the locale of current page. This is useful for displaying messages in the correct language or for dealing with locale preferences (ex. number formatting).</li> <li><code>mode</code>: one of <code>'design'</code> (authoring), <code>'preview'</code> (previewing), or <code>'run'</code> (running app). The widget's behaviour may need to be tailored based on the context, for example disabling some behaviours in <code>'design'</code> mode.</li> </ul> </li> <li><code>domNode</code>: the parent DOM node into which the widget's DOM must be placed. The custom widget code must not manipulate the parent node or anything outside of it.</li> <li><code>initialProps</code>: these will be the initial set of property values as chosen by the app author.</li> <li><code>eventManager</code>: for triggering events. For example, <code>eventManager.fireEvent('onChange')</code>.</li> </ul> <p>The returned <code>object</code> is expected to supply the following functions:</p> <ul> <li><code>getValue()</code>: required for data widgets.</li> <li><code>setValue(value)</code>: required for data widgets.</li> <li><code>setProperty(propName, propValue)</code>: required for all widgets.</li> <li><code>getDisplayTitle()</code>: (optional) for display widget's title in various parts of the UI.</li> <li><code>setDisabled(isDisabled)</code>: (optional) to tailor the widget's behaviour when disabled and enabled.</li> <li><code>setErrorMessage(errorMessage)</code>: (optional) for the widget to report validation errors. <code>errorMessage</code> will be <code>null</code> if the data is valid.</li> <li><code>setRequired(isRequired)</code>: (optional) to tailor the widget's behaviour when the data is required, or not required.</li> <li><code>getOptions()</code>: (optional) see Widgets with Options.</li> <li><code>validateValue(value)</code>: (optional) - see Validation.</li> <li><code>getJSAPIFacade()</code>: (optional) returns an object that supplies additional custom functions that will be available to app authors to use in their custom JavaScript. Special care must be taken to ensure that app authors have a limited range of possibilities and cannot take over the whole page with their custom JavaScript. When Leap's secure sandbox mode is enabled (<code>secureJS=true</code>), an author's custom JavaScript cannot access any variables prefixed with a double-underscore.</li> </ul> <p>The widget creator is free to decide how they want to code and manage the widget instance internally.</p> <p>Parent topic: Custom Widget API</p>"},{"location":"widget_internationalization.html","title":"Internationalization","text":"<p>Certain attributes of the widget definition can be displayed to app authors working in different locales. To support multiple languages during authoring, some properties can be specified as \"multi-string\" objects rather than a plain <code>string</code> values.</p> <p>For example:</p> <pre><code>label: 'Yes/No',\n</code></pre> <p>can be written as</p> <pre><code>label: {\n  \"default\": 'Yes/No',\n  \"fr\": 'Oui/No',\n  \"de\": 'Ja/Nein'\n},\n</code></pre> <p>The property names are expected to match the <code>lang</code> attribute of the current HTML page. For example, <code>\"fr\": 'Oui/No'</code> matches <code>&lt;html lang=\"fr\"&gt;</code>.</p> <p>If there is no match, then the <code>\"default\"</code> property will be used as a fallback.</p> <p>The following widget attributes are globalizable:</p> <ul> <li><code>label</code></li> <li><code>description</code></li> <li><code>category &gt; label</code></li> <li><code>properties &gt; (property) &gt; label</code></li> <li><code>properties &gt; (property) &gt; defaultValue</code></li> <li><code>properties &gt; (property) &gt; options &gt; (option) &gt; title</code></li> </ul> <p>Parent topic: Custom Widget API</p>"},{"location":"widget_javaapi.html","title":"Usage of JavaScript API","text":"<p>Custom widgets can use Leap's JavaScript API to help achieve their objectives.</p> <p>The API can be accessed via the global <code>NitroApplication</code> object or by the passed-in <code>context</code> object. For example, the following is a widget that renders itself appropriately based on the form's currently selected page:</p> <pre><code>const myPageNavigator = {\n    ...\n    instantiate: function (context, domNode) {\n        if (context.mode === 'run' || context.mode === 'preview') {\n            const currentPage = context.page;\n            context.form.getPageIds().forEach((pageId) =&gt; {\n                const page = context.form.getPage(pageId);\n                const btn = document.createElement('button');\n                btn.innerHTML = makeHTMLSafe(page.getTitle());\n                if (page === currentPage) {\n                    btn.setAttribute('disabled', 'true');\n                } else {\n                    btn.addEventListener('click', () =&gt; {\n                        context.form.selectPage(pageId);\n                    });\n                }\n                domNode.appendChild(btn);                    \n            });\n        } else {\n            ...\n        }\n        return { ... };\n    }\n}\n</code></pre> <p>Parent topic: Custom Widget API</p>"},{"location":"widget_upgrade.html","title":"Upgrading","text":"<p>The exact techniques for upgrading widgets from one major version to the next has not yet been established.</p> <p>The intention is to solicit feedback from the community on how best to achieve this.</p> <p>Parent topic: Custom Widget API</p>"},{"location":"widget_validation.html","title":"Validation","text":"<p>Some intrinsic validation will be done according to the <code>type</code> and <code>constraints</code> declared in the widget's <code>datatype</code> property; however, it might be necessary for a widget to supply its own custom validation logic.</p> <p>This can be done by supplying a <code>validateValue()</code> function, which returns one of the following values:</p> <ul> <li><code>null</code> : indicates the value is valid</li> <li>An error message : the returned error message will be displayed to the app user in some contexts (ex. when attempting to go the next page).</li> </ul> <p>It is responsibility of the custom widget to render itself appropriately based on its state of validity.</p> <p>Note: The widget's <code>setErrorMessage</code> function will be triggered whenever the validity changes, due to contraints on the <code>datatype</code> or custom validation from the <code>validateValue()</code> function.</p> <p>Note: Any additional validation provided by the custom widget via a <code>validateValue()</code> function will not be enforced on the server; however, it will prevent the form from being submitted by the user in the browser.</p> <p>Parent topic: Custom Widget API</p>"},{"location":"widget_versioning.html","title":"Versioning","text":"<p>This topic describes the widget's <code>version</code>.</p> <p>The widget <code>version</code> must follow \"Semantic Versioning\" (semver.org) practices of <code>MAJOR.MINOR.PATCH</code>. The following behaviours are expected:</p> <ul> <li><code>PATCH</code> increment (ex. 1.0.0 &gt; 1.0.1)<ul> <li>For backwards compatible bug fixes.</li> <li>Authors: any widgets already declared with the same minor version will automatically start using the newest patch version. Newly added widgets will use the newest patch version.</li> <li>End-Users: any widgets declared with the same minor version will automatically start using the newest patch version.</li> </ul> </li> <li><code>MINOR</code> increment (ex. 1.0.1 &gt; 1.1.0)<ul> <li>For new functionality that is backwards compatible.</li> <li>Authors: any widgets already declared with the same major version will automatically start using the newest minor version. Newly added widgets will use the new minor version. New optional widget properties might appear to the app author.</li> <li>End-Users: any widgets declared with the same major version will automatically start using the newest minor version. End-users might experience some noticeable improvements.</li> </ul> </li> <li><code>MAJOR</code> increment (ex. 1.1.0 &gt; 2.0.0)<ul> <li>For major changes that are not backwards compatible.</li> <li>Authors: any widgets already declared with a different major version will remain at that major version. The declaration of previous major versions of widgets must be retained by the customer or failures may occur. The customer will decide which major versions of the widget will display on the palette. See \"Upgrading\" below for more information.</li> <li>End-Users: any widgets already declared with a different major version will remain at that major version. The declaration of previous major versions of widgets must be retained by the customer or failures may occur. See \"Upgrading\" for more information.</li> </ul> </li> </ul> <p>Note: This Custom Widget API will also follow \"semver\" practices.</p> <p>Parent topic: Custom Widget API</p>"},{"location":"widgets_examples.html","title":"Examples","text":"<p>Note: Some of the examples mentioned here are deployed with Leap. To access them, modify the provided URLs to match your server hostname.</p>"},{"location":"widgets_examples.html#section_xxx_b3n_jyb","title":"Full Example - Display Widget","text":"<ul> <li>Navigation Header<ul> <li>http://yourleapserver.example.com/apps/custom-widgets/samples/acme/Acme_Widgets.css</li> <li>http://yourleapserver.example.com/apps/custom-widgets/samples/acme/Acme_Common.js</li> <li>http://yourleapserver.example.com/apps/custom-widgets/samples/acme/Acme_PageNavHeader_Widget.js</li> </ul> </li> <li>Notification Widget (at github.com)</li> </ul>"},{"location":"widgets_examples.html#section_ivr_c3n_jyb","title":"Full Example - Data Widget","text":"<ul> <li>Yes/No Widget<ul> <li>http://yourleapserver.example.com/apps/custom-widgets/samples/acme/Acme_Widgets.css</li> <li>http://yourleapserver.example.com/apps/custom-widgets/samples/acme/Acme_Common.js</li> <li>http://yourleapserver.example.com/apps/custom-widgets/samples/acme/Acme_YesNo_Widget.js</li> </ul> </li> <li>Scribble Signature Widget (at github.com)</li> </ul>"},{"location":"widgets_examples.html#section_tj2_mdn_jyb","title":"Full Example - React Material UI Widgets","text":"<ul> <li>MUI - Star Rating and Switch Widgets (at github.com)</li> </ul> <p>Parent topic: Custom Widget API</p>"},{"location":"widgets_limitations.html","title":"Known limitations","text":"<ul> <li>Complex Data: Widgets that need to store complex data are expected to use a \"parsable\" <code>string</code> value (ex. <code>JSON</code>). There is no mechanism to handle customized rendering of this value in some parts of the product (ex. Print View), or to customize searching/filtering based on the intricacies of the complex value.</li> <li>Containers: There is no support for custom container widgets, those being widgets that contain other widgets, such as a collapsible section.</li> <li>Full Custom Properties: There is no mechanism to supply 100% custom properties. Properties of the custom widget will be from a set of common prescribed types.</li> <li>In-line Editing: There is no mechanism to support the app author in direct in-line editing of a widget's properties on the canvas.</li> <li>Multilingual Apps: There is no mechanism (beyond an app author's custom JavaScript) to allow app authors to supply property values for an application that is to be used by end-users who speak different languages.</li> <li>Author-Defined Data Constraints - There are limited mechanisms for app authors to define data constraints on the values supplied by end-users. Values can be constrained in the UI by the custom widget itself, or by the author's custom JavaScript.</li> </ul> <p>Parent topic: Custom Widget API</p>"},{"location":"widgets_options.html","title":"Widgets with Options","text":"<p>Widgets that allow the end-user to select from a set of options require specific treatment. This includes widgets such as dropdowns, radio groups, or checkbox groups. These options could be hardcoded in the custom widget, or defined by the app author.</p>"},{"location":"widgets_options.html#section_gdf_tfn_jyb","title":"Author-Defined Options","text":"<p>If a widget requires app authors to define their own options, define a property with both <code>id</code> and <code>propType</code> set to a value of <code>\"customOptions\"</code>.</p> <p>Example:</p> <pre><code>const myWidgetDefintion = {\n    ...\n    properties: [\n        {\n            id: \"customOptions\",\n            propType: \"customOptions\",\n            label: \"Options\"\n        },\n        ...\n    ],\n    ...\n</code></pre> <p>Note: An id of <code>'customOptions'</code> is meaningful to Leap. All other custom property id's are arbitrary.</p>"},{"location":"widgets_options.html#section_rnj_wfn_jyb","title":"Hardcoded Options","text":"<p>If the widget's options are hardcoded, add a <code>getOptions()</code> function to your widget.</p> <p>Example:</p> <pre><code>const myWidgetDefintion = {\n    ...\n    getOptions : function () {\n        return [{title: 'Yes', value: 'yes'}, {title: 'No', value: 'no'}];\n    },\n    ...\n};\n</code></pre> <p>Parent topic: Custom Widget API</p>"},{"location":"widgets_security.html","title":"Security Considerations","text":"<p>This topic describes security considerations for Custom Widget API.</p> <ol> <li>It is the responsibility of the widget creator to avoid script injection attacks by ensuring that values are sanitized or escaped properly before placing them into the DOM. In general, the widget creator is responsible for following secure engineering practices.</li> <li>The custom widget code has full access to the page, but it should not call product functions, manipulate the product's JavaScript values, or interact with the product's DOM nodes in any way that is not prescribed by this API. Doing so could jeporadize the security of the product and break your custom widgets in future product releases.</li> <li>As stated above, special care must be taken when supplying a <code>getJSAPIFacade()</code> function to expose additional widget capabilities for app authors to leverage in their custom JavaScript. These functions should provide tightly constrained interactions with the custom widget, with no possibility for script injection or access to the widget's internal objects or its DOM, or those of the product. The \"facade\" naming is a reminder that the app author's code should only get references to values and objects that are necessary and \"safe\".</li> <li>It is the responsibility of widget creators and Leap administrators to ensure that only trusted stable resources are loaded into Leap's pages. The specified additional resources will be loaded directly into the user's browser (by injecting them as-written into the <code>&lt;head&gt;</code> of the page). There will be no additional vetting or sanitizing of resources by Leap. It is not recommended for a customer to rely on resources that they do not tightly control (ie. avoid usage of libraries from a 3rd-party CDN).</li> <li> <p>Strict CSP support requires a special <code>nonce='#!#cspNonce!#!'</code> attribute on <code>&lt;script&gt;</code> tags. For example:</p> <pre><code>ibm.nitro.NitroConfig.runtimeResources.4 = &lt;script nonce='#!#cspNonce!#!'\n        src='https://myWidgets.example.com/MyYesNoWidget.js'&gt;&lt;/script&gt;\n</code></pre> </li> </ol> <p>Parent topic: Custom Widget API</p>"},{"location":"widgets_thirdpartylibraries.html","title":"Incorporating third-party libraries","text":"<p>This topic describes incorporating third-party libraries.</p> <ul> <li>3rd-party libraries are expected to be bundled and loaded in an isolated manner so that they do not pollute the global namespace or interfere with the product code, in the current release or future releases</li> <li>Usage of the product's 3rd-party libraries is not supported; these may change or be removed at any time.</li> </ul> <p>Parent topic: Custom Widget API</p>"}]}